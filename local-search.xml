<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>redis_design_and_implementation</title>
    <link href="/2024/06/02/redis-design-and-implementation/"/>
    <url>/2024/06/02/redis-design-and-implementation/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>观影日志</title>
    <link href="/2023/04/14/%E8%A7%82%E5%BD%B1%E6%97%A5%E5%BF%97/"/>
    <url>/2023/04/14/%E8%A7%82%E5%BD%B1%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="宇宙探索编辑部"><a href="#宇宙探索编辑部" class="headerlink" title="[ ] 宇宙探索编辑部"></a>[ ] 宇宙探索编辑部</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304141024936.png"></p><h1 id="徒手攀岩"><a href="#徒手攀岩" class="headerlink" title="[ ] 徒手攀岩"></a>[ ] 徒手攀岩</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312072356666.png"></p><h1 id="流人"><a href="#流人" class="headerlink" title="[ ] 流人"></a>[ ] 流人</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080020897.png"></p><h1 id="为了全人类"><a href="#为了全人类" class="headerlink" title="[ ] 为了全人类"></a>[ ] 为了全人类</h1><p>看了第一集, 感觉不是很好看, 先弃了</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080021917.png"></p><h1 id="x-异人之下-剧-2025-x2F-02-x2F-03"><a href="#x-异人之下-剧-2025-x2F-02-x2F-03" class="headerlink" title="[x] 异人之下(剧)  2025&#x2F;02&#x2F;03"></a>[x] 异人之下(剧)  2025&#x2F;02&#x2F;03</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202502131315205.png"></p><h1 id="x-我的完美秘书-未完结-2025-x2F-02-x2F-02"><a href="#x-我的完美秘书-未完结-2025-x2F-02-x2F-02" class="headerlink" title="[x] 我的完美秘书 未完结 2025&#x2F;02&#x2F;02"></a>[x] 我的完美秘书 未完结 2025&#x2F;02&#x2F;02</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202502131312435.png"></p><h1 id="x-豺狼的日子-第一季-2025-x2F-02-x2F-01"><a href="#x-豺狼的日子-第一季-2025-x2F-02-x2F-01" class="headerlink" title="[x] 豺狼的日子 (第一季)  2025&#x2F;02&#x2F;01"></a>[x] 豺狼的日子 (第一季)  2025&#x2F;02&#x2F;01</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202501241937161.png"></p><h1 id="x-阴阳师-2025-x2F-01-x2F-01"><a href="#x-阴阳师-2025-x2F-01-x2F-01" class="headerlink" title="[x] 阴阳师 2025&#x2F;01&#x2F;01"></a>[x] 阴阳师 2025&#x2F;01&#x2F;01</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202501141921895.png"></p><h1 id="x-双狼-2024-x2F-10-x2F-09"><a href="#x-双狼-2024-x2F-10-x2F-09" class="headerlink" title="[x] 双狼 2024&#x2F;10&#x2F;09"></a>[x] 双狼 2024&#x2F;10&#x2F;09</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202410091859875.png"></p><h1 id="x-僵尸世界大战"><a href="#x-僵尸世界大战" class="headerlink" title="[x] 僵尸世界大战"></a>[x] 僵尸世界大战</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202405221920579.png"></p><h1 id="x-三笑才子佳人"><a href="#x-三笑才子佳人" class="headerlink" title="[x] 三笑才子佳人"></a>[x] 三笑才子佳人</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202405221918943.png"></p><h1 id="x-哥斯拉大战金刚-2024-x2F-04-x2F-27"><a href="#x-哥斯拉大战金刚-2024-x2F-04-x2F-27" class="headerlink" title="[x] 哥斯拉大战金刚 2024&#x2F;04&#x2F;27"></a>[x] 哥斯拉大战金刚 2024&#x2F;04&#x2F;27</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202404281534910.jpeg"></p><h1 id="x-ISLAND"><a href="#x-ISLAND" class="headerlink" title="[x] ISLAND"></a>[x] ISLAND</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080004935.png"></p><h1 id="x-大雨-2024-x2F-03-x2F-03-1-00"><a href="#x-大雨-2024-x2F-03-x2F-03-1-00" class="headerlink" title="[x] 大雨 2024&#x2F;03&#x2F;03 1:00"></a>[x] 大雨 2024&#x2F;03&#x2F;03 1:00</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202403041448328.png"></p><h1 id="x-边境杀手2-2024-x2F-02-x2F-15"><a href="#x-边境杀手2-2024-x2F-02-x2F-15" class="headerlink" title="[x] 边境杀手2 2024&#x2F;02&#x2F;15"></a>[x] 边境杀手2 2024&#x2F;02&#x2F;15</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202402151600637.png"></p><h1 id="x-边境杀手-2024-x2F-02-x2F-14-01-00"><a href="#x-边境杀手-2024-x2F-02-x2F-14-01-00" class="headerlink" title="[x] 边境杀手 2024&#x2F;02&#x2F;14 01:00"></a>[x] 边境杀手 2024&#x2F;02&#x2F;14 01:00</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202402141853598.webp"></p><h1 id="x-银翼杀手2049-2023-x2F-12-x2F-14-03-00"><a href="#x-银翼杀手2049-2023-x2F-12-x2F-14-03-00" class="headerlink" title="[x] 银翼杀手2049 2023&#x2F;12&#x2F;14 03:00"></a>[x] 银翼杀手2049 2023&#x2F;12&#x2F;14 03:00</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312142010734.png"></p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312142007111.png"></p><h1 id="x-银翼杀手-2023-x2F-12-x2F-13-03-00"><a href="#x-银翼杀手-2023-x2F-12-x2F-13-03-00" class="headerlink" title="[x] 银翼杀手 2023&#x2F;12&#x2F;13 03:00"></a>[x] 银翼杀手 2023&#x2F;12&#x2F;13 03:00</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312142006520.png"></p><h1 id="x-地心引力-2023-x2F-12-x2F-12-03-00"><a href="#x-地心引力-2023-x2F-12-x2F-12-03-00" class="headerlink" title="[x] 地心引力 2023&#x2F;12&#x2F;12 03:00"></a>[x] 地心引力 2023&#x2F;12&#x2F;12 03:00</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312121827715.png"></p><h1 id="x-杀出个黎明"><a href="#x-杀出个黎明" class="headerlink" title="[x] 杀出个黎明"></a>[x] 杀出个黎明</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080026012.png"></p><h1 id="x-爱，死亡和机器人"><a href="#x-爱，死亡和机器人" class="headerlink" title="[x] 爱，死亡和机器人"></a>[x] 爱，死亡和机器人</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080014930.png"></p><h1 id="x-弥留之国的爱丽丝"><a href="#x-弥留之国的爱丽丝" class="headerlink" title="[x] 弥留之国的爱丽丝"></a>[x] 弥留之国的爱丽丝</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080012891.png"><br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080013008.png"></p><h1 id="x-最后生还者"><a href="#x-最后生还者" class="headerlink" title="[x] 最后生还者"></a>[x] 最后生还者</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080004116.png"></p><h1 id="x-还魂"><a href="#x-还魂" class="headerlink" title="[x] 还魂"></a>[x] 还魂</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080001280.png"><br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080002218.png"></p><h1 id="x-黄河尕谣"><a href="#x-黄河尕谣" class="headerlink" title="[x] 黄河尕谣"></a>[x] 黄河尕谣</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080000190.png"></p><h1 id="x-子弹列车"><a href="#x-子弹列车" class="headerlink" title="[x] 子弹列车"></a>[x] 子弹列车</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312080000489.png"></p><h1 id="x-夜访吸血贵"><a href="#x-夜访吸血贵" class="headerlink" title="[x] 夜访吸血贵"></a>[x] 夜访吸血贵</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312072359406.png"></p><h1 id="x-悬崖"><a href="#x-悬崖" class="headerlink" title="[x] 悬崖"></a>[x] 悬崖</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312072357854.png"></p><h1 id="x-庭外"><a href="#x-庭外" class="headerlink" title="[x] 庭外"></a>[x] 庭外</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312072356470.png"></p><h1 id="x-朝五晚九"><a href="#x-朝五晚九" class="headerlink" title="[x] 朝五晚九"></a>[x] 朝五晚九</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312072315437.png"></p><h1 id="x-双探j"><a href="#x-双探j" class="headerlink" title="[x] 双探j"></a>[x] 双探j</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202312072354251.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>锅霞客游记</title>
    <link href="/2022/06/27/%E9%94%85%E9%9C%9E%E5%AE%A2%E6%B8%B8%E8%AE%B0/"/>
    <url>/2022/06/27/%E9%94%85%E9%9C%9E%E5%AE%A2%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>江湖, 不应该是利益, 不应该是人情事故~</p><p>它应该是少年人的梦~</p><hr><p>去他妈的油盐酱醋十三香~</p><p>我还是想去看看那些没去过的地方~</p><p>可能, 我会直接撞入怒江~</p><p>于是,</p><h1 id="2022年07月12日-定了一辆凯越525x-目前等车中"><a href="#2022年07月12日-定了一辆凯越525x-目前等车中" class="headerlink" title="2022年07月12日 定了一辆凯越525x, 目前等车中~"></a>2022年07月12日 定了一辆凯越525x, 目前等车中~</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202207180019184.png" alt="image-20220718001954135"></p><h1 id="2022年09月05号-启程从青岛摩旅回东北"><a href="#2022年09月05号-启程从青岛摩旅回东北" class="headerlink" title="2022年09月05号 启程从青岛摩旅回东北~"></a>2022年09月05号 启程从青岛摩旅回东北~</h1><h1 id="2023年03月-又见到汤圆了"><a href="#2023年03月-又见到汤圆了" class="headerlink" title="2023年03月 又见到汤圆了~"></a>2023年03月 又见到汤圆了~</h1><h1 id="2023年04月07日更"><a href="#2023年04月07日更" class="headerlink" title="2023年04月07日更"></a>2023年04月07日更</h1><p>回到上海继续上班ing~</p><p>努力控制灵魂对自由的渴望~</p><p>标一个人生愿望清单</p><ul><li><input disabled="" type="checkbox"> 秦皇岛 北戴河</li><li><input disabled="" type="checkbox"> 山西・繁峙・公主文殊寺明代壁畫<br>  <img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304071757964.png"></li><li><input disabled="" type="checkbox"> 漠河</li><li><input disabled="" type="checkbox"> 抚远</li><li><input disabled="" type="checkbox"> 佳木斯</li><li><input disabled="" type="checkbox"> 敦煌石窟</li><li><input disabled="" type="checkbox"> 河西走廊</li></ul><h1 id="山西"><a href="#山西" class="headerlink" title="山西"></a>山西</h1><h2 id="临汾隰县凤凰山巅-小西天"><a href="#临汾隰县凤凰山巅-小西天" class="headerlink" title="临汾隰县凤凰山巅 小西天"></a>临汾隰县凤凰山巅 小西天</h2><ul><li><input disabled="" type="checkbox"> 小西天 <img src="https://raw.githubusercontent.com/Afret1/image/master/img/202404061754369.png"></li></ul><h2 id="平遥"><a href="#平遥" class="headerlink" title="平遥"></a>平遥</h2><ul><li><input disabled="" type="checkbox"> 双林寺 <img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304272019169.png"></li></ul><h2 id="汾阳"><a href="#汾阳" class="headerlink" title="汾阳"></a>汾阳</h2><ul><li><input disabled="" type="checkbox"> 太符观 <img src="https://raw.githubusercontent.com/Afret1/image/master/img/202308041106833.png"></li></ul><h1 id="川西"><a href="#川西" class="headerlink" title="川西"></a>川西</h1><ul><li><input disabled="" type="checkbox"> 雅拉雪山<br> <img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304271943014.png"><br>  <img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304271959409.png"></li></ul><h1 id="西藏"><a href="#西藏" class="headerlink" title="西藏"></a>西藏</h1><h2 id="甘孜"><a href="#甘孜" class="headerlink" title="甘孜"></a>甘孜</h2><ul><li><input disabled="" type="checkbox"> 措卡湖<br> <img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304272006123.png"><br>  <img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304272009645.png"></li></ul><h2 id="东北"><a href="#东北" class="headerlink" title="东北"></a>东北</h2><ul><li><input disabled="" type="checkbox"> 漠河<br>  <img src="https://raw.githubusercontent.com/Afret1/image/master/img/202305151229179.png"></li></ul><h1 id="河南"><a href="#河南" class="headerlink" title="河南"></a>河南</h1><h2 id="开封"><a href="#开封" class="headerlink" title="开封"></a>开封</h2><ul><li><input disabled="" type="checkbox"> 闫记灌汤包<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202306021332294.png"><br>先开窗, 再喝汤, 一口光, 满口香~</li></ul><h1 id="张掖"><a href="#张掖" class="headerlink" title="张掖"></a>张掖</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202307151404836.png" alt="image-20230715140418765"></p><h1 id="甘肃"><a href="#甘肃" class="headerlink" title="甘肃"></a>甘肃</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202311131941071.png"><br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202311131948553.png"><br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202311131952484.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>道法自然|易经瞧一瞧~</title>
    <link href="/2022/06/03/%E9%81%93%E6%B3%95%E8%87%AA%E7%84%B6-%E6%98%93%E7%BB%8F%E7%9E%A7%E4%B8%80%E7%9E%A7/"/>
    <url>/2022/06/03/%E9%81%93%E6%B3%95%E8%87%AA%E7%84%B6-%E6%98%93%E7%BB%8F%E7%9E%A7%E4%B8%80%E7%9E%A7/</url>
    
    <content type="html"><![CDATA[<p>易经的特性</p><ul><li>模糊性  话不说明白</li><li>灵活性 正话反说, 都是你的了</li><li>空白性 打哪指哪儿~</li></ul><h1 id="子曰-提溜算卦"><a href="#子曰-提溜算卦" class="headerlink" title="子曰: 提溜算卦~"></a>子曰: 提溜算卦~</h1><p>三个铜板, 正面为 3 反面为 2</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202207191924964.png" alt="image-20220719192458928"></p><h2 id="阳九阴六"><a href="#阳九阴六" class="headerlink" title="阳九阴六"></a>阳九阴六</h2><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202207191850051.png" alt="image-20220719185002966"></p><p>时, 位, 性质 来代表 爻</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202207191856880.png" alt="image-20220719185612855"></p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202207191902529.png" alt="image-20220719190250502"></p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202207191903311.png" alt="image-20220719190330272"></p><blockquote><p>为什么初九不叫九一</p><p>事情开始的时候时间比空间重要</p></blockquote><h1 id="乾坤-易之门"><a href="#乾坤-易之门" class="headerlink" title="乾坤  易之门"></a>乾坤  易之门<img src="https://raw.githubusercontent.com/Afret1/image/master/img/202207191927255.png" alt="image-20220719192749234"></h1><blockquote><p>错卦</p><p>两种完全相反的卦, 在易经里面叫做错卦</p></blockquote><p>六十四卦分为三类: </p><ul><li>纯阳 —- 乾卦</li><li>纯阴 —- 坤卦</li><li>有阴有阳 —-</li></ul><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202207192000431.png" alt="image-20220719200012404"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg</title>
    <link href="/2022/05/27/ffmpeg/"/>
    <url>/2022/05/27/ffmpeg/</url>
    
    <content type="html"><![CDATA[<h1 id="批量转换视频格式"><a href="#批量转换视频格式" class="headerlink" title="批量转换视频格式"></a>批量转换视频格式</h1><p><code>find ./ -name &#39;*.mov&#39; -exec sh -c &#39;ffmpeg -i &quot;$0&quot; &quot;$&#123;0%%.mov&#125;.mp4&quot;&#39; &#123;&#125; \;</code></p><h1 id="合并音视频"><a href="#合并音视频" class="headerlink" title="合并音视频"></a>合并音视频</h1><p><code>ffmpeg -i video.mp4 -i audio.wav -c:v copy -c:a aac -strict experimental output.mp4</code></p><p>video.mp4,audio.wav 分别是要合并的视频和音频，output.mp4 是合并后输出的音视频文件.</p><h1 id="替换音频"><a href="#替换音频" class="headerlink" title="替换音频"></a>替换音频</h1><p><code>ffmpeg -i video.mp4 -i audio.wav -c:v copy -c:a aac -strict experimental -map 0:v:0 -map 1:a:0 output.mp4</code></p><p>用 audio 音频替换 video 中的音频</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>蜡笔小新表情包</title>
    <link href="/2022/05/24/%E8%9C%A1%E7%AC%94%E5%B0%8F%E6%96%B0%E8%A1%A8%E6%83%85%E5%8C%85/"/>
    <url>/2022/05/24/%E8%9C%A1%E7%AC%94%E5%B0%8F%E6%96%B0%E8%A1%A8%E6%83%85%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>蜡笔小新表情包~</p><p>嘻嘻嘻~</p><h1 id="零用钱绝对不要留到第二天"><a href="#零用钱绝对不要留到第二天" class="headerlink" title="零用钱绝对不要留到第二天"></a>零用钱绝对不要留到第二天</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202205242058043.png" alt="image-20220524205806971"></p><h1 id="我的零用钱都拿去买冰玩具还有动感超人花光了"><a href="#我的零用钱都拿去买冰玩具还有动感超人花光了" class="headerlink" title="我的零用钱都拿去买冰玩具还有动感超人花光了"></a>我的零用钱都拿去买冰玩具还有动感超人花光了</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202205242058680.png" alt="image-20220524205815644"></p><h1 id="我去上学了"><a href="#我去上学了" class="headerlink" title="我去上学了"></a>我去上学了</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202205242100731.png" alt="image-20220524210022667"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>笑死我了...</title>
    <link href="/2022/05/05/%E7%AC%91%E6%AD%BB%E6%88%91%E4%BA%86/"/>
    <url>/2022/05/05/%E7%AC%91%E6%AD%BB%E6%88%91%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h1 id="想你了"><a href="#想你了" class="headerlink" title="想你了"></a>想你了</h1><p>我拉了一条屎, 很长, 但是没有我对你的思念长~</p><h1 id="那些神一样的歇后语"><a href="#那些神一样的歇后语" class="headerlink" title="那些神一样的歇后语"></a>那些神一样的歇后语</h1><p>武大郎卖刺猬 – 人怂货扎手</p><p>从湖南到河南 – 难上加难</p><p>发面馒头画眼影 – 楞装下午茶小蛋糕</p><p>肚脐眼放屁 – 你是怎么想(响)的?</p><p>屁股插辣椒 – 眼热</p><p>我佛不度穷逼, 毕竟我听大悲咒都没 vip</p><p>武则天死老公 – 失去理智</p><p>鞭炮两头点 – 响到一起了</p><p>玉米地里种水稻 – 杂种</p><p>九台压路机  坏一台 – 八个压路</p><p>36除以6 – 除了6还是6</p><p>莎士比亚没有士 – 只剩傻逼呀</p><p>属 etc 的 – 纯抬杠</p><p>屎壳郎赶上拉稀的 – 白跑一趟</p><p>智体美全面发展 – 缺德</p><p>油门和刹车一起踩 – 给车截图</p><p>吃铁丝拉笊篱 – 能编啊</p><h1 id="弱智吧"><a href="#弱智吧" class="headerlink" title="弱智吧"></a>弱智吧</h1><p>你家里住美术馆么, 壁画那么多~</p><p>我抽着烟  看着床上的两个女人  左边不是你  右边也不是你。。。</p><p>白龙马:  是男人就不要戳我脊梁骨~</p><p>我说我喝不了酒, 你到处说我活不了多久~</p><p>我说我在送外卖, 你说我在外面卖~</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202205052127653.png"></p><p>我们为什么要发展农业, 超市里不是有吃的么~</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202205052132418.png"></p><p>你想听小品还是想看江南?</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202205052133705.png" alt="image-20220505213356672"></p><p>我是农民伯伯的最爱~</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202205052148248.png" alt="image-20220505214809202"></p><p>屎壳郎见你都得眼前一亮~</p><p>还在嘛~<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304071855183.png"></p><p>那我为什么看得见~<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304071856151.png"></p><h1 id="我给大家睁个眼睛"><a href="#我给大家睁个眼睛" class="headerlink" title="我给大家睁个眼睛~"></a>我给大家睁个眼睛~</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304122229359.png"></p><h1 id="当代网友骂人系列"><a href="#当代网友骂人系列" class="headerlink" title="当代网友骂人系列"></a>当代网友骂人系列</h1><p>天凉了, 记得多盖点土~</p><p>近亲不能结婚, 为啥你爸能取你妈~</p><h1 id="卑微打工人"><a href="#卑微打工人" class="headerlink" title="卑微打工人"></a>卑微打工人</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202304142209733.png"></p><h1 id="你们这些人就不能给我一个纯洁的童年么"><a href="#你们这些人就不能给我一个纯洁的童年么" class="headerlink" title="你们这些人就不能给我一个纯洁的童年么~"></a>你们这些人就不能给我一个纯洁的童年么~</h1><p>安徒生的棺材板我帮你按住了,你继续~</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202311161153449.png"></p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202205052148738.png" alt="image-20220505214837708"></p><h1 id="对对联"><a href="#对对联" class="headerlink" title="对对联"></a>对对联</h1><p>上海自来水来自海上<br>山西悬空寺空悬西山<br>三块五花肉花五块三</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>youtube-dl 使用aria2c 下载</title>
    <link href="/2022/05/05/youtube-dl-%E4%BD%BF%E7%94%A8aria2c-%E4%B8%8B%E8%BD%BD/"/>
    <url>/2022/05/05/youtube-dl-%E4%BD%BF%E7%94%A8aria2c-%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>最近入了个树莓派, 搭了 emby </p><p>在看春姐讲的西游, youtube 刷的视频多, 老是找不到记录, 麻烦的不行…</p><p>不如就下载下来慢慢看~</p><p>使用 <code>youtube-dl</code> + <code>aria2c</code> 插件下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">youtube-dl https://www.youtube.com/watch\?v\=YxkTKb12QZQ\&amp;list\=PLHOL1w6t2NFPYUwYl3vr2coMolzb0Ynf4\&amp;index\=4 --external-downloader aria2c --external-downloader-args &quot;-x 16&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta"># </span><span class="language-bash">2024/04/10  使用  yt-dlp</span><br>yt-dlp -ciw --playlist-start 11 https://www.bilibili.com/video/BV1gb411k71F/<br></code></pre></td></tr></table></figure><blockquote><p>代理部分不表, 自行解决~</p></blockquote><p>由于网络不稳定, 就老是下载着就自动断掉了, 然后重新启动, 又重新开始下载…</p><p>就导致我下载了几天都是前几集, 就很寂寞啊~</p><p>这玩意儿 怎么断点续传啊….</p><p><strong>022-05-12 更</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">youtube-dl -w -i  --external-downloader aria2c --external-downloader-args &quot;-x 16&quot; youtube.com<br></code></pre></td></tr></table></figure><p>-w 参数取消覆盖</p><p>-i 忽略错误</p><p>停了之后再启动一次吧…</p><p>暂时没发现啥比较好的方案</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于我搞了个树莓派</title>
    <link href="/2022/04/25/%E5%85%B3%E4%BA%8E%E6%88%91%E6%90%9E%E4%BA%86%E4%B8%AA%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <url>/2022/04/25/%E5%85%B3%E4%BA%8E%E6%88%91%E6%90%9E%E4%BA%86%E4%B8%AA%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    
    <content type="html"><![CDATA[<p>折腾, 就是爱折腾~</p><h1 id="自动连接-wifi"><a href="#自动连接-wifi" class="headerlink" title="自动连接 wifi"></a>自动连接 wifi</h1><p>搞个脚本, 自动检测是否已经连接 wifi, 如果未连接, 则自动重启网络</p><p>保存到 <code> /home</code>, 文件名为 <code>autowifi.py</code> ,即 <code>/home/autowifi.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-keyword">import</span> os, time<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">txt</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;/data/autowifi.log&quot;</span>,<span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.writelines(txt)<br><br>time.sleep(<span class="hljs-number">60</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    s = <span class="hljs-string">f&quot;********* <span class="hljs-subst">&#123;time.time()&#125;</span>wifi is up, do nothing ********\n&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;192&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.popen(<span class="hljs-string">&#x27;ifconfig | grep 192&#x27;</span>).read():<br>        s=(<span class="hljs-string">f&#x27;\n****** <span class="hljs-subst">&#123;time.time()&#125;</span>wifi is down, restart... ******\n&#x27;</span>)<br>        os.system(<span class="hljs-string">&#x27;sudo /etc/init.d/networking restart&#x27;</span>)<br>    log(s)<br>    time.sleep(<span class="hljs-number">5</span>*<span class="hljs-number">60</span>)<br></code></pre></td></tr></table></figure><p>搞个 <code>shell</code> 脚本来启动 <code>/home/autowifi.py</code></p><p><code>touch autowifi.sh</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">!/bin/sh</span><br>python /home/autowifi.py &amp;<br></code></pre></td></tr></table></figure><p>设置开机自动启动</p><p>使用 <code>crontab</code>,  命令行 <code>crontab -e </code></p><p>添加 <code>@reboot /home/autowifi.sh</code> 到最后, 开机即可自动检测并重连</p><h1 id="samba-服务"><a href="#samba-服务" class="headerlink" title="samba 服务"></a>samba 服务</h1><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[pi]<br>path = /data/disk1<br>writeable = yes<br>create mask = 0777<br>directory mask = 0777<br>public = yes<br>browsable = yes<br></code></pre></td></tr></table></figure><h3 id="windows-访问无权限"><a href="#windows-访问无权限" class="headerlink" title="windows 访问无权限"></a>windows 访问无权限</h3><p><code>chmod 777 /data/disk1</code></p><h1 id="ariac2ng"><a href="#ariac2ng" class="headerlink" title="ariac2ng"></a>ariac2ng</h1><h2 id="ariac-rpc-配置"><a href="#ariac-rpc-配置" class="headerlink" title="ariac rpc 配置"></a>ariac rpc 配置</h2><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/image_2.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>final_cut_pro_handbook</title>
    <link href="/2022/03/24/final-cut-handbook/"/>
    <url>/2022/03/24/final-cut-handbook/</url>
    
    <content type="html"><![CDATA[<h1 id="剪辑素材"><a href="#剪辑素材" class="headerlink" title="剪辑素材"></a>剪辑素材</h1><p><code>i+o</code>  设置开头和结尾</p><p><code>e</code> 添加素材到时间线</p><p><code>q</code>  添加素材到右侧    <code>shift+q</code>左侧</p><p><code>w</code>     切割并插入</p><p><code>d</code>    替换右侧时间线    <code>shift+d</code>左侧</p><p><code>b</code>直接切割</p><p><code>opt+&#125;</code>    删除右侧</p><p><code>shift+z</code>时间线自适应</p><p><code>ctrl+d</code>设置时间段长度</p><p><code>, .</code>    移动帧</p><p><code>shift +</code>    移动10帧</p><p><code>cmd+opt</code>    修改吸附帧</p><p><code>opt+w</code>    添加空隙</p><p><code>shift+del</code>    删除不吸附</p><p>&#96;&#96;+del&#96;    只删除视频,不删除吸附</p><p><code>shift + c</code> 裁剪工具</p><h1 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h1><p><code>shift + A</code> 恢复</p><p><code>`</code> 解除吸附</p><p><code>cmd+opt+↑</code>脱离主故事线</p><h1 id="调整音量"><a href="#调整音量" class="headerlink" title="调整音量"></a>调整音量</h1><p><code>cmd + 左键</code> 1 分贝调整音量</p><p><code>ctrl + =</code> 音量加</p><p><code>修改 -&gt; 调整音量 </code> 淡入淡出</p><h1 id="字幕"><a href="#字幕" class="headerlink" title="字幕"></a>字幕</h1><h2 id="隐藏式字幕"><a href="#隐藏式字幕" class="headerlink" title="隐藏式字幕"></a>隐藏式字幕</h2><p><code>编辑 -&gt; 字幕 -&gt; 添加字幕</code> 添加角色 srt</p><h1 id="关键帧"><a href="#关键帧" class="headerlink" title="关键帧"></a>关键帧</h1><p><code>ctrl + v</code> 查看关键帧动画</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202203241843023.png" alt="image-20220324184332894"></p><p><code>opt + 左键</code> 添加, 也可使用快捷键 <code> opt + k</code> 添加关键帧</p><h1 id="遮罩"><a href="#遮罩" class="headerlink" title="遮罩"></a>遮罩</h1><p><code>效果浏览器 -&gt; 遮罩</code></p><p>学废了呀~</p><h1 id="调色"><a href="#调色" class="headerlink" title="调色"></a>调色</h1><p>就瞎鸡儿调吧…  这是真整不明白</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202203251332083.png" alt="image-20220325133218994"></p><h1 id="转场"><a href="#转场" class="headerlink" title="转场"></a>转场</h1><p>在选择工具下查看媒体余量</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202203251509742.png"></p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202203251509248.png" alt="image-20220325150955213"></p><h1 id="调整视频速度"><a href="#调整视频速度" class="headerlink" title="调整视频速度"></a>调整视频速度</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202203251518077.png" alt="image-20220325151852029"></p><h1 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h1><p><code>m</code></p><h1 id="精确编辑"><a href="#精确编辑" class="headerlink" title="精确编辑"></a>精确编辑</h1><p>在主故事线中 <code>ctrl + e </code></p><h1 id="自定义追踪"><a href="#自定义追踪" class="headerlink" title="自定义追踪"></a>自定义追踪</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202203252255343.png" alt="image-20220325225501269"></p>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tmux_handbook</title>
    <link href="/2022/03/12/tmux-handbook/"/>
    <url>/2022/03/12/tmux-handbook/</url>
    
    <content type="html"><![CDATA[<h1 id="在-Tmux-中，按下-Tmux-前缀-ctrl-b，然后："><a href="#在-Tmux-中，按下-Tmux-前缀-ctrl-b，然后：" class="headerlink" title="在 Tmux 中，按下 Tmux 前缀 ctrl+b，然后："></a>在 Tmux 中，按下 Tmux 前缀 <code>ctrl+b</code>，然后：</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:new&lt;</span>回车&gt;  启动新会话<br>s           列出所有会话<br><span class="hljs-variable">$ </span>          重命名当前会话<br></code></pre></td></tr></table></figure><h2 id="窗口-标签页"><a href="#窗口-标签页" class="headerlink" title="窗口 (标签页)"></a>窗口 (标签页)</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c">c  创建新窗口<br>w  列出所有窗口<br>n  后一个窗口<br>p  前一个窗口<br>f  查找窗口<br>,  重命名当前窗口<br><span class="hljs-meta">&amp;  关闭当前窗口</span><br></code></pre></td></tr></table></figure><h2 id="调整窗口排序"><a href="#调整窗口排序" class="headerlink" title="调整窗口排序"></a>调整窗口排序</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">swap-window -s 3 -t 1  交换 3 号和 1 号窗口<br>swap-window -t 1       交换当前和 1 号窗口<span class="hljs-built_in"></span><br><span class="hljs-built_in">move-window </span>-t 1       移动当前窗口到 1 号<br></code></pre></td></tr></table></figure><h2 id="窗格（分割窗口）"><a href="#窗格（分割窗口）" class="headerlink" title="窗格（分割窗口）"></a>窗格（分割窗口）</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c">%  垂直分割<br><span class="hljs-string">&quot;  水平分割</span><br>o  交换窗格<br>x  关闭窗格<br>⍽  左边这个符号代表空格键 - 切换布局<br>q 显示每个窗格是第几个，当数字出现的时候按数字几就选中第几个窗格<br>&#123; 与上一个窗格交换位置<br>&#125; 与下一个窗格交换位置<br>z 切换窗格最大化/最小化<br></code></pre></td></tr></table></figure><h1 id="会话-1"><a href="#会话-1" class="headerlink" title="会话"></a>会话</h1><p>启动新会话：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">tmux [<span class="hljs-keyword">new</span> <span class="hljs-type"></span>-s 会话名 -n 窗口名]<br></code></pre></td></tr></table></figure><p>恢复会话：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">tmux <span class="hljs-keyword">at</span> [-t 会话名]<br></code></pre></td></tr></table></figure><p>列出所有会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>关闭会话：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">tmux <span class="hljs-keyword">kill</span>-session -t 会话名<br></code></pre></td></tr></table></figure><p>关闭所有会话：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">tmux <span class="hljs-keyword">ls</span> | grep : | cut -<span class="hljs-keyword">d</span>. -f1 | awk &#x27;&#123;<span class="hljs-keyword">print</span> <span class="hljs-built_in">substr</span>(<span class="hljs-variable">$1</span>, 0, <span class="hljs-built_in">length</span>(<span class="hljs-variable">$1</span>)-1)&#125;&#x27; | xargs kill<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>梦游天姥吟留别</title>
    <link href="/2022/03/12/%E6%A2%A6%E6%B8%B8%E5%A4%A9%E5%A7%A5%E5%90%9F%E7%95%99%E5%88%AB/"/>
    <url>/2022/03/12/%E6%A2%A6%E6%B8%B8%E5%A4%A9%E5%A7%A5%E5%90%9F%E7%95%99%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="梦游天姥吟留别"><a href="#梦游天姥吟留别" class="headerlink" title="梦游天姥吟留别"></a>梦游天姥吟留别</h1><p><a href="https://so.gushiwen.cn/authorv_b90660e3e492.aspx">李白</a> <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a></p><p>海客谈瀛洲，烟涛微茫信难求；<br>越人语天姥，云霞明灭或可睹。<br>天姥连天向天横，势拔五岳掩赤城。<br>天台四万八千丈，对此欲倒东南倾。(四万 一作：一万)</p><p>我欲因之梦吴越，一夜飞度镜湖月。<br>湖月照我影，送我至剡溪。<br>谢公宿处今尚在，渌水荡漾清猿啼。<br>脚著谢公屐，身登青云梯。<br>半壁见海日，空中闻天鸡。<br>千岩万转路不定，迷花倚石忽已暝。<br>熊咆龙吟殷岩泉，栗深林兮惊层巅。<br>云青青兮欲雨，水澹澹兮生烟。<br>列缺霹雳，丘峦崩摧。<br>洞天石扉，訇然中开。<br>青冥浩荡不见底，日月照耀金银台。<br>霓为衣兮风为马，云之君兮纷纷而来下。<br>虎鼓瑟兮鸾回车，仙之人兮列如麻。<br>忽魂悸以魄动，恍惊起而长嗟。<br>惟觉时之枕席，失向来之烟霞。</p><p>世间行乐亦如此，古来万事东流水。<br>别君去兮何时还？且放白鹿青崖间，须行即骑访名山。<br>安能摧眉折腰事权贵，使我不得开心颜！</p>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSS之路</title>
    <link href="/2022/03/09/RSS%E4%B9%8B%E8%B7%AF/"/>
    <url>/2022/03/09/RSS%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>终于走上了自建 RSS 之路</p><h1 id="为什么-RSS"><a href="#为什么-RSS" class="headerlink" title="为什么 RSS"></a>为什么 RSS</h1><p>拒绝算法, 还我时间线.  b 站老用户的我, 有一天看视频发现它跟抖音越来越一致了. 我看了眼美女视频, 然后整个下午我看到的视频全都是美女. 当然我是爱看美女的. 但是这个事情让我意识到算法对我的绑架.</p><p>咨询聚合. 这是我回到 RSS 的另一个需求.  常刷 b 站, 没事儿煎蛋, 偶尔也去微博看看几个关注的人. 还有 twitter 和 YouTube.  每天光看看咨询就要打开辣么多 APP, 打开也就算了, 还辣么多广告和推广. </p><h1 id="为什么自建"><a href="#为什么自建" class="headerlink" title="为什么自建"></a>为什么自建</h1><p>自建主要有两个服务, 一个是订阅源 RSSHub, 另一个是 rss 服务.</p><p>RSSHub 官方服务器基本已被各大网站反爬攻略了.  自建个服务给大家用, 也缓解一下官方的压力. <strong>开源让世界更美好</strong></p><p>rss 服务选的是 freshRSS. 以前搞过 TTS, 心累了, 那个文档, 醉了, 还一堆 bug. </p><h1 id="自建过程"><a href="#自建过程" class="headerlink" title="自建过程"></a>自建过程</h1><p>省略购买服务器等过程…</p><h2 id="RssHub-部署简直不要太简单"><a href="#RssHub-部署简直不要太简单" class="headerlink" title="RssHub 部署简直不要太简单"></a>RssHub 部署简直不要太简单</h2><p>直接 <a href="https://docs.rsshub.app/install/#docker-compose-bu-shu">https://docs.rsshub.app/install/#docker-compose-bu-shu</a> docker compose 一键部署</p><p>然后 就有了三个应用 <img src="https://img-1257201803.cos.ap-nanjing.myqcloud.com//20220309124602.png" alt="image-20220309124602793"></p><p>再在前面加个反向代理, 整个 https. </p><p><strong>caddy</strong> 起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">yours.domain.com &#123;<br>  encode gzip<br>  reverse_proxy * http://127.0.0.1:1200<br>&#125;<br></code></pre></td></tr></table></figure><p>打开浏览器</p><p><img src="https://img-1257201803.cos.ap-nanjing.myqcloud.com//20220309124926.png" alt="image-20220309124926970"></p><p>完美~</p><p>正开心的我看到 <img src="https://img-1257201803.cos.ap-nanjing.myqcloud.com//20220309125101.png" alt="image-20220309125101698">, 这是啥东西???  下面的 google app engine 我以前用过  这玩意儿没见过啊. 点开试试…</p><p>根据他的指示 点完了之后 <img src="https://img-1257201803.cos.ap-nanjing.myqcloud.com//20220309125156.png" alt="image-20220309125156520">又一个 rsshub  这就好了???  </p><p>试了一下, 暂且不表, 但是好用啊. 白嫖的香啊. 推荐大家 这个呀~</p><p>回到自己的服务器:<code>docker stop root_rsshub_1  root_browserless_1 root_redis_1 </code></p><p>又省了 100m 内存 , 真香~</p><p>哪天嫖不到了 再换到自己的服务器上面, 迁移一下,改个域名的事儿~</p><p>下一步</p><h2 id="FreshRss-搞起"><a href="#FreshRss-搞起" class="headerlink" title="FreshRss 搞起"></a>FreshRss 搞起</h2><p>看了半天官方文档, 最后还是 docker 走起…</p><p>主要是嫖到了 RssHub 的服务起,  docker 的内存给得起…省事儿</p><p>打开项目,找到文档 <a href="https://github.com/FreshRSS/FreshRSS/tree/edge/Docker">https://github.com/FreshRSS/FreshRSS/tree/edge/Docker</a></p><p>赫然发现, 这是啥玩意儿???<img src="https://img-1257201803.cos.ap-nanjing.myqcloud.com//20220309125812.png" alt="image-20220309125812055"> Traefik 是啥, 为啥推荐用这玩意儿做反向代理…好麻烦 还要折腾 算了 还是 caddy 大法好 我都已经起好了 改个 caddyfile 的事情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume create freshrss-data<br>docker volume create freshrss-extensions<br><span class="hljs-meta"></span><br><span class="hljs-meta"># </span><span class="language-bash">Remember to replace freshrss.example.net by your server address <span class="hljs-keyword">in</span> the <span class="hljs-built_in">command</span> below:</span><br>docker run -d --restart unless-stopped --log-opt max-size=10m \<br>  -v freshrss-data:/var/www/FreshRSS/data \<br>  -v freshrss-extensions:/var/www/FreshRSS/extensions \<br>  -e &#x27;CRON_MIN=4,34&#x27; \<br>  -e TZ=Europe/Paris \<br>  --net freshrss-network \<br>  --label traefik.port=80 \<br>  --label traefik.frontend.rule=&#x27;Host:freshrss.example.net&#x27; \<br>  --label traefik.frontend.headers.forceSTSHeader=true \<br>  --label traefik.frontend.headers.STSSeconds=31536000 \<br>  --name freshrss freshrss/freshrss<br><span class="hljs-meta"></span><br><span class="hljs-meta"># </span><span class="language-bash">You may remove the --label traefik.* lines <span class="hljs-keyword">if</span> you <span class="hljs-keyword">do</span> not use Træfik.</span><br></code></pre></td></tr></table></figure><p>咱不用 Traefik, 同时加个端口映射, 那启动命令就是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume create freshrss-data<br>docker volume create freshrss-extensions<br><span class="hljs-meta"></span><br><span class="hljs-meta"># </span><span class="language-bash">Remember to replace freshrss.example.net by your server address <span class="hljs-keyword">in</span> the <span class="hljs-built_in">command</span> below:</span><br>docker run -d --restart unless-stopped --log-opt max-size=10m \<br>  -v freshrss-data:/var/www/FreshRSS/data \<br>  -v freshrss-extensions:/var/www/FreshRSS/extensions \<br>  -e &#x27;CRON_MIN=4,34&#x27; \<br>  -e TZ=Europe/Paris \<br>  --net freshrss-network \<br>  -p 10110:80<br>  --name freshrss freshrss/freshrss<br></code></pre></td></tr></table></figure><p>这时 <a href="http://127.0.0.1:10110/">http://127.0.0.1:10110</a> 就能访问到了</p><p><img src="https://img-1257201803.cos.ap-nanjing.myqcloud.com//20220309130524.png" alt="image-20220309130524383"></p><p>再挂个反向代理, 给个域名</p><p><code>vim /etc/caddy/caddyfile</code></p><p>加上一条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">your.domain.com &#123;<br>  encode gzip<br>  reverse_proxy * http://127.0.0.1:10110<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="更完美一点-FEEDME"><a href="#更完美一点-FEEDME" class="headerlink" title="更完美一点, FEEDME"></a>更完美一点, FEEDME</h1><p>平板上使用 FEEDME(<a href="https://github.com/seazon/FeedMe">https://github.com/seazon/FeedMe</a>), 国人大大开发的移动端软件</p><p>记得要在这里<img src="https://img-1257201803.cos.ap-nanjing.myqcloud.com//20220309131014.png" alt="image-20220309131014151">打开<img src="https://img-1257201803.cos.ap-nanjing.myqcloud.com//20220309131032.png" alt="image-20220309131032776"> 才能获得移动端登录方式~</p><p>舒服了~</p>]]></content>
    
    
    
    <tags>
      
      <tag>RSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人类终将一败涂地~</title>
    <link href="/2021/05/25/%E4%BA%BA%E7%B1%BB%E7%BB%88%E5%B0%86%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0/"/>
    <url>/2021/05/25/%E4%BA%BA%E7%B1%BB%E7%BB%88%E5%B0%86%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0/</url>
    
    <content type="html"><![CDATA[<p>人类终将一败涂地…</p><h1 id="2020-年-2-月-6-日-李文亮医生-逝世"><a href="#2020-年-2-月-6-日-李文亮医生-逝世" class="headerlink" title="2020 年 2 月 6 日 李文亮医生 逝世"></a>2020 年 2 月 6 日 李文亮医生 逝世</h1><p>2019 年 12 月下旬，來自疫情暴發地武漢的眼科醫生李文亮在社群媒體上警告朋友，他所在的醫院遇到一種神秘的新病毒，結果被當地警方以散布謠言為由訓誡</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202206211406714.png" alt="image-20220621140600267"></p><h1 id="2021年02月03日-人人字幕组下线"><a href="#2021年02月03日-人人字幕组下线" class="headerlink" title="2021年02月03日 人人字幕组下线"></a>2021年02月03日 人人字幕组下线</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210204001650.png"></p><h1 id="2021年05月22日-袁隆平逝世-大德鲁伊走好"><a href="#2021年05月22日-袁隆平逝世-大德鲁伊走好" class="headerlink" title="2021年05月22日  袁隆平逝世 大德鲁伊走好~"></a>2021年05月22日  袁隆平逝世 大德鲁伊走好~</h1><blockquote><p>“杂交水稻之父”、中国工程院院士、“共和国勋章” 获得者袁隆平，5 月 22 日 13 点 07 分在湖南长沙逝世，享年 91 岁。袁老，走好！ ​​​​</p></blockquote><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202204261250629.png"></p><h1 id="2022年02月24日-俄罗斯与乌克兰发生战争"><a href="#2022年02月24日-俄罗斯与乌克兰发生战争" class="headerlink" title="2022年02月24日 俄罗斯与乌克兰发生战争"></a>2022年02月24日 俄罗斯与乌克兰发生战争</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202204261252809.png"></p><h1 id="2022年07月12日-河南小银行储户维权"><a href="#2022年07月12日-河南小银行储户维权" class="headerlink" title="2022年07月12日 河南小银行储户维权"></a>2022年07月12日 河南小银行储户维权</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202207121356604.jpg" alt="郑州的抗议者。身着便衣的保安袭击他们的视频和照片在网上流传，激起了人们对当局野蛮回应的愤怒。"></p><h1 id="2022年11月24日-乌鲁木齐特大火灾"><a href="#2022年11月24日-乌鲁木齐特大火灾" class="headerlink" title="2022年11月24日 乌鲁木齐特大火灾"></a>2022年11月24日 乌鲁木齐特大火灾</h1><p>新疆乌鲁木齐一栋高层住宅楼周四（11 月 24 日）晚发生火灾。 中国官媒报道称，火灾造成 10 人死亡，9 人受伤。</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/629879902074587613.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>沈阳人为什么爱烤鸡架</title>
    <link href="/2021/01/07/%E6%B2%88%E9%98%B3%E4%BA%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E5%96%9C%E6%AC%A2%E5%90%83%E7%83%A4%E9%B8%A1%E6%9E%B6/"/>
    <url>/2021/01/07/%E6%B2%88%E9%98%B3%E4%BA%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E5%96%9C%E6%AC%A2%E5%90%83%E7%83%A4%E9%B8%A1%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>Clipped from: <a href="https://daily.zhihu.com/story/9726632">https://daily.zhihu.com/story/9726632</a></p></blockquote><h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107135858.png"></p><p>早年间，沈阳的产业工人娱乐方式较少，喝酒聊天是大多数人消磨时光的首选。既然是以聊天为主，下酒的配菜自然不宜饱腹胀肚。也因此，肉少、油大、有滋味且价格实惠的鸡架，深得沈阳人的心。</p><p>沈阳，鸡架之城。 几乎每座城市，都有自己的隐秘美食。这道美食，或许不甚精致，又或者不被外人所知，但却是当地人心中，最无法取代的顶级快乐。</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140025.png"></p><p>烤鸡架。 图 &#x2F; 纪录片《宵夜江湖》<br>总有人不理解，为何沈阳人会对肉少骨多的鸡架 “爱不释口”，肥美的鸡腿、嫩滑的鸡翅它不香吗？这样的问题，沈阳人早已充耳不闻，毕竟手里泛着红光的鸡架，脆骨相连、紧致入味，香与不香的问题，已无需作答。</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>没有了鸡架 ，沈阳人将不再快乐 很难说清，鸡架是如何与沈阳结缘的。但第一个吃鸡架的人，必定是热爱生活的人。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140057.png"><br>沈阳烧烤摊的宠儿，是鸡架。 图 &#x2F; 纪录片《宵夜江湖》<br>一如北京烤鸭的精巧贵气、武汉小龙虾的江湖气息，沈阳人的鸡架，充斥着满满的重工业风情。 作为一座工业城市，产业工人占据了沈阳人口的大多数。早年间，人们的娱乐方式较少，喝酒聊天是大多数人消磨时光的首选。所以一到下班的时间，工厂周围的餐馆就坐满了人，桌子都摆到了马路边上。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140149.png"><br>实惠又味美，谁能不爱？ 摄影 &#x2F;daliantimor，图 &#x2F; 汇图网<br>既然是以聊天为主，下酒的配菜自然不宜饱腹胀肚。也因此，肉少、油大、有滋味且价格实惠的鸡架，深得沈阳人的心。久而久之，“啃鸡架，喝老雪” 成为了沈阳人的一种生活方式。 大多时候， 在沈阳吃鸡架，吃的就是一个热闹。一盘鸡架，几瓶啤酒，三五好友，一边和朋友唠嗑吹牛，一边用双手抓着鸡架，将其撕成片片小份。紧致的嫩肉，粘连着鸡架骨，略蘸些辣椒酱，入口的鲜嫩自是勾人无数。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140212.png"><br>新烤出来的鸡架。 图 &#x2F; 纪录片《人生一串 2》<br>啃鸡架的乐趣，自然还在于鸡骨头本身。烹饪后的鸡骨，酥酥烂烂，被各种香料调教得有滋有味。嚼着骨头、大口喝酒，别有一番畅快淋漓的江湖意气。 除了啤酒，抻面也是沈阳人啃鸡架的标配。类似于兰州的牛肉面，沈阳的抻面也有粗细之分，其中点单率最高的，是 “二细” 和 “韭叶”。抻面的高汤，通常由整鸡熬制，经过长时间的熬煮，鸡肉与汤底合抱相融，剩余的鸡骨捞出，成为抻面的上桌必备。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140239.png"><br>抻面，鸡架的绝配。 图 &#x2F; 纪录片《宵夜江湖》<br>抻面盛碗后，撒入的榨菜和香菜，是味道的点睛。每个桌上都摆放着几个小罐，辣椒油、陈醋等调料丰俭由人。手工抻的面，劲道质朴，细尝还有丝浓郁的麦香。旁侧的鸡架，和抻面一般，有种 “清水出芙蓉” 的既视感。 略带汤汁的鸡架，乖巧地躺在铁盘里，周身泛出极为诱人的光泽。双手开动，将其撕成小块，直接吮吸其原汁原味的鲜美，亦或者拌上些榨菜、香菜和辣椒，味道别提有多美妙。</p><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>沈阳鸡架的一万种吃法<br>在沈阳，有多少只鸡，就有多少种鸡架吃法。几乎每个沈阳人，都有自己最喜欢的一种鸡架吃法。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140356.png"><br>煮鸡架。 图 &#x2F; 纪录片《宵夜江湖》<br>烤鸡架 | 沈阳烧烤摊的灭霸<br>在 “一天三顿小烧烤” 的东北，最受欢迎的美食做法，莫过于 “烧烤” 这种古老的烹饪方式。 在沈阳，最早出现的鸡架吃法，便是烧烤。烤鸡架，一般分为生烤和熟烤两种方式。所谓熟烤，需要事先将鸡架烫至半熟，之后再放上烤架进行烤制。而生烤，则是将腌制过的生鸡架，直接放在炭火上烤熟。相较于熟烤，生烤鸡架所耗费的时间较长，但胜在香、酥、焦、糊，在味道上更胜一筹。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140418.png"><br>滋滋冒油的烤鸡架。 图 &#x2F; 纪录片《人生一串 2》<br>传统的烤鸡架，多使用古老的铁条篦子，一次能烤 8 个。经由炭火的烧烤，骨髓里的油脂被催出，附着在鸡架的表面，为其涂上一层锃亮的高光。最妙的是，在烤制过程中，于鸡架的表层，撒上一把白糖，经过炭火的催化，微微融化的白糖像是一层蜜汁包裹在鸡架上。 香脆的鸡架，加上焦糖的气息，看似混搭跨界，却有着令人上瘾的魔力。</p><h1 id="炸鸡架-“万物皆可天妇罗”"><a href="#炸鸡架-“万物皆可天妇罗”" class="headerlink" title="炸鸡架 | “万物皆可天妇罗”"></a>炸鸡架 | “万物皆可天妇罗”</h1><p>没有人可以拒绝油炸，没有食物不能被油炸。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140447.png"><br>炸鸡架。 图 &#x2F; 网络<br>相较于烤鸡架的普适性，偏甜的炸鸡架更受年轻人的追捧。经过多重调料的腌制，自带香味的生鸡架，直接在油锅中 “历劫重生”。随着热油的沸腾，鸡架的调料香，逐渐将周围的空气占领。 炸好的鸡架，香香脆脆的，微微甜又微微辣。附在鸡架上的嫩肉，被炸至金褐色，用指尖剔下，翻出的肉粉色，极具引诱。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140513.png"><br>秘制五香炸鸡架。摄影 &#x2F; 美食摄影师微微， 图 &#x2F; 汇图网<br>但更诱人的，还得是骨头，从整幅鸡架上扯下一块骨头，连皮带骨一起送入口中，骨头的表层薄膜，早已被炸成酥脆的口感，各种调料的味道凝于其中。以舌尖裹着牙齿，将这层焦壳巧妙啃噬，内里的骨头早已被炸至酥软，略一用力便能将其嚼断，甚至还能溢出些骨髓的汤汁。 熏拌鸡架 | 烟熏火燎的终极乐趣<br>熏鸡架的灵感，取自辽宁特色的熏酱菜。烟熏火燎的烟火气，是熏鸡架专属的魅力。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140538.png"><br>熏鸡架。 图 &#x2F; 网络<br>相较于鸡架的其他做法，熏鸡架的烹饪步骤要复杂一些。酱卤之后，鸡架再于旺火中熏制。经过猛火的炙烤，鸡架内部的酱料，释放出浓香，而后与烟火作用，形成一股独特的烟香。不同于烤鸡架的现烤现吃，常见于熟食店的熏鸡架多为冷吃。 鸡架上桌后，附带的手套，营造了啃鸡架的仪式感。大多时候，啃鸡架的终极乐趣，就在于拆骨。带上手套后，将整只熏鸡架，拆成任何形状，再撒上一层榨菜、香菜和辣椒，或清爽或辛香的滋味，与熏鸡架紧致略干的口感互为补充。而后再慢悠悠地剔干净骨缝里的碎肉，极富成就感。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140624.png"><br>熏鸡架之前，在锅底加一勺糖，是沈阳的古法糖熏工艺。加入白糖后，鸡架的颜色更加红润，鸡肉的味道也会带有丝丝甜意。 图 &#x2F; 网络<br>烀鸡架 | 清水出芙蓉<br>当然，并非所有的鸡架都是重口味。在沈阳，鸡架也不乏鲜嫩的小清新吃法，比如烀鸡架。 抻面馆里的煮鸡架，就属于烀鸡架的范畴。介于蒸与煮之间的烀鸡架，在高汤中煨得软嫩烂糊，既吸收了高汤的精华，又保留了鸡架的原味。即使不放任何调料，也丝毫感觉不到油腻。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140645.png"><br>烀鸡架。 图 &#x2F; 网络<br>啃烀鸡架时，几乎每次吃到最后，都会不小心把一次性手套弄破，即便如此，也不肯放弃。徒手啃食鸡架，那种痛快绝无仅有。烀鸡架的汤汁，顺着手指一路滑行，让人恨不得把手指都嗦喽嗦喽。<br>辣炒鸡架 | 后起之秀<br>在沈阳，美食从无定式。鸡架的做法，也从不拘泥于几种传统做法。辣炒鸡架，是近几年出现的吃法，甫一诞生，便收割了一众沈阳粉丝<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140707.png"><br>辣炒鸡架。摄影 &#x2F; 美食摄影师微微， 图 &#x2F; 汇图网<br>经过猛火爆炒，辣炒鸡架的味道更加浓郁，还有一丝甜辣的孜然味。每块鸡架，都十分入味，几乎都能带着骨头嚼食。入口后，咀嚼的快感，加上挑剔的乐趣，有种不可言说的幸福感。如果是辣炒鸡块，倒失去了这种微妙的感觉。 将 “食之无味，弃之可惜” 的鸡肋，烹调成舌尖上的狂欢，可见沈阳人的奇妙想象力。但更重要的，还是沈阳人见招拆招的创造能力。<br><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210107140722.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql 是怎样运行的</title>
    <link href="/2020/12/27/Mysql%20%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84/"/>
    <url>/2020/12/27/Mysql%20%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><h2 id="服务器处理客户端请求"><a href="#服务器处理客户端请求" class="headerlink" title="服务器处理客户端请求"></a>服务器处理客户端请求</h2><p>大致需要经过三个部分，分别是<code>连接管理</code>、<code>解析与优化</code>、<code>存储引擎</code>。</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/20210221105026.png" alt="image-20210221105026446"></p><p>客户端可以采用<code>TCP/IP</code>、<code>命名管道或共享内存</code>、<code>Unix域套接字</code>等方式与服务器建立通信</p><p>每当有一个客户端进程连接到服务器进程时，服务器进程都会创建一个线程来专门处理与这个客户端的交互，当该客户端退出时会与服务器断开连接，服务器并不会立即把与该客户端交互的线程销毁掉，而是把它缓存起来，在另一个新的客户端再进行连接时，把这个缓存的线程分配给该新客户端 。</p><p>当连接建立后，与该客户端关联的服务器线程会一直等待客户端发送过来的请求</p><h3 id="解析与优化"><a href="#解析与优化" class="headerlink" title="解析与优化"></a>解析与优化</h3><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><p><span style="color:red">如果两个查询请求在任何字符上的不同（例如：空格、注释、大小写），都会导致缓存不会命中</span>。另外，<span style="color:red">如果查询请求中包含某些系统函数、用户自定义变量和函数、一些系统表，如 mysql 、information_schema、 performance_schema 数据库中的表，那这个请求就不会被缓存</span></p><p><span style="color:red">MySQL的缓存系统会监测涉及到的每张表，只要该表的结构或者数据被修改，如对该表使用了<code>INSERT</code>、 <code>UPDATE</code>、<code>DELETE</code>、<code>TRUNCATE TABLE</code>、<code>ALTER TABLE</code>、<code>DROP TABLE</code>或 <code>DROP DATABASE</code>语句，那使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除</span>！</p><p>虽然查询缓存有时可以提升系统性能，但也不得不因维护这块缓存而造成一些开销，比如每次都要去查询缓存中检索，查询请求处理完需要更新查询缓存，维护该查询缓存对应的内存区域。从MySQL 5.7.20开始，不推荐使用查询缓存，并在MySQL 8.0中删除。</p><h1 id="字符集的比较规则"><a href="#字符集的比较规则" class="headerlink" title="字符集的比较规则"></a>字符集的比较规则</h1><p>将一个字符映射成一个二进制数据的过程叫编码, 将一个二进制数据映射到一个字符的过程叫解码</p><h1 id="InnoDB-记录存储结构"><a href="#InnoDB-记录存储结构" class="headerlink" title="InnoDB 记录存储结构"></a>InnoDB 记录存储结构</h1><p>InnoDB 是一个将表中的数据存储到磁盘上的存储引擎.</p><p>InnoDB 将数据分成若干个页, 以页作为磁盘和内存间交互的基本单位. </p><p>InnoDB 中页的大小一般为 16KB. 一般情况下, 一次最少从磁盘中读写 16KB 的数据.</p><h2 id="InnoDB-行格式"><a href="#InnoDB-行格式" class="headerlink" title="InnoDB 行格式"></a>InnoDB 行格式</h2><p><code>COMPACT, REDUNDANT, DYNAMIC, COMPRESSED</code></p><h3 id="指定行格式的语法"><a href="#指定行格式的语法" class="headerlink" title="指定行格式的语法"></a>指定行格式的语法</h3><p><code>CREATE TABEL TABEL_NAME () ROW_FORMAT=COMPAC</code></p><h3 id="COMPACT-行格式"><a href="#COMPACT-行格式" class="headerlink" title="COMPACT 行格式"></a>COMPACT 行格式</h3><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202307301626771.png" alt="image-20230730162631737"></p><p>在<code>COMPACT</code>行格式中, 所有变长字段的真实数据占用的字节数都存放在记录的开头位置, 从而形成一个变长字段长度列表,各变长字段的真是数据占用的字节按照列的顺序_逆序_存放</p><p><img src="https://raw.githubusercontent.com/Afret1/image/master/img/202307301705219.png" alt="image-20230730165941469"></p><h2 id="InnoDB-主键生成策略"><a href="#InnoDB-主键生成策略" class="headerlink" title="InnoDB 主键生成策略"></a>InnoDB 主键生成策略</h2><p>如果user没有定义主键, 则选取一个不允许存储 <code>NULL</code>的<code>UNIQUE</code>键作为主键. 如果表中不存在不为<code>NULL</code>的<code>UNIQUE</code>键, 则 <code>InnoDB</code>会为表添加一个名为<code>row_id</code>的隐藏列作为主键</p><h2 id="数据页格式"><a href="#数据页格式" class="headerlink" title="数据页格式"></a>数据页格式</h2>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键zsh</title>
    <link href="/2020/08/14/%E4%B8%80%E9%94%AEzsh/"/>
    <url>/2020/08/14/%E4%B8%80%E9%94%AEzsh/</url>
    
    <content type="html"><![CDATA[<p>一键安装 zsh 并配置 oh-my-zsh, 下载插件</p><span id="more"></span><h1 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://raw.githubusercontent.com/afret0/wheel/refs/heads/main/onekey-omzsh/onekey-omzsh.sh &amp;&amp; chmod +x onekey-omzsh.sh &amp;&amp; ./onekey-omzsh.sh<br></code></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p><a href="https://raw.githubusercontent.com/afret0/wheel/refs/heads/main/onekey-omzsh/onekey-omzsh.sh">脚本地址</a></p><p>shell 脚本自动安装 相关依赖和插件.</p><p>oh-my-zsh 配置使用我自己的 <a href="https://raw.githubusercontent.com/afret0/wheel/refs/heads/main/onekey-omzsh/.zshrc">.zshrc</a> 进行替换.</p><p>默认主题为 <code>avit</code>, 酷炫的主题都要安装字体, 试过好多次, 可能命里欠烤吧, 就没装成功过一次. 所以选了个不需要字体, 兼容所有 <code>terminal</code> 的主题.</p><p>插件:</p><pre><code class="hljs">- zsh-autosuggestions- zsh-syntax-highlighting- command-not-found</code></pre><h1 id="feattrue"><a href="#feattrue" class="headerlink" title="feattrue"></a>feattrue</h1><ul><li>fuck 插件</li><li>gotop</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v2ray 搭建记录</title>
    <link href="/2020/08/07/v2ray-%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/08/07/v2ray-%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>证书过期了,就顺手升级一下 caddy2.</p><p>caddy 升级后直接使用官方 image, 增加了个小脚本自动拉取配置,真香~</p><span id="more"></span><p>感谢秋大 <a href="https://teddysun.com/">blog</a> 和 毕世平 <a href="https://shiping.date/">blog</a></p><blockquote><p>docker 安装以及基本操作可以参考上面两位大神</p><p>and 同时默认你搞得定 vps 以及域名等基本操作, 毕竟一搜一大把的教程</p></blockquote><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="域名解析到-ip"><a href="#域名解析到-ip" class="headerlink" title="域名解析到 ip"></a>域名解析到 ip</h2><h2 id="写配置文件"><a href="#写配置文件" class="headerlink" title="写配置文件"></a>写配置文件</h2><ol><li><p>创建路径 <code>mkdir /etc/v2ray</code>,<code>mkdir /etc/caddy</code> 用以存放配置文件</p></li><li><p>写入 v2ray 配置文件,</p><p><code>vim /etc/v2ray/config.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;vmess&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;clients&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>              <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;uuid&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;alterId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">64</span> <br>                # 自 <span class="hljs-number">2022</span> 年 <span class="hljs-number">1</span> 月 <span class="hljs-number">1</span> 日起，服务器端将默认禁用对于 MD5 认证信息 的兼容。任何使用 MD5 认证信息的客户端将无法连接到禁用 VMess MD5 认证信息的服务器端。<br>                # 我们强烈建议您重新安装，并设置alterid为<span class="hljs-number">0</span>（默认值目前已经修改为<span class="hljs-number">0</span>），不再使用 VMess MD5 认证机制 <br><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ws&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/ray&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>写入 Caddyfile</p><p>   <code>vim /etc/caddy/Caddyfile</code></p>   <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">domain.me &#123;<br>  encode gzip<br>  reverse_proxy / https://baidu.com<br>  reverse_proxy /ray 127.0.0.1:10000 &#123;<br>    header_up -Origin<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   修改 <code>domain.me</code>为你自己的域名</p><blockquote><p>caddy2 和 caddy1  不兼容</p></blockquote></li></ol><h2 id="run-就完了"><a href="#run-就完了" class="headerlink" title="run 就完了"></a>run 就完了</h2><p> <code>docker run -d --name caddy --restart always --net host -v /etc/caddy:/etc/caddy caddy</code></p><p><code>docker run -d --name v2ray --restart always --net host -v /etc/v2ray:/etc/v2ray teddysun/v2ray</code>      </p><h1 id="client"><a href="#client" class="headerlink" title="client"></a>client</h1><p>客户端相关配置</p><p>修改 <code>your.domain.com</code> 域名即可</p><p>具体使用方法可参考相关软件文档</p><h2 id="clashx"><a href="#clashx" class="headerlink" title="clashx"></a>clashx</h2><p>2022-03-11 更新</p><p>Clashx 1.90.0 版本修改了 vmess 下的 ws-headers 和 ws-path 选项, 请更新完配置文件 <a href="https://github.com/Dreamacro/clash/wiki/configuration">Github wiki</a> 后再更新 ClashX</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;vmess&quot;</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">vmess</span><br>  <span class="hljs-attr">server:</span> <span class="hljs-string">server</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>  <span class="hljs-attr">uuid:</span> <span class="hljs-string">uuid</span><br>  <span class="hljs-attr">alterId:</span> <span class="hljs-number">32</span><br>  <span class="hljs-attr">cipher:</span> <span class="hljs-string">auto</span><br>   <span class="hljs-attr">udp:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-attr">tls:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-attr">skip-cert-verify:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-attr">servername:</span> <span class="hljs-string">example.com</span> <span class="hljs-comment"># priority over wss host</span><br>   <span class="hljs-attr">network:</span> <span class="hljs-string">ws</span><br>   <span class="hljs-attr">ws-opts:</span><br>     <span class="hljs-attr">path:</span> <span class="hljs-string">/path</span><br>     <span class="hljs-attr">headers:</span><br>       <span class="hljs-attr">Host:</span> <span class="hljs-string">v2ray.com</span><br>  <span class="hljs-comment">#   max-early-data: 2048</span><br>  <span class="hljs-comment">#   early-data-header-name: Sec-WebSocket-Protocol</span><br></code></pre></td></tr></table></figure><h2 id="v2rayU"><a href="#v2rayU" class="headerlink" title="v2rayU"></a>v2rayU</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;loglevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;access&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;socks&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;udp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;noauth&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1086&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">360</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1087&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;mux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;concurrency&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vmess&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/ray&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;headers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bwg.afreto.top&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tlsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;allowInsecure&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;security&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tls&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ws&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;proxy&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;vnext&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bwg.afreto.top&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;users&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>              <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;888d163a-80d7-4495-b3d1-fcf61fc6b6ce&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;alterId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;security&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">443</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;domainStrategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AsIs&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;transport&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="还是觉得好麻烦啊-一键搞定"><a href="#还是觉得好麻烦啊-一键搞定" class="headerlink" title="还是觉得好麻烦啊(一键搞定)"></a>还是觉得好麻烦啊(一键搞定)</h1><p><code>wget https://raw.githubusercontent.com/afret0/v2ray/master/onekey_v2ray.sh &amp;&amp; chmod +x onekey_v2ray.sh &amp;&amp; ./onekey_v2ray.sh</code></p><p><a href="https://github.com/afret0/v2ray">项目地址</a></p><h1 id="server-config"><a href="#server-config" class="headerlink" title="server config"></a>server config</h1><h2 id="v2ray"><a href="#v2ray" class="headerlink" title="v2ray"></a>v2ray</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;vmess&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;clients&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>              <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;uuid&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;alterId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">64</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ws&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/ray&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Caddyfile"><a href="#Caddyfile" class="headerlink" title="Caddyfile"></a>Caddyfile</h2><p>使用 caddy2 版本, 自动安装维护证书是真的香…</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">domain.me &#123;<br>  encode gzip<br>  reverse_proxy / https://baidu.com<br>  reverse_proxy /ray 127.0.0.1:10000 &#123;<br>    header_up -Origin<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>附 caddy1 版本(不兼容)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">mydomain.me:80 &#123;<br>  redir https://mydomain.me&#123;url&#125;<br>&#125;<br><br>mydomain.me:443 &#123;<br>  gzip<br>  tls /root/caddy/caddy.crt /root/caddy/caddy.key<br>  <span class="hljs-built_in">log</span> /root/caddy/caddy.log<br>  proxy / https://baidu.com<br>  proxy /ray 127.0.0.1:10000 &#123;<br>    websocket<br>    header_upstream -Origin<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="adguard-和-clash-共存"><a href="#adguard-和-clash-共存" class="headerlink" title="adguard 和 clash 共存"></a>adguard 和 clash 共存</h1><p>![](<img src="https://raw.githubusercontent.com/Afret1/image/master/img/202307030910016.png" alt="Alt text">)</p>]]></content>
    
    
    
    <tags>
      
      <tag>v2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法笔记</title>
    <link href="/2020/07/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>o_O’’</p><span id="more"></span><h1 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h1><p>推导大 O 表示法方法</p><ol><li>用常数 1 取代云心时间中的所有加法常数</li><li>修改后的运行次数函数中,只保留最高项</li><li>如果最高项存在且不是 1, 则去除与这个项相乘的常数</li></ol><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><blockquote><p> 由零个或多个元素组成的有限序列</p></blockquote><p>ADT</p><p>Data</p><p>Operation</p><p><code>InitList(*l)</code> 初始化操作, 建立一个空的线性表 L</p><p><code>ListEmpty(L)</code> 判断是否为空,&lt;空: true,非空: false&gt;</p><p><code>ClearList(*l)</code> 清空线性表</p><p><code>GetElem(L, i, *e)</code>: 返回第 i 个元素给 e</p><p><code>LocateElem(L,e)</code> 查找与给定值 e 相等的元素, &lt; 存在: 返回 index, 不存在: 0&gt;</p><p><code>ListInsert(*L,i,e)</code> 第 i 个位置插入元素 e</p><p><code>ListDelete(*L,i,*e)</code> 删除 L 中第 i 个元素, 返回 e 的 index</p><p><code>ListLength(L)</code> 返回 l 的长度</p><p>endAdt</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>插入位置不合理, 抛出异常</p><p>长度大于表长度,则抛出异常或动态增加容量</p><p>从最后一个元素开始向前便利到第 i 个位置, 分别将它们向后移动一个位置</p><p>将要插入的元素放入位置 i 处</p><p>表长度 +1</p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除 index 不合理, 抛出异常</p><p>取出删除元素</p><p>从删除元素位置, 遍历到最后一个元素位置, 分别将它们向前移动一个位置</p><p>表长 -1</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="头指针"><a href="#头指针" class="headerlink" title="头指针"></a>头指针</h3><p>指链表指向第一个头节点的指针, 若链表有头节点,则是指向头节点的指针</p><p>头指针具有表示作用, 所以常用头指针冠以链表的名字(指针变量的名字)</p><p>无论链表是否为空,头指针均不为空</p><p>头指针是链表的必要元素</p><h3 id="头节点"><a href="#头节点" class="headerlink" title="头节点"></a>头节点</h3><p>头节点是为了操作的统一和方便而设立的, 放在第一个元素的节点之前, 其数据域一般无意义(可以用来存放链表的长度)</p><p>有了头节点,对在第一个元素节点前插入节点和删除节点和其它节点的操作就统一了</p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>获取链表地i个数据</p><p>声明一个节点 p 指向链表的第一个节点, 初始化 j 从 1 开始</p><p>当j&gt;j时, 遍历链表, p的指针向后移动</p><p>当链表末尾指针为空, 说明第i个元素不存在</p><p>若查找成功,返回节点p的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> i, ElemType *e)</span><br>&#123;<br>    <span class="hljs-type">int</span> j;<br>    LinkList p;<br><br>    p = L-&gt;next;<br>    j = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; i)<br>    &#123;<br>        p = p-&gt;next;<br>        ++j;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!p || j &gt; i)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    *e = p-&gt;data;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>prometheus exporter(python)</title>
    <link href="/2020/05/07/prometheus-exporter-python/"/>
    <url>/2020/05/07/prometheus-exporter-python/</url>
    
    <content type="html"><![CDATA[<p>不上监控你永远不知道线上代码跑成什么样, 不生孩子你就不知道肿么回事儿</p><span id="more"></span><p>放假前突然接到需求要给消息队列上个监控…</p><p>平时不基建临时抱佛脚… </p><p>比较大的问题是 exporter 的数据展示, 当时为了工期, 写了个定时任务自动更新 metrcis, 自己都觉得蠢的一逼</p><p>今天看了下官方客户端, 优雅太多了. 留个 demo 下来, 省的以后临时需求又没时间看文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> prometheus_client <span class="hljs-keyword">import</span> start_http_server<br><span class="hljs-keyword">from</span> prometheus_client.core <span class="hljs-keyword">import</span> GaugeMetricFamily, REGISTRY<br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OverviewCollector</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">collect</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;collecting...&quot;</span>)<br>        metric = GaugeMetricFamily(name=<span class="hljs-string">&quot;queue_totals&quot;</span>, documentation=<span class="hljs-string">&quot;message_ready&quot;</span>,<br>                                   labels=[<span class="hljs-string">&quot;msg_type&quot;</span>])<br><br>        payload = &#123;&#125;<br>        headers = &#123;&#125;<br><br>        url = <span class="hljs-string">&quot;http://root:pwd@127.0.0.1:15672/api/overview&quot;</span><br>        response = requests.get(url=url)<br>        data = response.json()<br>        queue_totals = data.get(<span class="hljs-string">&quot;queue_totals&quot;</span>, &#123;&#125;)<br>        msg_ready = queue_totals.get(<span class="hljs-string">&quot;messages_ready&quot;</span>, <span class="hljs-number">0</span>)<br>        msg = queue_totals.get(<span class="hljs-string">&quot;messages&quot;</span>, <span class="hljs-number">0</span>)<br>        msg_unacknowledged = queue_totals.get(<br>            <span class="hljs-string">&quot;messages_unacknowledged&quot;</span>, <span class="hljs-number">0</span>)<br><br>        metric.add_metric([<span class="hljs-string">&quot;msg_ready&quot;</span>], msg_ready)<br>        metric.add_metric([<span class="hljs-string">&quot;msg&quot;</span>], msg)<br>        metric.add_metric([<span class="hljs-string">&quot;msg_unacknowledged&quot;</span>], msg_unacknowledged)<br><br>        <span class="hljs-keyword">yield</span> metric<br>        <br>        c = CounterMetricFamily(<span class="hljs-string">&quot;HttpRequests&quot;</span>, <span class="hljs-string">&#x27;Help text&#x27;</span>, labels=[<span class="hljs-string">&#x27;app&#x27;</span>])<br>        c.add_metric([<span class="hljs-string">&quot;example&quot;</span>], <span class="hljs-number">2000</span>)<br>        <span class="hljs-keyword">yield</span> c<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    REGISTRY.register(OverviewCollector())<br>    start_http_server(<span class="hljs-number">10111</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;start...&quot;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        time.sleep(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li><input disabled="" type="checkbox"> <code>\while true</code> 总是怪怪的,  比较喜欢 <code>flask</code></li><li><input disabled="" type="checkbox"> 这个 <code>Collector</code> 怎么优雅的抽象出来啊…  一个 <code>metrcs</code>  就是一个 <code>Collector</code>?</li></ul><h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>golang 的 demo 就那么简洁???</p>]]></content>
    
    
    
    <tags>
      
      <tag>prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kafka_handbook</title>
    <link href="/2020/04/09/kafka-handbook/"/>
    <url>/2020/04/09/kafka-handbook/</url>
    
    <content type="html"><![CDATA[<p>…</p><span id="more"></span><h1 id="创建-topic"><a href="#创建-topic" class="headerlink" title="创建 topic"></a>创建 topic</h1><p><code>/usr/local/kafka/bin/kafka-topics.sh --create --topic test_topic --zookeeper 10.25.151.169:2181 --partitions 20 --replication-factor 1</code></p><h1 id="查看topic-信息"><a href="#查看topic-信息" class="headerlink" title="查看topic 信息"></a>查看topic 信息</h1><p><code>bin/kafka-topics.sh --zookeeper 127.0.0.1:2181 --topic testLog --describe</code></p><h1 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h1><p><code>bin/kafka-console-consumer.sh --zookeeper localhost:2181  --topic testLog--from-beginning</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python_常用方法</title>
    <link href="/2020/04/09/python-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2020/04/09/python-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>…</p>  <span id="more"></span><h1 id="获取本机-ip-主机名-MAC地址"><a href="#获取本机-ip-主机名-MAC地址" class="headerlink" title="获取本机 ip 主机名  MAC地址"></a>获取本机 ip 主机名  MAC地址</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_local_ip</span>() -&gt; <span class="hljs-built_in">str</span>:<br>    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((<span class="hljs-string">&#x27;1.1.1.1&#x27;</span>, <span class="hljs-number">80</span>))<br>        ip = s.getsockname()[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">finally</span>:<br>        s.close()<br>    <span class="hljs-keyword">return</span> ip<br><br>hostname = socket.gethostname()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_mac_address</span>():<br>    mac=uuid.UUID(<span class="hljs-built_in">int</span> = uuid.getnode()).<span class="hljs-built_in">hex</span>[-<span class="hljs-number">12</span>:]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;:&quot;</span>.join([mac[e:e+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>)])<br></code></pre></td></tr></table></figure><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><h2 id="时间戳格式化"><a href="#时间戳格式化" class="headerlink" title="时间戳格式化"></a>时间戳格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">timeStamp = <span class="hljs-number">1532585103</span><br>timetamp = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(timeStamp))<br>dateArray = datetime.datetime.utcfromtimestamp(timeStamp)<br>otherStyleTime = dateArray.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="转换为时间戳"><a href="#转换为时间戳" class="headerlink" title="转换为时间戳"></a>转换为时间戳</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;2013-10-10 23:40:00&quot;</span><br>timeArray = time.strptime(a, <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>timeStamp = <span class="hljs-built_in">int</span>(time.mktime(timeArray))<br></code></pre></td></tr></table></figure><h2 id="日期计算"><a href="#日期计算" class="headerlink" title="日期计算"></a>日期计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">delta = datetime.timedelta(days=<span class="hljs-number">3</span>)<br>ctime = datetime.datetime.strptime(ctime,<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>n_days = ctime + delta<br><span class="hljs-built_in">print</span>(n_days.strftime(<span class="hljs-string">&#x27;%Y.%m.%d&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="获取当天日期时间戳"><a href="#获取当天日期时间戳" class="headerlink" title="获取当天日期时间戳"></a>获取当天日期时间戳</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">today = datetime.date.today()<br>today_time = <span class="hljs-built_in">int</span>(time.mktime(today.timetuple()))<br></code></pre></td></tr></table></figure><h2 id="前-n-天的时间戳"><a href="#前-n-天的时间戳" class="headerlink" title="前 n 天的时间戳"></a>前 n 天的时间戳</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">threeDayAgo = (datetime.datetime.today() - datetime.timedelta(days=<span class="hljs-number">3</span>))<br>timeStamp = <span class="hljs-built_in">int</span>(time.mktime(threeDayAgo.timetuple()))<br></code></pre></td></tr></table></figure><h1 id="判断字符串中文"><a href="#判断字符串中文" class="headerlink" title="判断字符串中文"></a>判断字符串中文</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.findall(<span class="hljs-string">&#x27;[\u4e00-\u9fa5]&#123;3&#125;&#x27;</span>, user[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-comment"># 匹配后三位???</span><br></code></pre></td></tr></table></figure><h1 id="list-的交集-并集-差集"><a href="#list-的交集-并集-差集" class="headerlink" title="list 的交集 并集 差集"></a>list 的交集 并集 差集</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">diff</span>(<span class="hljs-params">listA,listB</span>):<br>    <span class="hljs-comment">#求交集的两种方式</span><br>    retA = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listA <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> listB]<br>    retB = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(listA).intersection(<span class="hljs-built_in">set</span>(listB)))<br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;retA is: &quot;</span>,retA<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;retB is: &quot;</span>,retB<br><br>    <span class="hljs-comment">#求并集</span><br>    retC = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(listA).union(<span class="hljs-built_in">set</span>(listB)))<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;retC1 is: &quot;</span>,retC<br><br>    <span class="hljs-comment">#求差集，在B中但不在A中</span><br>    retD = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(listB).difference(<span class="hljs-built_in">set</span>(listA)))<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;retD is: &quot;</span>,retD<br><br>    retE = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listB <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> listA]<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;retE is: &quot;</span>,retE<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    listA = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>    listB = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br>    diff(listA,listB)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>结果 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">retA <span class="hljs-keyword">is</span>:  [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>retB <span class="hljs-keyword">is</span>:  [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>retC1 <span class="hljs-keyword">is</span>:  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>retD <span class="hljs-keyword">is</span>:  [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>retE <span class="hljs-keyword">is</span>:  [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="PrettyErrors"><a href="#PrettyErrors" class="headerlink" title="PrettyErrors"></a>PrettyErrors</h2><p>err 输出美化 [github](</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows 聚焦壁纸提取|python 脚本</title>
    <link href="/2020/03/25/windows-%E8%81%9A%E7%84%A6%E5%A3%81%E7%BA%B8%E6%8F%90%E5%8F%96-python-%E8%84%9A%E6%9C%AC/"/>
    <url>/2020/03/25/windows-%E8%81%9A%E7%84%A6%E5%A3%81%E7%BA%B8%E6%8F%90%E5%8F%96-python-%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>见 <a href="https://gist.github.com/afret0/ea72a62ba21e72769cfbbdc1a506eb32">gist</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阴三儿-北京晚报</title>
    <link href="/2020/02/28/%E9%98%B4%E4%B8%89%E5%84%BF-%E5%8C%97%E4%BA%AC%E6%99%9A%E6%8A%A5/"/>
    <url>/2020/02/28/%E9%98%B4%E4%B8%89%E5%84%BF-%E5%8C%97%E4%BA%AC%E6%99%9A%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=zxCVcVSW-nE">传送门</a></p><span id="more"></span><p>当夜幕降临在我的城市<br>有另外一种人的生活即将开始<br>他们白天睡懒觉 也不用去上班<br>所以晚上睡不着 在家太无聊<br>不喜欢看电视 也不爱上网<br>因为都是看得见的摸不着的假象</p><p>到底哪儿才有真的？<br>我想要找个尖的，闲着也是闲着<br>就别耽误时间了，出了门约哥们商量去哪透透气<br>单身得自由属于成年的光棍，都露着大腿 踩着高跟飘着香味儿<br>漂亮的大妞儿一个比一个够劲儿，知道你一人儿，想要跟你聊会<br>跟你逗个闷儿，你也根本琢磨不过味儿<br>一会咱们换个地儿 找个 old dirty 北京饭馆告诉你点事儿</p><p>北京晚报，有人征婚有人打广告<br>其实就是吹牛逼和想操<br>北京晚报，太多的人在家里犯傻逼都睡不着<br>我根本不要</p><p>北京晚报，有人喝酒有人吃嗨药，喜欢散德行还不爱带套儿<br>北京晚报，老尖儿都叫我夜猫子，因为只有天黑了才出来造 但是到了后半夜<br>情况有所改变，因为饿狼太多了，肥羊有限，剩下一帮大老爷们儿互相看不份儿</p><p>非要给这个喝醉的晚上来点火药味儿 于是有人出手 有人逃走 有人搂着他们的<br>妞儿喝着假的洋酒 看了一出戏 两个没出息的大傻逼<br>让其他人看乐子自己发脾气 把妞儿都吓跑了 自己也傻了 酒吧老板报了警了<br>我也只能闪了 上了瓷的车 在卷一个去兜风 从二环到三环都不会堵车 无数的<br>霓虹灯照亮我的世界 不管多晚桑拿洗浴他妈都会营业 红白蓝的车灯照亮整条大街<br>但是对于这些她永远装看不见</p><p>北京晚报有人在找有人在照 打架多数还是人多的欺负人少<br>北京晚报，有人睡地下通道，有人公款吃喝国家给报销<br>北京晚报，有人迟到有地儿验尿，危险就在身边玩儿的就是心跳<br>北京晚报，北京会越来越热闹， 但我们再也找不回从前的味道<br>深更半夜<br>照样有人拼命在工作<br>老人走在大街<br>捡路人喝剩的瓶子<br>喝多的 被花的 要饭的 疯的傻的<br>可怜还是骗人根本分不清真的假的<br>从平时到周末 谁出来都想要收获<br>最低消费驻场三陪<br>哪儿妞儿多哪儿醉过<br>奸商在捣鬼<br>有钱人玩儿的到位<br>漂亮女孩儿总在干杯很快被灌醉<br>臭鼠霉趁天黑挂警备狐假虎威<br>酒吧夜总会的门前领导的车辆成群结队<br>厕所里躲着戏果儿<br>洋酒就着鸭脖儿<br>小明星大模特儿<br>陪着老逼坐在雅座儿<br>巡逻的警车东北的皮条客<br>女大学生很多学生证儿不能打折<br>北京还在建设但是人已经变了<br>这所有的一切究竟谁应该来负责</p><p>北京晚报，病了您得吃药，可是医药费太贵了没人给你报销<br>北京晚报，挂羊头卖狗肉，太多神经病和大傻逼进大学当教授<br>北京晚报，欠的钱我不还因为学校收学费都是为了骗钱<br>北京晚报，妞儿的屁股不够翘，想当明星那都得先被导演操</p><p>很多人每天都看北京晚报<br>他们老说有些国家大事儿你必须得知道<br>我怀疑这些消息可不可靠<br>我不想关心谁的照片儿登上了头条<br>我听说洗衣粉放进油条<br>我听说马嘉爵和 911<br>我听说动物园的猴儿自己跑了<br>我听了一堆废话他妈自己也快疯了<br>我离开了市中心<br>心里还是太燥<br>屋里做了隔音可是邻居还是嫌吵<br>出门儿才发现垃圾筒里的北京晚报<br>上边儿都印满了广告<br>谁死了<br>他妈这事儿与我无关<br>我只想看看哪个小妞儿最性感<br>谁当上领导这事儿谁爱管谁管<br>谁中了五百万谁整天没钱<br>只有臭傻逼整天找私人侦探调查婚外恋<br>其实出租司机也不愿意没事儿带您瞎转<br>只有每天四五点钟<br>听见街上喊着北京晚报<br>终于感到了北京的亲切</p>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阴三儿-老师你好</title>
    <link href="/2020/02/28/%E9%98%B4%E4%B8%89%E5%84%BF-%E8%80%81%E5%B8%88%E4%BD%A0%E5%A5%BD/"/>
    <url>/2020/02/28/%E9%98%B4%E4%B8%89%E5%84%BF-%E8%80%81%E5%B8%88%E4%BD%A0%E5%A5%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我就上课听歌我乐意！</p></blockquote><p><a href="https://www.youtube.com/watch?v=gKdzRIGhbbA">传送门</a></p><span id="more"></span><p>想让我尊重你你得先学会尊重别人！<br>冤枉我的事我 TM 永远不能承认！<br>没收我的东西 我 TM 都不要了！<br>跟别人都没事儿 我跟你只有仇恨！<br>你丫上课忘了词就说是让我气的！<br>你扔了我的书包这事儿我永远记着！<br>对你有偏见是因为我没换过座位！<br>一年四季挨着垃圾桶说话能不脏吗！<br>黑板上的裂缝就是我砸的！<br>你喝的每口水里 TM 都有我的吐沫！<br>整天没事儿干就会趴小窗户偷看！<br>我就怕你揪我出去然后叫我滚蛋！<br>找不着凶手的 BI 事儿就往我身上按！<br>一年攒了一堆检查才给我处分通知单！<br>你说你为人师表出了学校门就随地吐痰！<br>就会舔着个 BI 脸给我爸打电话！<br>你不要脸！无能的表现！！<br>你要什么都行别碰我 CD 机！你吗了个 BI!<br>我就上课听歌我乐意！<br>Ennnnnnnnnhhhhh Yaaaah!!<br>我就上语文课写数学作业！<br>作业本上画个大几吧纯为了发泄！<br>只有高年级小姐姐进入我的世界我才知道！<br>什么叫温柔和体贴！<br>知道你是年级组长给你留点面子！<br>全办公室的老师都知道你丫是一骗子！<br>人家都坐板凳你丫非得垫一垫子！<br>明明开卷考试说我作弊撕了我的卷子！<br>瞧你丫那 **!<br>借着更年期跟我 **!<br>回家草自己吧草自己！！<br>Ennnnnnnnnhhhhh Yaaaah!!<br>我在学校外边干的都是你丫不敢想的！<br>上课两分钟我接个下茬儿堵了你的嗓子！<br>我的作业从来不判全 TM 是 2 分！<br>其实除了体育老师都是 ** 养的！<br>当年把唬我的话现在全部还你！<br>不是我小心眼儿是你根本不讲理！<br>我讲的段子当时全学校都流行！<br>你说的笑话只能逗乐你自己！<br>周末弄补习班就是为了骗 $ 吧！<br>罚我站着听讲我就当锻炼身体！<br>说我写的作文没味儿还不如放 P!<br>跟流氓打架我冲在前面是因为我讲义气！<br>其实有好多好的老师值得你去学习！<br>人家比你 NB 多了也没烦人无理！<br>讲课就讲课别 **!<br>学生花钱上学不是来这儿看您抽风发脾气！<br>对我好的老师我发自内心的尊重！<br>*** 代表全体同学向你们表示致敬！<br>我听说你病了 更年期 X 骚动！<br>我比你狠多了！回忆综合症！！<br>咱俩都说中文说得也不是一水平！<br>您都快被我气疯了我还是那么冷静！<br>你儿子托我爸找工作是吧！<br>不可能！草！那是我爸！！<br>老陈他向着我！<br>Mennnnnnnnnhhhhh Yaaaah!!<br>记着！<br>多管闲事多吃 P! 少管闲事少拉稀！<br>你丫这个变态<br>收礼的时候你笑得很灿烂啊～！<br>吗了个 BI!<br>都得死</p>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ss+v2Ray mac 客户端配置</title>
    <link href="/2020/02/08/ss-v2Ray-mac-%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/02/08/ss-v2Ray-mac-%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录一下 mac 客户端的配置</p></blockquote><span id="more"></span><p>服务端部署参考 <a href="https://teddysun.com/569.html">使用 Docker 快速部署 Shadowsocks-libev + v2ray-plugin</a></p><p>以 Shadowsocks-libev + v2ray-plugin over websocket (HTTP) 方式部署为例</p><p>主要碰到的是问题是  mac 客户端不知道怎么配置, 试了好多次才成功, 记录一下</p><p>服务端示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;server_port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">9000</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;aes-256-gcm&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">300</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;password0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;fast_open&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;nameserver&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;8.8.8.8&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;mode&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;tcp_and_udp&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;plugin&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;v2ray-plugin&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;plugin_opts&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;server&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>mac 客户端</p><p>客户端使用 ShadowsocksX-NG</p><p>配置</p><p><img src="https://i.loli.net/2020/02/08/rR1SeWAPbmTvF4N.png" alt="image.png"></p><p>地址切换成自己的 vps 就好~</p><p>插件选项:</p><p><code>plugin_opts=server;host=127.0.0.1</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>v2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>trojan 初尝</title>
    <link href="/2020/02/08/trojan-%E5%88%9D%E5%B0%9D/"/>
    <url>/2020/02/08/trojan-%E5%88%9D%E5%B0%9D/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有些鸟是关不住的</p></blockquote><span id="more"></span><p>再次感谢  <em>秋大</em><a href="https://twitter.com/qiushuiyibing">秋水逸冰 twitter</a>  <a href="https://teddysun.com/"> 秋水逸冰 blog</a>,  最初想要看外面世界的时候, 博客教程给予我的帮助.  感激….</p><p>2020 年前有预感, 遂升级了一波 ssr 的配置, 效果显著, 不少朋友的已经 gg, 而我得以幸免. </p><p><a href="https://trojan-gfw.github.io/trojan/">trojan</a> ( ps: 已封) 自称不会被墙,  故尝试搭建一波. vps 使用 vultr 家的吧, 自己的 bwg CN2-GIA 太熊猫了, 舍不得祸害, 万一呢… 已习惯 google 的我并不能接受垃圾的某度</p><p>搭建教程参考 <a href="https://ssu.tw/index.php/archives/40/">docker 部署 trojan</a>, ( 再次感谢秋大的推荐), 目前只是初尝, 只记录碰到的一些问题.</p><p>2020-03-20 更新</p><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>mac 端好像并没有好用的客户端</p><p>使用命令行工具监听端口 可以实现…   参照官方文档即可</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li><p><del>mac 的客户端咋用啊</del></p></li><li><p>裸 trojan 的有效性, 待验证.</p></li><li><p>是否需要使用伪装代理, 使用 tls+ws 代理方式的话 和 v2ray 比又有哪些好处呢…</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>trojan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令行的艺术</title>
    <link href="/2020/01/14/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <url>/2020/01/14/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md#%E5%89%8D%E8%A8%80">命令行的艺术</a>  该项目的学习笔记</p>  <span id="more"></span><ul><li><p>为了便于编辑长命令，在设置你的默认编辑器后（例如 <code>export EDITOR=*vim*</code>），<strong>ctrl-x</strong> <strong>ctrl-e</strong> 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 <strong>escape-v</strong>。</p></li><li><p>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间</p></li><li><p>使用括号扩展（<code>&#123;</code>…<code>&#125;</code>）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 <code>mv foo.&#123;txt,pdf&#125; some-dir</code>（同时移动两个文件），<code>cp somefile&#123;,.bak&#125;</code>（会被扩展成 <code>cp somefile somefile.bak</code>）或者 <code>mkdir -p test-&#123;a,b,c&#125;/subtest-&#123;1,2,3&#125;</code>（会被扩展成所有可能的组合，并创建一个目录树）</p></li><li><p>通过使用 <code>&lt;(some command)</code> 可以将输出视为文件。例如，对比本地文件 <code>/etc/hosts</code> 和一个远程文件：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">diff /etc/hosts &lt;(ssh somehost cat /etc/hosts)<br></code></pre></td></tr></table></figure><ul><li>对 ssh 设置做一些小优化可能是很有用的，例如这个 <code>~/.ssh/config</code> 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">TCPKeepAlive=yes<br>ServerAliveInterval=15<br>ServerAliveCountMax=6<br>Compression=yes<br>ControlMaster auto<br>ControlPath /tmp/%r@%h:%p<br>ControlPersist yes<br></code></pre></td></tr></table></figure><ul><li>使用 <a href="https://github.com/mooz/percol"><code>percol</code></a> 或者 <a href="https://github.com/junegunn/fzf"><code>fzf</code></a> 可以交互式地从另一个命令输出中选取值。</li><li>将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用： <code>python -m SimpleHTTPServer 7777</code> （使用端口 7777 和 Python 2）或 <code>python -m http.server 7777</code> （使用端口 7777 和 Python 3）。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笑场</title>
    <link href="/2020/01/13/%E7%AC%91%E5%9C%BA/"/>
    <url>/2020/01/13/%E7%AC%91%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>小北 跟我说句话吧  今天很安静 我吃了很多橘子  下了很多雨</p>  <span id="more"></span>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北方爷们-花粥</title>
    <link href="/2019/11/28/%E5%8C%97%E6%96%B9%E7%88%B7%E4%BB%AC-%E8%8A%B1%E7%B2%A5/"/>
    <url>/2019/11/28/%E5%8C%97%E6%96%B9%E7%88%B7%E4%BB%AC-%E8%8A%B1%E7%B2%A5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在四季的风中他喝着啤酒安慰着时光~</p></blockquote><span id="more"></span><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs text">南方的城里住着一个北方的爷们<br>他总是喜欢穿着带花的裤衩蹲在路旁<br>   他的钱不多但笑起来是那么猥琐放荡<br>   他干净的裤兜里装的是什么是屌丝的忧伤<br><br>北方的小镇有暖气的冬天没有南方冷<br>   他不需要两床的棉被去遮盖他裸睡的身体<br>   他在来去的街头留下烟头影子才会某然的凄凉<br>   眨眼的时间 烟头已熄灭 影子已不见<br>   北方爷们 你是否习惯南方的高温<br><br>北方爷们 你是否喜欢南方妞的湿润<br>   日子过得就像那些不眠的晚上<br>   他抽着芙蓉王对墙满谈着理想<br>   北方爷们 我们都在忍受着漫长<br>   北方爷们 是不是高楼遮住了你的希望<br>   昨日的宝马也带走了他仅有的姑娘<br>   夜里的歌声也没有让她找到迷途的方向<br>   阳光里他在院子中央眯着眼眺望<br>   在四季的风中他喝着啤酒安慰着时光<br>   北方爷们 你是否爱上了南方<br>   北方爷们 你说今天你就要带她回到家乡<br>   思念让人心伤 她呼唤着你的泪光<br>   北方的高粱已熟 那是你简单的理想<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 常用方法</title>
    <link href="/2019/09/17/golang-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2019/09/17/golang-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>包名字怎么这么长啊</p><span id="more"></span><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><p><a href="https://github.com/segmentio/ksuid">https://github.com/segmentio/ksuid</a></p><h2 id="iter"><a href="#iter" class="headerlink" title="iter"></a>iter</h2><p><a href="https://github.com/bradfitz/iter">https://github.com/bradfitz/iter</a></p><p><a href="https://godoc.org/github.com/bradfitz/iter">doc</a></p><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p><a href="https://github.com/tidwall/gjson">Get JSON values quickly</a></p><p><a href="https://github.com/tidwall/gjson">https://github.com/tidwall/gjson</a></p><h2 id="jinzhu-x2F-copier"><a href="#jinzhu-x2F-copier" class="headerlink" title="jinzhu&#x2F;copier"></a>jinzhu&#x2F;copier</h2><p>结构体赋值</p><p><a href="https://github.com/jinzhu/copier">https://github.com/jinzhu/copier</a></p><h2 id="imdario-x2F-mergo"><a href="#imdario-x2F-mergo" class="headerlink" title="imdario&#x2F;mergo"></a>imdario&#x2F;mergo</h2><p>结构体赋值到 map</p><p><a href="https://github.com/imdario/mergo">https://github.com/imdario/mergo</a></p><h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><h2 id="当前秒级时间戳"><a href="#当前秒级时间戳" class="headerlink" title="当前秒级时间戳"></a>当前秒级时间戳</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Now</span><span class="hljs-params">()</span></span> <span class="hljs-type">int64</span> &#123;<br>   <span class="hljs-keyword">return</span> time.Now().Unix()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="当前毫秒级时间戳"><a href="#当前毫秒级时间戳" class="headerlink" title="当前毫秒级时间戳"></a>当前毫秒级时间戳</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NowNano</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(time.Now().UnixNano() / <span class="hljs-number">1e6</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="今日凌晨时间戳"><a href="#今日凌晨时间戳" class="headerlink" title="今日凌晨时间戳"></a>今日凌晨时间戳</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetTodayZeroTimestamp</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>   t := time.Now()<br>   tm1 := time.Date(t.Year(), t.Month(), t.Day(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, t.Location())<br>   <span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(tm1.Unix())<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateZeroToNineRandomNumber</span><span class="hljs-params">(max <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>   rand.Seed(time.Now().UnixNano())<br>   <span class="hljs-keyword">return</span> rand.Intn(max)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="科学计数-float-转-int"><a href="#科学计数-float-转-int" class="headerlink" title="科学计数 float 转 int"></a>科学计数 float 转 int</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> newNum <span class="hljs-type">float64</span><br> numStr := <span class="hljs-string">&quot;1.57103592E9&quot;</span><br> _, err := fmt.Sscanf(numStr, <span class="hljs-string">&quot;%e&quot;</span>, &amp;newNum)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br>  <span class="hljs-keyword">return</span><br> &#125;<br> num := fmt.Sprintf(<span class="hljs-string">&quot;%.f&quot;</span>, newNum)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习写shell</title>
    <link href="/2019/08/30/%E5%AD%A6%E4%B9%A0%E5%86%99shell/"/>
    <url>/2019/08/30/%E5%AD%A6%E4%B9%A0%E5%86%99shell/</url>
    
    <content type="html"><![CDATA[<p>写脚本使我快乐~</p><span id="more"></span><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h2><p>定义变量</p><p><code>name=afreto</code></p><p>使用</p><p><code>echo $name</code></p><h3 id="常见系统变量"><a href="#常见系统变量" class="headerlink" title="常见系统变量"></a>常见系统变量</h3><ul><li><code>$0</code> 当前程序</li><li><code>$1</code> 第 n 个参数, n&#x3D; 1, 2, 3…</li><li><code>$*</code> 所有参数, 不包括 <code>$0</code>, 为一个字符串</li><li><code>$2</code> 传递给脚本的所有参数, 每个参数是独立的字符串</li><li><code>$#</code> 参数个数, 不含 <code>$0</code></li><li><code>$?</code> 命令执行完成后的状态, <code>0</code> 表示执行成功</li></ul><blockquote><p><code>set --</code> 清空所有位置变量</p></blockquote><h1 id="if"><a href="#if" class="headerlink" title="if"></a>if</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">if condition<br>then<br>    command1 <br>    command2<br>    ...<br>    commandN <br>fi<br><br><br>if condition1<br>then<br>    command1<br>elif condition2 <br>then <br>    command2<br>else<br>    commandN<br>fi<br><br></code></pre></td></tr></table></figure><h2 id="判断数字"><a href="#判断数字" class="headerlink" title="判断数字"></a>判断数字</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">! /bin/bash</span><br><span class="hljs-meta"># </span><span class="language-bash"><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span>, 判断数字大小</span><br><br><br>NUM=100<br>if (($NUM &gt; 1));then<br>    echo &quot;this  $NUM is greater than 1&quot;<br>fi<br></code></pre></td></tr></table></figure><blockquote><p>数字运算使用 <code>let</code></p></blockquote><h2 id="判断目录是否存在"><a href="#判断目录是否存在" class="headerlink" title="判断目录是否存在"></a>判断目录是否存在</h2><p>文件测试运算符见<a href="https://www.runoob.com/linux/linux-shell-basic-operators.html">这里</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">! /bin/bash</span><br><span class="hljs-meta"># </span><span class="language-bash">判断目录是否存在</span><br>if [ ! -d  ~/mine ] <br>then<br>    echo &quot;~/mine not exists&quot;<br>else<br>    echo &quot;exists&quot;<br>fi<br></code></pre></td></tr></table></figure><blockquote><p><code>(())</code>  和 <code>[]</code> 的区别…   先放一放  暂时不知</p></blockquote><h1 id="for"><a href="#for" class="headerlink" title="for"></a>for</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">for var in item1 item2 ... itemN<br>do<br>    command1<br>    command2<br>    ...<br>    commandN<br>done<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">! /bin/bash</span><br><br>for i in `seq 1 15`<br>do<br>    echo $i<br>done<br></code></pre></td></tr></table></figure><h1 id="获取当前日期"><a href="#获取当前日期" class="headerlink" title="获取当前日期"></a>获取当前日期</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">`date +%Y%m%d`<br></code></pre></td></tr></table></figure><h1 id="输出颜色"><a href="#输出颜色" class="headerlink" title="输出颜色"></a>输出颜色</h1><p><code>echo -e &quot;\033[32m TEXT \033[1m&quot;</code></p><p><code>echo -e &quot;\e[1;31m TEXT \e[0m&quot;</code></p><h1 id="获取当前文件名"><a href="#获取当前文件名" class="headerlink" title="获取当前文件名"></a>获取当前文件名</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;`basename $0`&quot;<br></code></pre></td></tr></table></figure><h1 id="输出-a-z"><a href="#输出-a-z" class="headerlink" title="输出 a - z"></a>输出 a - z</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#123;a..z&#125;<br></code></pre></td></tr></table></figure><h1 id="设置-exit"><a href="#设置-exit" class="headerlink" title="设置 exit"></a>设置 exit</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">exit 10<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker 使用记录</title>
    <link href="/2019/08/28/docker-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2019/08/28/docker-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>docker 用的太水了  要学习一波怎么骚操作</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>wget -qO- https://get.docker.com/ | sh</code></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置-docker-服务"><a href="#配置-docker-服务" class="headerlink" title="配置 docker 服务"></a>配置 docker 服务</h2><p>配置 docker 用户组</p><p><code>sudo usermod -aG docker USER_NAME</code></p><blockquote><p>  docker 服务默认配置 <code>/etc/default/docker</code></p><p>  可通过修改其中的 DOCKER_OPTS 来修改服务启动的参数</p></blockquote><h1 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h1><p>使用  <code>docker pull</code> 命令可以拉取镜像</p><p><code>docker pull NAME[:TAG]</code></p><p>NAME 是镜像仓库的名字, 用来区分镜像, TAG 是镜像的标签, 常用来表示版本信息</p><p>通常情况下, 描述一个镜像需要 “名字 + 标签”</p><blockquote><p>  对于 docker 镜像, 如果不显示指定 TAG, 则默认会选择 latest 标签</p><p>  镜像仓库名称中应该添加仓库地址(即 registry, 注册服务器)作为前缀, 我们默认的是 <code>docker hub</code> 服务, 该前缀可以省略</p></blockquote><p>下载 ubuntu 镜像:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull ubuntu<br>Using default tag: latest<br>latest: Pulling from library/ubuntu<br>35c102085707: Pull complete<br>251f5509d51d: Pull complete<br>8e829fe70a46: Pull complete<br>6001e1789921: Pull complete<br>Digest: sha256:d1d454df0f579c6be4d8161d227462d69e163a8ff9d20a847533989cf0c94d90<br>Status: Downloaded newer image for ubuntu:latest<br>docker.io/library/ubuntu:latest<br></code></pre></td></tr></table></figure><h2 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h2><p><code>docker images</code></p><p>images 子命令支持如下选项</p><ul><li><code>-a, --all=true|false</code> 所有镜像文件(包括临时文件), 默认为 false</li><li><code>--digests=true|false</code> 镜像的数字摘要值 默认为 false</li><li><code>-f , --filter=[]</code>  过滤列出的镜像, 如 <code>dangling=true</code> 只显示没有被使用的镜像; 也可指定带有特定标注的镜像</li><li><code>--format=&quot;TEMPLATE&quot;</code> 控制输出格式, 如 <code>.ID</code> 代表 ID 信息, <code>.Repository</code> 代表仓库信息</li><li><code>--no-trunc=true|false</code> 对输出结果中太长的部分进行截断, 默认为 true</li><li><code>-q, --quiet=true|false</code> 仅输出 ID 信息</li></ul><h2 id="使用-tag-命令添加镜像标签"><a href="#使用-tag-命令添加镜像标签" class="headerlink" title="使用 tag 命令添加镜像标签"></a>使用 tag 命令添加镜像标签</h2><p><code>docker tag ubuntu:latest myubuntu:latest</code></p><h2 id="使用-inspect-命令查看详细信息"><a href="#使用-inspect-命令查看详细信息" class="headerlink" title="使用 inspect 命令查看详细信息"></a>使用 inspect 命令查看详细信息</h2><p><code>docker inspect ubuntu:latest</code></p><h2 id="使用-history-查看镜像历史"><a href="#使用-history-查看镜像历史" class="headerlink" title="使用 history 查看镜像历史"></a>使用 history 查看镜像历史</h2><p>可以使用 history 命令查看各层的创建信息</p><p><code>docker history ubuntu:latest</code></p><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><p>使用 docker search 搜索仓库中共享的镜像</p><p><code>docker search TERM</code></p><p>参数:</p><ul><li><code>--automated=true|false</code> 仅显示默认创建的镜像, 默认为 false</li><li><code>--no-trunc=true|false</code> 输出信息不截断, 默认为 false</li><li><code>-s, --starx=X</code> 指定显示评价为星级以上的镜像, 默认为 0, 即默认输出所有镜像</li></ul><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><h3 id="使用标签删除镜像"><a href="#使用标签删除镜像" class="headerlink" title="使用标签删除镜像"></a>使用标签删除镜像</h3><p><code>docker rmi IMAGE[IMAGE...]</code> IMAGE 可以为标签或者 ID</p><p>当同一个镜像拥有多个标签时, <code>docker rmi </code> 只删除多个标签中的指定标签</p><blockquote><p>当镜像只剩下一个标签时, <code>docker rmi</code> 会删除镜像</p></blockquote><h3 id="使用镜像-ID-删除镜像"><a href="#使用镜像-ID-删除镜像" class="headerlink" title="使用镜像 ID 删除镜像"></a>使用镜像 ID 删除镜像</h3><p>使用 <code>docker rmi</code> 命令根据镜像 ID 删除时,会先尝试删除所有指向该镜像的标签, 然后删除该镜像本身</p><blockquote><p>  也可以是能进行区分的部分镜像 ID 串前缀</p></blockquote><blockquote><p>  当该镜像创建的容器存在时, 镜像无法被删除</p></blockquote><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>创建镜像的方法主要有三种: 基于已有的容器创建, 基于本地模板导入, 基于 dockerfile 创建</p><h2 id="导出和载入镜像"><a href="#导出和载入镜像" class="headerlink" title="导出和载入镜像"></a>导出和载入镜像</h2><p><code>docker save</code>, <code>docker load</code></p><h3 id="save-导出镜像到文件"><a href="#save-导出镜像到文件" class="headerlink" title="save 导出镜像到文件"></a>save 导出镜像到文件</h3><p><code>docker save -o ubuntu_14.04.tar ubuntu:latest</code></p><h3 id="载入镜像"><a href="#载入镜像" class="headerlink" title="载入镜像"></a>载入镜像</h3><p><code>docker load --input ubuntu_14.04.tar</code></p><p>或</p><p><code>docker load &lt; ubuntu_14.04.tar</code></p><h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><p><code>docker push NAME[:TAG] | [REGISTRY_HOST[:REGISTRY_PORT]/]NAME[:TAG]</code></p><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><h3 id="新建容器"><a href="#新建容器" class="headerlink" title="新建容器"></a>新建容器</h3><p><code>docker create</code></p><ul><li><code>-l, --label=[]</code> 以键值对的方式制定容器的标签信息</li><li><code>--label-file=[]</code> 从文件中读取标签信息</li></ul><blockquote><p>  <code>docker create -it ubuntu:latest</code></p></blockquote><p>使用 docker create 命令创建的容器处于停止状态, 可以使用 <code>docker start</code> 启动</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p><code>docker start</code></p><h2 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h2><p><code>docker run </code></p><blockquote><p>  <code>docker run ubuntu /bin/echo/ &#39;hello world&#39;</code></p></blockquote><p>当使用 <code>docker run</code>来创建并启动容器时, docker 在后台运行的操作:</p><ul><li>检查本地是否存在指定的镜像, 不存在则从公共仓库下载</li><li>使用镜像创建一个容器, 并启动</li><li>分配一个文件系统给容器, 并在只读的镜像层外面挂载一层可读写层</li><li>从宿主机配置的网桥接口中桥接一个虚拟接口到容器</li><li>从网桥的地址池中配置一个 IP 给容器</li><li>执行用户制定的应用程序</li><li>执行完毕后容器自动终止</li></ul><p>如下命令启动一个 bash, 允许用户进行交互</p><p><code>docker run -it ubuntu:latesd /bin/bash</code></p><ul><li><code>-t</code> 让 docker 分配一个伪终端并绑定到容器的标准输出上</li><li><code>-i</code> 让容器的标准输入保持打开</li></ul><blockquote><p>  常见错误码</p><ul><li>125 docker deamon 执行出错, 例如指定了不支持的 docker 参数</li><li>126 指定的命令无法执行, 例如权限出错</li><li>127 容器内命令无法找到</li></ul></blockquote><blockquote><p>在执行 docker run 的时候 添加 -rm 命令, 则容器在停止后会立即删除</p><p><strong>–rm 和 -d 参数不能同时使用</strong></p></blockquote><h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><p>可以通过添加 <code>-d</code> 参数实现</p><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><p><code>docker stop[-t|--time[=10]][CONTAINEWR..]</code></p><p>首先向容器发送 SIGTERM 信号, 等待一段时间(默认 10 秒) 后, 再发送 SIGKILL 信号来停止容器</p><p><code>docker kill</code> 命令会直接发送 SIGKILL 信号强行 kill  容器</p><h2 id="docker-restart"><a href="#docker-restart" class="headerlink" title="docker restart"></a>docker restart</h2><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><h3 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h3><p><code>attach</code>  是 docker 自带的命令</p><p><code>docker attach [--detach-keys[=[]]] [-no-stdin] [--sig-proxy[=true]] CONTAINER</code></p><ul><li><code>--detach-keys[=[]]</code> 指定退出 attach 模式的快捷键序列, 默认是 <code>CTRL_p, CTRL-q</code></li><li><code>--no-stdin=true|false</code> 是否关闭标准输入, 默认 false</li><li><code>--sig-proxy=true | false</code> 是否代理收到的系统信号给应用进程, 默认 true</li></ul><p>当多个窗口同时使用 attach 命令连到同一个容器的时候, 所有窗口都会同步显示. 当某个窗口因命令阻塞时, 其他窗口也无法执行操作.</p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>docker 在 1.3.0 版本起提供了一个更加方便的 exec 命令, 可以在容器内直接执行任意命令.</p><p><code>docker exec [-d|--detach] [--detach-keys[=[]]] [-i|--interactive] [--privileged] [-t|--tty] [-u|--user[=USER]] CONTAINER COMMAND [ARG...]</code></p><ul><li><code> -i, --interactive=true | false</code> 打开标准输入接受用户输入命令, 默认 false</li><li><code>--privileged=true | false</code> 是否给执行命令以高权限, 默认 false</li><li><code>-t, --tty=true | false</code> 分配伪终端, 默认 false</li><li><code>-u, --user==&quot;&quot;</code>  执行命令的用户名或 ID</li></ul><p>例如 进入刚创建的容器并启动一个 bash</p><p><code> docker exec -it ID /bin/bash</code></p><h3 id="nsenter-工具"><a href="#nsenter-工具" class="headerlink" title="nsenter 工具"></a>nsenter 工具</h3><p>在 util-linux 软件包版本 2.23+ 中包含 nsenter 工具</p><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p><code>docker rm [-f | --force] [-l | --link] [-v |--volumes] CONTAINER[CONTAINER...]</code></p><ul><li><code>-f, --force=false</code>  rm -f</li><li><code>-l, --link=false</code> 删除容器的链接, 但保留容器</li><li><code>-v, --volumes=false</code> 删除容器挂载的数据卷</li></ul><h2 id="容器的导入和导出"><a href="#容器的导入和导出" class="headerlink" title="容器的导入和导出"></a>容器的导入和导出</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p><code>docker export [-o | --output[=&quot;&quot;]] CONTAINER</code></p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p><code>docker import [-c | --changes[=[]]] [-m | --message[=MESSAGE]] file | URL | - [REPOSITORY] [:TAG]</code></p><ul><li><code>-c, --changes</code> 在导入时执行对容器修改的 dockerfile 指令</li></ul><h1 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h1><ul><li>数据卷 容器内数据直接映射到本地主机环境</li><li>数据卷容器  使用特定容器维护数据卷</li></ul><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷是一个可供容器使用的特殊目录, 将操作系统目录直接映射进容器, 类似于 linux 下的 mount 操作</p><blockquote><ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷内数据的修改会立马生效, 无论是容器内操作还是本地操作</li><li>对数据卷的更新不会影响镜像, 解耦应用和数据</li><li>卷会一直存在, 直到没有容器使用, 可以安全卸载</li></ul></blockquote><h3 id="在容器内创建一个数据卷"><a href="#在容器内创建一个数据卷" class="headerlink" title="在容器内创建一个数据卷"></a>在容器内创建一个数据卷</h3><p>在用 docker run 命令的时候, 使用 -v 标记可以在容器内创建多个数据卷, 多次重复使用 -v 可以创建多个数据卷</p><h3 id="挂载一个主机目录作为数据卷"><a href="#挂载一个主机目录作为数据卷" class="headerlink" title="挂载一个主机目录作为数据卷"></a>挂载一个主机目录作为数据卷</h3><p><code>docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py</code></p><p>挂载主机的 <code>/src/webapp</code> 目录到容器的 <code>/opt/webapp</code> 目录</p><p>也可通过 <code>ro</code> 指定为只读</p><p><code>docker run -d -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py</code></p><p>这样, 容器内则无法修改挂载的数据</p><h3 id="挂载一个本地主机文件作为数据卷"><a href="#挂载一个本地主机文件作为数据卷" class="headerlink" title="挂载一个本地主机文件作为数据卷"></a>挂载一个本地主机文件作为数据卷</h3><p><code>docker run -rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash</code></p><p>这样就可以记录在容器输入过的历史命令</p><blockquote><p>  若直接挂在一个文件到容器, 使用文件编辑工具,  包括 <code>vi</code>  或者 <code>sed--in-place</code> 的时候, 可能会造成文件 inode 的改变, 从 docker 1.1.0 起, 会导致错误发生, 所以推荐的方式是直接挂载文件所在的目录</p></blockquote><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>如果需要在多个容器之间共享一些持续更新的数据, 最简单的方式是使用数据卷容器.</p><p>数据卷容器也是一个容器, 但是它的是专门用来提供数据卷供其它容器挂载</p><p>首先, 创建一个数据卷容器 dbdata, 并在其中创建一个数据卷挂载到 &#x2F;dbdata</p><p><code>docker run -it -v /dbdata --name dbdata ubuntu</code></p><p>然后在其它容器中使用 <code>--volumes-from</code> 来挂载 dbdata 容器中的数据卷</p><p>创建 db1 和 db2 两个容器, 并从 dbdata 容器挂载数据卷</p><p><code>docker run -it --volumes-from dbdata --name db1 ubuntu</code></p><p><code>docker run -itd --volumes-from dbdata --name db2 ubuntu</code></p><blockquote><p>  使用 <code>--volumes-from</code> 参数所挂载的数据卷的容器自身并不需要保持在运行状态</p><p>  如果删除了挂载的容器( 包裹 dbdata db1 db2), 数据卷并不会被删除</p><p>  如果要删除一个数据卷, 必须在删除最后一个还挂载着它的容器时显式的使用 <code>docker rm -v</code> 来指定同时删除关联的容器</p></blockquote><h3 id="利用数据卷容器来迁移数据"><a href="#利用数据卷容器来迁移数据" class="headerlink" title="利用数据卷容器来迁移数据"></a>利用数据卷容器来迁移数据</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p><code>docker run --volumes-from dbdata -v $(pwd):/backup --name worker ubuntu tar cvf /backup/backup.tar /dbdata</code></p><ul><li>首先使用 ubuntu 镜像创建了一个容器 worker</li><li>使用 <code>--volumes-from dbdata</code> 让 worker 容器挂载 dbdata 容器的数据卷</li><li>使用 <code>-v$(pwd):/backup</code> 来挂载本地的当前目录到 worker 容器的 &#x2F;backup</li><li>worker 启动后, 使用 <code>tar cvf /backup/backup.tar /dbdata</code> 将 &#x2F;dbdata 下内容备份为容器内的 &#x2F;backup&#x2F;backup.tar, 即宿主机当前目录下的 backup.tar</li></ul><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p>创建一个带有数据卷的容器 dbdata2 </p><p><code>docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</code></p><p>然后创建另一个新容器, 挂在 dbdata2 的容器, 并解压备份文件到所挂载的容器卷中</p><p><code>docker run --volumes-from dbdata2 -v $(pwd):/backup tar xvf /backup/backup.tar</code></p><h1 id="端口映射和容器互联"><a href="#端口映射和容器互联" class="headerlink" title="端口映射和容器互联"></a>端口映射和容器互联</h1><h2 id="从外部访问容器应用"><a href="#从外部访问容器应用" class="headerlink" title="从外部访问容器应用"></a>从外部访问容器应用</h2><p>通过 <code>-p</code> 或 <code>-P</code> 参数来指定端口映射</p><ul><li><code>-P</code> docker 会随机映射一个 49000 - 49900 的端口到内部容器开放的网络端口<br>-   <code>-p</code>  指定要映射的端口, 并且在指定的端口上只可以绑定一个容器, 支持的格式: <code>IP: HostPort: ContainerPort| IP: :ContainerPort | HostPort: ContainerPort</code></li></ul><h3 id="映射所有接口地址"><a href="#映射所有接口地址" class="headerlink" title="映射所有接口地址"></a>映射所有接口地址</h3><p>使用 <code>Host: Port: ContainerPort</code> 格式将本地的 5000 端口映射到容器的 5000 端口</p><p><code>docker run -d -p 5000:5000 training/webapp python app.py</code></p><h3 id="映射到指定地址的指定端口"><a href="#映射到指定地址的指定端口" class="headerlink" title="映射到指定地址的指定端口"></a>映射到指定地址的指定端口</h3><p>使用 <code>IP: HostPort: ContainerPort</code> 格式指定映射使用一个特定地址, 比如 localhost</p><p><code>docker run -d -p 127.0.0.1:5000:5000 training/webapp python addp.py</code></p><h3 id="映射到指定地址的任意端口"><a href="#映射到指定地址的任意端口" class="headerlink" title="映射到指定地址的任意端口"></a>映射到指定地址的任意端口</h3><p>使用 <code>IP: : ContainerPort</code> 绑定 localhost 的任意端口到容器的 5000 端口, 本地主机会自动分配一个端口</p><p><code>docker run -d -p 127.0.0.1::5000 training/webapp python web.py</code></p><h3 id="查看映射端口配置"><a href="#查看映射端口配置" class="headerlink" title="查看映射端口配置"></a>查看映射端口配置</h3><p>使用 docker port 命令来查看当前映射的端口配置, 也可以查看到绑定的地址</p><p><code>docker port ubuntu 5000</code></p><blockquote><p>  容器有自己的内部网络和 IP 地址, 使用 <code>docker inspect ContainerID</code> 可以获取容器的具体信息</p></blockquote><h2 id="互联机制实现便捷访问"><a href="#互联机制实现便捷访问" class="headerlink" title="互联机制实现便捷访问"></a>互联机制实现便捷访问</h2><p>容器的互联是一种让多个容器中应用进行快速交互的方式, 它会在源和接收器之间创建链接关系, 接收容器可以通过容器名快速访问到源容器, 而不用指定具体的 IP 地址</p><h3 id="自定义容器命名"><a href="#自定义容器命名" class="headerlink" title="自定义容器命名"></a>自定义容器命名</h3><p>连接系统根据容器的名称来执行, 因此首先要起一个好名字</p><p>使用 <code>--name</code> 可以为容器自定义命名</p><blockquote><p>  容器的名称是唯一的</p><p>  如果已经有一个名字了, 需要先删除之前创建的同名容器</p></blockquote><h3 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h3><p>使用 –link 参数可以让容器之间安全的进行交互</p><blockquote><p>  –link 参数的格式为 <code>--link name: alias</code> 其中 name  是要链接的容器的名称, alias 是这个链接的别名</p></blockquote><p>创建一个新的数据库容器</p><p><code>docker run -d --name db training/postgres</code></p><p>创建一个 web 容器, 并将它链接到 db 容器</p><p><code>docker run -d -P --name web --link db:db trainling/webapp python web.py</code></p><p>此时 db 容器和 web 容器建立互联关系</p><p>docker 通过两种方式为容器公开信息</p><ul><li>更新环境变量</li><li>更新 <code>/etc/hosts</code> 文件</li></ul><blockquote><p>  其中 DB_ 开头的环境变量是供容器链接 db 容器使用的, 前缀采用大写的链接别名</p><p>  除了环境变量之外, Docker 还添加 host 信息到父容器的 <code>/etc/hosts</code>文件</p></blockquote><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>Dockerfile 由一行行命令语句组成, 支持 <code>#</code> 开头的注释</p><p>一般而言 Dockfile 分为四部分:</p><ul><li>基础镜像信息</li><li>维护者信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ul><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指令的一般格式为 <code>INSTRUCTION arguments</code>, 指令包括 <code>FROM MAINTAINER RUN</code></p><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a><strong>FROM</strong></h4><ul><li>说明：指定该镜像的基础镜像</li><li>格式如：<code>FROM &lt;image&gt;</code>或 <code>FROM &lt;image&gt;:&lt;tag&gt;</code></li><li>示例：<code>FROM centos:7</code></li><li>注意：<code>FROM</code>一般出现在文件头，且每个镜像都需要有一个 <code>FROM</code>来指定基础镜像。</li></ul><h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a><strong>MAINTAINER</strong></h4><ul><li>说明：指定作者信息</li><li>格式如：<code>MAINTAINER &lt;name&gt;</code></li><li>示例：<code>MAINTAINER afreto &quot;&quot;</code></li></ul><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a><strong>RUN</strong></h4><ul><li>说明：在构建镜像时执行脚本</li><li>格式如：RUN <command>或RUN [“exec”, “par1”, “par2”], 后一个指令会被解析成 json 数组, 因此必须使用双引号 , 前者默认将在 shell终端中运行命令. 后者则使用 exec 执行, 不会启动 shell环境, 指定使用其它终端类型可以通过第二种方式实现, 如 RUN[“&#x2F;bin&#x2F;bash”,”-c”,”echo hello”]</li><li>示例：<code>RUN ls -l</code>（以详细信息方式列表当前目录下的文件，跟在 shell 终端运行一样）</li></ul><blockquote><p>  每条指令会在当前镜像的基础上执行指定命令, 并提交为新镜像</p><p>  命令过长可以使用 <code>\</code> 来换行</p></blockquote><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a><strong>CMD</strong></h4><ul><li>说明：用来指定启动容器时默认执行的命令.</li><li>格式:<ul><li><code>CMD[&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>, 使用 <code>exec</code> 执行, 是 <strong><u><em>推荐的方式</em></u></strong></li><li><code>CMD command param1 param2</code> 在 <code>/bin/sh</code> 中执行, 提供给需要交互的应用</li><li><code>CMD[&quot;param1&quot;, &quot;param2&quot;]</code> 提供给 <code>ENTRYPOINT</code> 的默认参数</li></ul></li><li>示例：<code>CMD [&quot;ls&quot;, &quot;-l&quot;]</code></li><li>注意：一个 Dockerfile 中只有一条 <code>CMD</code>，如果有多条只执行最后一条；在运行容器时如果用户指定了运行命令则 Dockerfile 中的 CMD 将被覆盖。</li></ul><h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><ul><li>说明: 用来指定生成镜像的元数据标签</li><li>格式: <code>LABEL&lt;key&gt;=&lt;value&gt;&lt;key&gt;=&lt;value&gt;...</code></li><li>示例: <code>LABEL version=&quot;1.0&quot;</code></li></ul><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a><strong>ENTRYPOINT</strong></h4><ul><li>说明：指定镜像的默认入口命令, 该入口命令会在启动容器时作为根命令执行</li><li>格式如：<code>ENTRYPOINT [&quot;exec&quot;, &quot;par1&quot;, &quot;par2&quot;]</code>、<code>ENTRYPOINT command par1 par2</code></li><li>示例：<code>ENTRYPOINT [&quot;catalina.sh&quot;, &quot;run&quot;]</code></li><li>注意：一个 Dockerfile 中只有一条 <code>ENTRYPOINT</code>，如果有多条只执行最后一条, 在运行时可以被 <code>--entrypoint</code> 参数覆盖. 如<code>docker run --entrypoint</code></li></ul><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a><strong>EXPOSE</strong></h4><ul><li>说明：让 Docker 暴露容器的端口号，供其他容器使用，在宿主机以外的网络中是无法使用的</li><li>格式如：<code>EXPOSE &lt;port&gt; ...</code></li><li>示例：<code>EXPOSE 8080</code></li><li>注意：<ul><li>该指令只起到声明作用, 并不会完成端口映射</li><li>在 Docker 中有两种暴露端口的概念，一种叫 <code>EXPOSE</code>隐式暴露，只供 Docker 服务内部使用；另一种叫 <code>PUBLISH</code>显式暴露，供外部网络使用，<code>PUBLISH</code>只是一个概念在 Dockerfile 中没有这个指令。</li><li><code>EXPOSE</code>只在 Dockerfile 中出现</li><li><code>PUBLISH</code>没有该指令而是通过 <code>docker run</code>命令的参数 <code>-p</code>、<code>-P</code>或在 <code>docker-compose</code>中的 <code>ports</code>来体现</li><li><code>-P</code>：大写是属于自动映射，将 Dockerfile 中 <code>EXPOSE</code>所暴露的所有端口分别映射到宿主机的随机端口，每次启动或重启容器时端口都可能有所不同</li><li><code>-p</code>：小写是属于固定映射，格式如：<code>-p 宿主端口:容器端口</code>，宿主端口和容器端口可以是纯数字也可以是一个范围，如：<code>-p 8060-8080:8060-8080</code>，意为将宿主机的 <code>8060</code>（含）到 <code>8080</code>（含）的端口映射到容器的 <code>8060</code>（含）到 <code>8080</code>（含）端口，需要注意的是在使用范围时，宿主端口个数应该与容器端口个数匹配；但上面这个例子可以写成：<code>-p 7060-7080:8060-8080</code>，这样宿主的端口就在 <code>7060-7080</code>范围内</li></ul></li></ul><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a><strong>ENV</strong></h4><ul><li><p>说明：指定环境变量，在 Dockerfile 文件中的后续代码中使用，在容器运行时也可以使用</p></li><li><p>格式如：<code>ENV &lt;key&gt; &lt;value&gt;</code></p></li><li><p>示例：<code>ENV tomcat_home /web/tomcat/</code></p><blockquote><p>  指令指定的环境变量在运行时可以被覆盖, 如</p><p>  <code>docker run --env &lt;key&gt;=&lt;value&gt;  IMAGE</code></p></blockquote></li></ul><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a><strong>ADD</strong></h4><ul><li>说明：复制指定的 <code>&lt;src&gt;</code> 路径下的内容到容器中 <code>&lt;dest&gt;</code>路径下(复制文件夹?)</li><li>格式如：<code>ADD &lt;src&gt; &lt;dest&gt;</code></li><li>示例：<code>ADD web.jar /web.jar</code></li><li>注意：复制指定的 <code>&lt;src&gt;</code>到容器中的 <code>&lt;dest&gt;</code>，<code>&lt;src&gt;</code>可以是 Dockerfile 所在目录的一个相对路径，也可以是一个 URL，也可以是一个 <code>tar</code>文件（<code>tar</code>文件将自动解压成文件目录）</li></ul><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a><strong>COPY</strong></h4><ul><li>说明：添加文件（夹）到容器</li><li>格式如：<code>COPY &lt;src&gt; &lt;dest&gt;</code></li><li>示例：<code>COPY web.jar /web.jar</code></li><li>注意：与 <code>ADD</code>功能相似，只是不能指定 URL，使用本地文件（夹）为源文件时，推荐使用 <code>COPY</code></li></ul><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a><strong>VOLUME</strong></h4><ul><li><p>说明：创建挂载点</p></li><li><p>格式如：<code>VOLUME [path]</code></p></li><li><p>示例：<code>VOLUME [&quot;/datas&quot;]</code></p></li><li><p>注意：</p><ul><li><p><code>VOLUME</code>在原理和概念上与 <code>EXPOSE</code>差不多，都是属于供容器与容器间使用</p></li><li><p>通过 <code>VOLUME</code>挂载的卷可以供其他容器使用</p></li><li><p>举例说明：</p><ul><li><p>创建一个 Dockerfile 来构建一个镜像，内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">FROM</span> centos<br>VOLUME <span class="hljs-selector-attr">[<span class="hljs-string">&quot;/web/images&quot;</span>, <span class="hljs-string">&quot;/web/files&quot;</span>]</span><br></code></pre></td></tr></table></figure></li><li><p>构建镜像</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">docker build -t <span class="hljs-string">&quot;zsl131/test01&quot;</span> .<br></code></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -d <span class="hljs-comment">--name test-root</span><br></code></pre></td></tr></table></figure></li><li><p>可以使用命令：<code>docker inspect test-root</code>来查看容器详细信息，在 <code>Mounts</code>部份可以看到两个挂载点：<code>/web/images</code>和 <code>/web/files</code></p></li><li><p>启动另一个容器来共用这两个挂载卷</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--name test-1 --volumes-from test-root centos</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>使用 <code>--volumes-from</code>来指定挂载点，这时容器 <code>test-root</code>和 <code>test-1</code>里面都分别有挂载卷 <code>/web/images</code>和 <code>/web/files</code>，可以启动任意多个容器使用 <code>--volumes-from</code>来共用这些挂载卷，这些容器可以来自不同的镜像。当任何一个容器中的挂载卷中的文件发生变化时其他容器挂载卷中的内容也随之改变。</p><p>容器 <code>test-root</code>即使已经停止也可以在启动其他容器时使用 <code>--volumes-from test-root</code>来挂载这些卷，只要 <code>test-root</code>不被删除，不过如果 <code>test-root</code>真被删除还可以使用 <code>--volumes-from test-1</code>，因为容器 <code>test-1</code>中还存在我们所需要的挂载卷，换句话说这些挂载卷永远存在直到所有使用这些挂载卷的容器都被删除。</p></li><li><p><code>VOLUME</code>与 <code>docker run</code>参数 <code>-v</code>是有区别的。<code>docker run -v /host/web/images:/web/images -v /host/web/files:/web/files:rw</code>是将容器内的 <code>/web/images</code>挂载到宿主机的 <code>/host/web/images</code>目录上；将容器内的 <code>/web/files</code>挂载到宿主机的 <code>/host/web/files</code>目录上，<code>rw</code>表示可读写。</p></li></ul></li></ul></li></ul><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a><strong>WORKDIR</strong></h4><ul><li>说明：设置工作目录</li><li>格式如：<code>WORKDIR /path</code></li><li>示例：<code>WORKDIR /web</code></li><li>注意：可以使用绝对路径，也可以使用相对路径，设置之后的所有操作都将在这个目录下完成</li></ul><blockquote><p>  <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>执行脚本的指令</p><ul><li>三个指令都是执行脚本</li><li><code>RUN</code>是在创建镜像是执行，即使用 <code>docker build</code>命令时执行，在一个 Dockerfile 里面可以有多个 <code>RUN</code></li><li><code>CMD</code>和 <code>ENTRYPOINT</code>是在运行容器时执行，即使用 <code>docker run</code>命令时执行，这两个指令在 Dockerfile 中都只有最行一条被执行</li><li><code>CMD</code>在使用 <code>docker run</code>时可以加参数将 Dockerfile 中的 <code>CMD</code>覆盖</li><li><code>ENTRYPOINT</code>在 Dockerfile 中出现后就一定会在 <code>docker run</code>时被执行，不必担心会被其他参数所覆盖。</li></ul><p>  <code>ADD</code>、<code>COPY</code>拷贝文件（夹）到容器</p><ul><li><code>ADD</code>拷贝文件（夹）时可以指定本地文件、远程 URL 地址，如果拷贝的是 <code>tar</code>文件时将会被自动解压成文件夹</li><li><code>COPY</code>拷贝文件（夹）时不可以指定远程 URL 地址，拷贝 <code>tar</code>文件也不会被自动解压成文件夹，在拷贝本地文件时建议使用 <code>COPY</code></li></ul></blockquote><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><ul><li>说明 指定运行容器时的用户名或 UID, 后续的 <code>RUN</code> 等指令也会使用指定的用户身份</li><li>格式 <code>USER daemon</code></li></ul><h4 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h4><ul><li>说明 指定一些镜像内使用的参数, 这些参数在执行 <code>docker build</code> 命令时以 <code>--build-arg&lt;varname&gt;=&lt;value&gt;</code>格式传入</li><li>格式 <code>ARG &lt;name&gt;[=&lt;deafult value&gt;]</code></li></ul><h2 id="创建镜像-1"><a href="#创建镜像-1" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>写完 Dockerfile 后, 使用 <code>docker build</code>创建镜像</p><ul><li><code>-f</code> 指定 Dockfile 路径</li><li><code>-t</code> 指定生成镜像的标签信息</li></ul><p>配置代理</p><p><code>docker build . --build-arg &quot;HTTP_PROXY=http://127.0.0.1:1087/&quot; --build-arg &quot;HTTPS_PROXY=http://127.0.0.1:1087/&quot;  --network host -t smtp:1</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go 配置文件</title>
    <link href="/2019/07/31/go-%E6%90%AD%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <url>/2019/07/31/go-%E6%90%AD%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>人生路窄酒杯宽</p><span id="more"></span><p>教程看的不少, 忘得更不少, 还是要写, 先搭个脚手架吧.</p><p>使用 <a href="https://github.com/spf13/viper">viper</a> 进行配置文件的管理, 相应环境的配置文件会覆盖基础配置文件, 相同的配置可以放在基础配置文件里面</p><p>项目路径</p><p>.<br>├── README.md<br>├── app<br>│   └── app<br>├── conf<br>│   ├── app.yaml<br>│   ├── conf.go<br>│   └── loc.yaml<br>├── doc<br>│   └── doc<br>├── go.mod<br>├── go.sum<br>├── logger<br>│   └── logger.go<br>├── main.go<br>├── models<br>│   └── models<br>├── router<br>│   └── router.go<br>└── tests<br>    └── test</p><h1 id="根据环境自动切换配置文件"><a href="#根据环境自动切换配置文件" class="headerlink" title="根据环境自动切换配置文件"></a>根据环境自动切换配置文件</h1><p>部署环境根据环境变量进行区分, so 只需要根据环境变量自动读取相应配置文件即可</p><p>no bb, show me the code</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initConfig</span><span class="hljs-params">()</span></span> (err <span class="hljs-type">error</span>) &#123;<br>configType := <span class="hljs-string">&quot;yml&quot;</span><br>defaultPath := <span class="hljs-string">&quot;./configs&quot;</span><br>v := viper.New()<br><span class="hljs-comment">// 从default中读取默认的配置</span><br>v.SetConfigName(<span class="hljs-string">&quot;default&quot;</span>)<br>v.AddConfigPath(defaultPath)<br>v.SetConfigType(configType)<br>err = v.ReadInConfig()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>configs := v.AllSettings()<br><span class="hljs-comment">// 将default中的配置全部以默认配置写入</span><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> configs &#123;<br>viper.SetDefault(k, v)<br>&#125;<br>env := os.Getenv(<span class="hljs-string">&quot;GO_ENV&quot;</span>)<br><span class="hljs-comment">// 根据配置的env读取相应的配置信息</span><br><span class="hljs-keyword">if</span> env != <span class="hljs-string">&quot;&quot;</span> &#123;<br>viper.SetConfigName(env)<br>viper.AddConfigPath(defaultPath)<br>viper.SetConfigType(configType)<br>err = viper.ReadInConfig()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125; <br><br></code></pre></td></tr></table></figure><h1 id="build-的时候带上配置文件吧…"><a href="#build-的时候带上配置文件吧…" class="headerlink" title="build 的时候带上配置文件吧…"></a>build 的时候带上配置文件吧…</h1><p>虽然带着配置文件一起部署也没什么问题, 但是作为一个深夜街头放飞理想的有志青年, 还是觉得要把配置文件在配置的时候一起打包成可执行文件才是正确的解决方法</p><p>使用 <a href="https://github.com/gobuffalo/packr/tree/master/v2">packr</a> </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> conf<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;github.com/gobuffalo/packr/v2&quot;</span><br><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//读取文件 使用 packr 方法可以在 build 时 将配置文件打包</span><br>box := packr.New(<span class="hljs-string">&quot;confBox&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>)<br>configType := <span class="hljs-string">&quot;yaml&quot;</span><br>defaultConfig, err := box.Find(<span class="hljs-string">&quot;app.yaml&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">//创建一个新实例  用来读取 app.yaml 初始文件 并保存为默认配置</span><br>v := viper.New()<br>v.SetConfigType(configType)<br>err = v.ReadConfig(bytes.NewReader(defaultConfig))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>configs := v.AllSettings()<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> configs &#123;<br>viper.SetDefault(k, v)<br>&#125;<br><br>env := os.Getenv(<span class="hljs-string">&quot;ENV&quot;</span>)<br><span class="hljs-keyword">if</span> env != <span class="hljs-string">&quot;&quot;</span> &#123;<br>envConfig, err := box.Find(env + <span class="hljs-string">&quot;.yaml&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>viper.SetConfigType(configType)<br>err = viper.ReadConfig(bytes.NewReader(envConfig))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="for-build"><a href="#for-build" class="headerlink" title="for build"></a>for build</h1><p>参考 <a href="https://github.com/gobuffalo/packr/tree/master/v2#building-a-binary">packr2</a> </p><ol><li>build 项目时先使用 <code>packr2</code> 命令打包配置文件</li><li>就正常 build</li><li>使用 <code>packr2 clean</code> 清除生成的文件</li></ol><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>   <span class="hljs-string">&quot;github.com/spf13/viper&quot;</span><br>   _ <span class="hljs-string">&quot;goFrame/conf&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   logLevel := viper.GetString(<span class="hljs-string">&quot;logLevel&quot;</span>)<br>   app := viper.GetString(<span class="hljs-string">&quot;app&quot;</span>)<br>   fmt.Println(logLevel)<br>   fmt.Println(app)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h1><ul><li>consul</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洒家的命令行</title>
    <link href="/2019/07/09/%E6%B4%92%E5%AE%B6%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <url>/2019/07/09/%E6%B4%92%E5%AE%B6%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 先装个 <a href="http://blog.afreto.tk/%E4%B8%80%E9%94%AE-oh-my-zh/">zsh</a></p><p> 再改个主题</p></blockquote><span id="more"></span><blockquote><p>忽略别名 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">\<span class="hljs-built_in">cat</span> <span class="hljs-comment"># 忽略叫 &quot;cat&quot; 的别名 - 具体解释: https://stackoverflow.com/a/16506263/22617</span></span><br><span class="hljs-meta">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> <span class="hljs-built_in">cat</span> <span class="hljs-comment"># 忽略函数和别名</span></span><br></code></pre></td></tr></table></figure></blockquote><h1 id="使用的插件"><a href="#使用的插件" class="headerlink" title="使用的插件"></a>使用的插件</h1><p><code>plugins=(git zsh-autosuggestions zsh-syntax-highlighting command-not-found z)</code></p><p>语法高亮, 自动提示, 再来一个 z 命令解放 cd </p><p>经常用的就这三个了</p><h1 id="工具集"><a href="#工具集" class="headerlink" title="工具集"></a>工具集</h1><h2 id="lolcat"><a href="#lolcat" class="headerlink" title="lolcat"></a>lolcat</h2><p>给命令行加个炫彩皮肤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">alias ll=&quot;ls -l | lolcat -n&quot;<br></code></pre></td></tr></table></figure><h2 id="bat-gt-cat"><a href="#bat-gt-cat" class="headerlink" title="bat &gt; cat"></a>bat &gt; cat</h2><p>替换一下默认的cat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">alias cat=&#x27;bat&#x27;<br></code></pre></td></tr></table></figure><h2 id="prettyping-gt-ping"><a href="#prettyping-gt-ping" class="headerlink" title="prettyping &gt; ping"></a>prettyping &gt; ping</h2><p>顾名思义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">alias ping=&#x27;prettyping --nolegend<br></code></pre></td></tr></table></figure><h2 id="tldr-真的比-man-好用太多了"><a href="#tldr-真的比-man-好用太多了" class="headerlink" title="tldr 真的比 man 好用太多了"></a>tldr 真的比 man 好用太多了</h2><p><code>tldr —help</code></p><h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>小白不敢布道, 但谁用谁知道</p><h2 id="尝试用-ag-替代-grep"><a href="#尝试用-ag-替代-grep" class="headerlink" title="尝试用 ag 替代 grep"></a>尝试用 ag 替代 grep</h2><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><h2 id="路径下文件数量"><a href="#路径下文件数量" class="headerlink" title="路径下文件数量"></a>路径下文件数量</h2><p><code>ll | grep &#39;^-&#39; | wc -l</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongo tips</title>
    <link href="/2019/07/08/mongo-tips/"/>
    <url>/2019/07/08/mongo-tips/</url>
    
    <content type="html"><![CDATA[<h1 id="crusor-不过期"><a href="#crusor-不过期" class="headerlink" title="crusor 不过期"></a>crusor 不过期</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">no_cursor_timeout=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h1 id="创建分片键"><a href="#创建分片键" class="headerlink" title="创建分片键"></a>创建分片键</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh.shardCollection( &quot;hula.relationship&quot;, &#123;&quot;fromUserId&quot;:1,&quot;toUserId&quot;:1&#125;)<br></code></pre></td></tr></table></figure><h1 id="golang-连接"><a href="#golang-连接" class="headerlink" title="golang 连接"></a>golang 连接</h1><p><code>src/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/topology/connection.go</code></p><p>106 行</p><p><code>go cfg.descCallback(c.desc)</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>mongo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim handbook</title>
    <link href="/2019/06/26/vim-%E7%9C%9F%E7%9A%84%E6%98%AF%E5%A4%AA%E5%A5%BD%E7%94%A8%E4%BA%86/"/>
    <url>/2019/06/26/vim-%E7%9C%9F%E7%9A%84%E6%98%AF%E5%A4%AA%E5%A5%BD%E7%94%A8%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>差那么点意思啊</p><span id="more"></span><p><a href="https://www.imooc.com/video/19453">参考教程</a><br><a href="https://yianwillis.github.io/vimcdoc/doc/usr_03.html#usr_03.txt">参考教程</a></p><h1 id="记个终端的"><a href="#记个终端的" class="headerlink" title="记个终端的"></a>记个终端的</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctrl + b 前移光标<br>ctrl + f 后移光标<br></code></pre></td></tr></table></figure><h1 id="词移动"><a href="#词移动" class="headerlink" title="词移动"></a>词移动</h1><h2 id="w"><a href="#w" class="headerlink" title="w"></a>w</h2><p>“w” 移动到下一个单词的词首</p><pre><code class="hljs">    This is a line with example text       x--&gt;--&gt;-&gt;-----------------&gt;       w  w  w    3w</code></pre><h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><p>“b” 命令向后移动到前一个词的词首</p><pre><code class="hljs">    This is a line with example text     &lt;----&lt;--&lt;-&lt;---------&lt;--x       b   b b    2b      b</code></pre><h2 id="e-ge"><a href="#e-ge" class="headerlink" title="e, ge"></a>e, ge</h2><p>“e” 命令可以移到下一个单词的词末<br>“ge” 则移动到前一个单词的末尾</p><pre><code class="hljs">    This is a line with example text        &lt;----&lt;----x----&gt;------------&gt;       2ge   ge     e       2e</code></pre><h1 id="移动到行首或行尾"><a href="#移动到行首或行尾" class="headerlink" title="移动到行首或行尾"></a>移动到行首或行尾</h1><p>“$” 命令把光标移动到当前行行尾</p><p>“^” 命令把光标移动到一行的第一个非空字符</p><p>“0” 命令 (零) 移到一行的第一个字符</p><h1 id="移动到一个指定的字符"><a href="#移动到一个指定的字符" class="headerlink" title="移动到一个指定的字符"></a>移动到一个指定的字符</h1><p>“f” 代表 “Find” (寻找)</p><p>“F” 命令用于向左查找</p><pre><code class="hljs">    To err is human.  To really foul up you need a computer.     ----------&gt;---------------&gt;        fh           fy    To err is human.  To really foul up you need a computer.               ---------------------&gt;                       3fl</code></pre><p>“t” 表示 “To” (到达)</p><p>“Tx” 是这个命令的反向版本</p><pre><code class="hljs">    To err is human.  To really foul up you need a computer.                &lt;------------  -------------&gt;                    Th              tn</code></pre><p>这四个命令可以通过 “;” 命令重复，”,” 命令则用于反向重复。无论用哪个命令，光标<br>永远都不会移出当前行，哪怕这两行是连续的一个句子。</p><h1 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h1><p>“%” 它能匹配一对括号</p><p>如果光标在 “(“ 上，它移动到对应的 “)” 上，反之，如果它在 “)”<br>上，它移动到 “(“ 上</p><pre><code class="hljs">                        %                     &lt;-----&gt;            if (a == (b * c) / d)                &lt;----------------&gt;                        %</code></pre><h1 id="移动到指定的行"><a href="#移动到指定的行" class="headerlink" title="移动到指定的行"></a>移动到指定的行</h1><p>“G” 命令加上一个计数前缀这个命令可以把你送到指定的行</p><pre><code class="hljs">   |   first line of a file   ^        |   text text text text    |        |   text text text text    |  gg    7G  |   text text text text    |        |   text text text text        |   text text text text        V   text text text text    |            text text text text    |  G            text text text text    |            last line of a file    V</code></pre><p>“%” 命令, “50％” 移动到文件的中间,”90%” 移到差不多结尾的位置</p><p>移动到视野之内的一行,”H” 表示 Home (头)，”M” 表示 Middle (中) 而 “L” 表示 Last (尾)</p><pre><code class="hljs">                    +---------------------------+            H --&gt;   | text sample text          |                    | sample text               |                    | text sample text          |                    | sample text               |            M --&gt;   | text sample text          |                    | sample text               |                    | text sample text          |                    | sample text               |            L --&gt;   | text sample text          |                    +---------------------------+</code></pre><h1 id="滚屏"><a href="#滚屏" class="headerlink" title="滚屏"></a>滚屏</h1><p>CTRL-U 命令向下滚动半屏</p><p>CTRL-D 命令把视窗向下移动半屏</p><pre><code class="hljs">                               +----------------+                                   | some text      |                                   | some text      |                                   | some text      |    +---------------+              | some text      |    | some text     |  CTRL-U  --&gt; |                |    |               |              | 123456         |    | 123456        |              +----------------+    | 7890          |    |               |              +----------------+    | example       |  CTRL-D --&gt;  | 7890           |    +---------------+              |                |                                   | example        |                                   | example        |                                   | example        |                                   | example        |                                   +----------------+</code></pre><p>每次滚一行的命令是 CTRL-E (上滚) 和 CTRL-Y (下滚)</p><p>“zz” 命令,光标所在行处于屏幕的中间</p><p>“zt” 把光标所在行移动到屏幕的顶部</p><p>“zb” 则移动到屏幕的底部</p><h1 id="简单查找"><a href="#简单查找" class="headerlink" title="简单查找"></a>简单查找</h1><p>查找命令是 “&#x2F;String”</p><p>要查找单词 “include”，使用如下命令: </p><pre><code class="hljs">    /include</code></pre><p>要查找下一个匹配可以使用 “n” 命令</p><p>查找光标后的第一个 #include: </p><pre><code class="hljs">    /#include</code></pre><p>“?” 命令功能与 “&#x2F;“ 的功能类似，但进行反方向查找: </p><pre><code class="hljs">    ?word</code></pre><p>“N” 命令在反方向重复前一次查找,因此，在 “&#x2F;“ 命令后执行 “N” 命令是反向查找，在<br>“?” 命令后执行 “N” 命令是正向查找。</p><h2 id="历-史-记-录"><a href="#历-史-记-录" class="headerlink" title="历 史 记 录"></a>历 史 记 录</h2><p>假设你执行了三个查找命令: </p><pre><code class="hljs">    /one    /two    /three</code></pre><p>现在，让我们输入 “&#x2F;“ 启动一次查找，但先不按下回车键。现在按 <Up> (上箭头)，Vim<br>把 “&#x2F;three” 放到你的命令行上。回车就会从当前位置查找 “three”。如果你不回车，继<br>续按 <Up>，Vim 转而显示 “&#x2F;two”，而下一次 <Up> 变成 “&#x2F;one”。<br>    你还可以用 <Down> 命令在历史记录中反向查找。</p><h2 id="在-文-本-中-查-找-一-个-单-词"><a href="#在-文-本-中-查-找-一-个-单-词" class="headerlink" title="在 文 本 中 查 找 一 个 单 词"></a>在 文 本 中 查 找 一 个 单 词</h2><p>把光标移到那个单词下面使用 “*” 命令。Vim 会取得光标上的<br>单词并把它作为被查找的字符串</p><p> “#” 命令在反向完成相同的功能。你可以在命令前加一个计数: “3*” 查找光标下单<br>词第三次出现的地方。</p><h2 id="查-找-整-个-单-词"><a href="#查-找-整-个-单-词" class="headerlink" title="查 找 整 个 单 词"></a>查 找 整 个 单 词</h2><p>找到以 “the” 结尾的单词</p><p>  <code>/the\&gt;</code></p><p>“&gt;“ 是一个特殊的记号，表示只匹配单词末尾。类似地，”&lt;“ 只匹配单词的开头。<br>这样，要匹配一个完整的单词 “the”，只需: </p><p><code>/\&lt;the\&gt;</code></p><h2 id="高-亮-匹-配"><a href="#高-亮-匹-配" class="headerlink" title="高 亮 匹 配"></a>高 亮 匹 配</h2><p>变量 “nr”。你可以把光标移到 “nr” 下用 “*” 命令，然后用 n 命令一个个遍历</p><p><code>:set hlsearch</code></p><p><code>:set nohlsearch</code></p><h1 id="使用标记"><a href="#使用标记" class="headerlink" title="使用标记"></a>使用标记</h1><p>当你用 “G” 命令跳到另一个地方，Vim 会记住你从什么地方跳过去的。这个位置成为一<br>个标记，要回到原来的地方，使用如下命令: </p><pre><code class="hljs">    ``</code></pre><h2 id="有-名-字-的-标-记"><a href="#有-名-字-的-标-记" class="headerlink" title="有 名 字 的 标 记"></a>有 名 字 的 标 记</h2><p>命令 “ma” 用 a 标记当前的光标位置</p><p>你可以在文本中使用 26 个标记 (a 到 z)</p><p>要跳到一个你定义的标记，可以使用命令 &#96;{mark}，这里 {mark} 是指定义标记的那<br>个字母。所以，移到标记 a 的命令是: </p><pre><code class="hljs">    `a</code></pre><p>取得所有的标记的列表<br>:marks</p><p>你会注意到有一些特殊的标记，包括:</p><pre><code class="hljs">    &#39;       跳转前的光标位置    &quot;       最后编辑的光标位置    [       最后修改的开始位置    ]       最后修改的结束位置</code></pre><h1 id="快-捷-键"><a href="#快-捷-键" class="headerlink" title="快 捷 键"></a>快 捷 键</h1><p>有些操作符 - 动作命令由于经常被使用，所以被设置为单字符命令:</p><pre><code class="hljs">    x  表示  dl  (删除当前光标下的字符)    X  表示  dh  (删除光标左边的字符)    D  表示  d$  (删除到行尾)    C  表示  c$  (修改到行尾)    s  表示  cl  (修改一个字符)    S  表示  cc  (修改一整行)</code></pre><h1 id="替-换-单-个-字-符"><a href="#替-换-单-个-字-符" class="headerlink" title="替 换 单 个 字 符"></a>替 换 单 个 字 符</h1><p>“r” 命令不是操作符。它只是等你输入一个字符然后用这个字符替换当前光标上的字符</p><p>你可以用 “cl” 命令或者 “s” 命令完成相同的功能，但 “r” 命令不需要使用 <Esc> 退<br>出插入状态:<br>        there is somerhing grong here<br>        rT           rt    rw</p><pre><code class="hljs">    There is something wrong here </code></pre><h1 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h1><p>用 “v” 命令启动可视模式</p><p>如果你想对整行做操作，可以使用 “V” 命令来启动可视模式</p><p>如果你在可视模式下选中了一些文字，然后你又发现你需要改变被选择的文字的另一端，<br>用 “o” 命令即可 (提示: “o” 表示 other end)，光标会移动到被选中文字的另一端，现<br>在你可以移动光标去改变选中文字的开始点了。再按 “o” 光标还会回到另一端。</p><p>当使用列块可视模式的时候，你会有四个角，”o” 只是把你移到对角上。而用 “O” 则能<br>移到同一行的另一个角上。</p><h1 id="daw"><a href="#daw" class="headerlink" title="daw"></a>daw</h1><p>“daw” 的 “d” 是删除操作符。”aw” 是一个文本对象。提示: “aw” 表示 “A Word” (一个<br>单词)，这样，”daw” 就是 “Delete A Word” (删除一个单词)。确切地说，该单词后的空<br>格字符也被删除掉了 (或者如果在行尾的话，单词前的空格字符)。</p><h1 id="编辑另一个文件"><a href="#编辑另一个文件" class="headerlink" title="编辑另一个文件"></a>编辑另一个文件</h1><p><code>:edit foo.txt</code></p><h1 id="文件列表"><a href="#文件列表" class="headerlink" title="文件列表"></a>文件列表</h1><p>你可以在启动 Vim 的时候指定一堆文件。例如:</p><pre><code class="hljs">    vim one.c two.c three.c</code></pre><p>这个命令启动 Vim 并告诉它你要编辑三个文件。Vim 只显示第一个。等你编辑完第一个<br>以后，用如下命令可以编辑第二个:</p><pre><code class="hljs">    :next</code></pre><p>如果你在当前文件中有未保存的修改，你会得到一个错误信息而无法编辑下一个文件。这<br>个问题与前一节执行 “:edit” 命令的问题相同。要放弃当前修改:</p><pre><code class="hljs">    :next!</code></pre><p>但大多数情况下，你需要保存当前文件再进入下一个。这里有一个特殊的命令:</p><pre><code class="hljs">    :wnext</code></pre><p>这相当于执行了两个命令:</p><pre><code class="hljs">    :write    :next</code></pre><h1 id="从一个文件跳到另一个文件"><a href="#从一个文件跳到另一个文件" class="headerlink" title="从一个文件跳到另一个文件"></a>从一个文件跳到另一个文件</h1><p>要在两个文件间快速跳转，按 CTRL-^ (美式英语键盘中 ^ 6 的上面)</p><h1 id="文件标记"><a href="#文件标记" class="headerlink" title="文件标记"></a>文件标记</h1><p>在  03.10  一节，我们介绍过使用 “mx” 命令在文件中增加标记，那只在一个文件中有<br>效。如果你编辑另一个文件并在那里加了标记，这些标记都是这个文件专用的。这样，每<br>个文件都有一个自己的标记集，并只能在该文件中使用。<br>    到此为止，我们都用小写字母的标记。实际上还可以使用大写字母标记，这种标记是<br>全局的，它们可以在任何文件中使用。例如，你在编辑一个文件 “foo.txt”。在文件的中<br>间 (50%) 并建立一个 J 标记 (J 表示甲):</p><pre><code class="hljs">    50%mJ</code></pre><p>现在编辑文件 “bar.txt” 并在文件的最后一行放一个标记 Y (Y 表示乙):</p><pre><code class="hljs">    GmY</code></pre><p>现在你可以使用 “<code>J&quot; 命令跳回到 foo.txt 的中间。或者在另一个文件中输入 &quot;</code>Y” 跳<br>回到 bar.txt 的末尾。</p><p>文件标记会被一直记住直到被重新定义。这样，你可以在一个文件中留下一个标记，然后<br>任意做一段时间的编辑，最后用这个标记跳回去。<br>    让文件标记符和对应的位置建立一些关系常常是很有用的。例如，用 H 表示头文件<br>(Head File)，M 表示 Makefile 而 C 表示 C 的代码文件。</p><p>要知道一个标记在什么地方，在 “:marks” 命令中加上标记名作为参数即可:</p><pre><code class="hljs">    :marks M</code></pre><p>你还可以带多个参数:</p><pre><code class="hljs">    :marks MCP</code></pre><p>别忘了你还可以 CTRL-O 和 CTRL-I 在整个跳转序列中前后跳转。</p><h1 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h1><h2 id="水平分割"><a href="#水平分割" class="headerlink" title="水平分割"></a>水平分割</h2><p><code>:split</code>命令把屏幕分解成两个窗口并把光标置于上面的窗口中:</p><pre><code class="hljs">    +----------------------------------+    |/* file one.c */                  |    |~                                 |    |~                                 |     one.c=============================     |/* file one.c */                  |    |~                                 |     one.c=============================     |                                  |    +----------------------------------+</code></pre><p>CTRL-W w 命令可以用于在窗口间跳转</p><h2 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h2><p>要在窗口左边打开新窗口，用这个命令:</p><pre><code class="hljs">    :vsplit</code></pre><p>或者</p><pre><code class="hljs">    :vsplit two.c</code></pre><p>这个命令的结果如下:</p><pre><code class="hljs">    +--------------------------------------+    |/* file two.c */   |/* file one.c */  |    |~                  |~                 |    |~                  |~                 |    |~                  |~                 |     two.c===============one.c=============     |                                      |    +--------------------------------------+</code></pre><p>还有一个 “vnew” 命令，用于打开一个垂直分割的新窗口。还有一种方法是:</p><pre><code class="hljs">    :vertical new</code></pre><h2 id="用另一个文件分割窗口"><a href="#用另一个文件分割窗口" class="headerlink" title="用另一个文件分割窗口"></a>用另一个文件分割窗口</h2><p><code>:split two.c</code></p><p>要打开窗口编辑一个新文件，可以使用如下命令:</p><pre><code class="hljs">    :new</code></pre><p>你可以重复使用 “:split” 和 “:new” 命令建立任意多的窗口。</p><h2 id="关-闭-窗-口"><a href="#关-闭-窗-口" class="headerlink" title="关 闭 窗 口"></a>关 闭 窗 口</h2><p>以下命令用于关闭窗口:</p><pre><code class="hljs">    :close</code></pre><h3 id="关-闭-所-有-其-它-窗-口"><a href="#关-闭-所-有-其-它-窗-口" class="headerlink" title="关 闭 所 有 其 它 窗 口"></a>关 闭 所 有 其 它 窗 口</h3><p>如果你已经打开了一整套窗口，但现在只想编辑其中一个，如下命令可以完成这个功能:</p><pre><code class="hljs">    :only</code></pre><h2 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h2><p>要扩大窗口:</p><pre><code class="hljs">    CTRL-W +</code></pre><p>要缩小窗口:</p><pre><code class="hljs">    CTRL-W -</code></pre><p>要把一个窗口设置为指定的高度，可以用这个命令:</p><pre><code class="hljs">    &#123;height&#125;CTRL-W _</code></pre><h2 id="窗-口-间-跳-转"><a href="#窗-口-间-跳-转" class="headerlink" title="窗 口 间 跳 转"></a>窗 口 间 跳 转</h2><pre><code class="hljs">    CTRL-W h        跳转到左边的窗口    CTRL-W j        跳转到下面的窗口    CTRL-W k        跳转到上面的窗口    CTRL-W l        跳转到右边的窗口    CTRL-W t        跳转到最顶上的窗口    CTRL-W b        跳转到最底下的窗口</code></pre><h2 id="移动窗口"><a href="#移动窗口" class="headerlink" title="移动窗口"></a>移动窗口</h2><pre><code class="hljs">    CTRL-W K    CTRL-W H        把当前窗口移到最左边    CTRL-W J        把当前窗口移到最下边    CTRL-W L        把当前窗口移到最右边</code></pre><h2 id="对所有窗口执行命令"><a href="#对所有窗口执行命令" class="headerlink" title="对所有窗口执行命令"></a>对所有窗口执行命令</h2><pre><code class="hljs">    :qall</code></pre><p>这表示 “quit all” (全部退出)。如果任何一个窗口没有存盘，Vim 都不会退出。同时光<br>标会自动跳到那个窗口，你可以用 “:write” 命令保存该文件或者 “:quit!” 放弃修改。</p><p>如果你知道有窗口被改了，而你想全部保存，则执行如下命令:</p><pre><code class="hljs">    :wall</code></pre><p>这表示 “write all” (全部保存)。但实际上，它只会保存修改过的文件。Vim 知道保存<br>一个没有修改过的文件是没有意义的。<br>    另外，还有 “:qall” 和 “wall” 的组合命令:</p><pre><code class="hljs">    :wqall</code></pre><p>这会保存所有修改过的文件并退出 Vim 。<br>   最后，下面的命令由于退出 Vim 并放弃所有修改:</p><pre><code class="hljs">    :qall!</code></pre><h1 id="用-vimdiff-显示文件差异"><a href="#用-vimdiff-显示文件差异" class="headerlink" title="用 vimdiff 显示文件差异"></a>用 vimdiff 显示文件差异</h1><pre><code class="hljs">在命令行中输入如下命令: (不是在 Vim 中)    vimdiff main.c~ main.c</code></pre><p>Vim 会用垂直分割的方式打开两个文件。你只能看到你修改过的地方和上下几行的地方。</p><pre><code class="hljs">     VV                   VV    +-----------------------------------------+    |+ +--123 lines: /* a|+ +--123 lines: /* a|  &lt;- 折叠    |  text              |  text              |    |  text              |  text              |    |  text              |  text              |    |  text              |  changed text      |  &lt;- 修改过的行    |  text              |  text              |    |  text              |  ------------------|  &lt;- 删除的行    |  text              |  text              |    |  text              |  text              |    |  text              |  text              |    |+ +--432 lines: text|+ +--432 lines: text|  &lt;- 折叠    |  ~                 |  ~                 |    |  ~                 |  ~                 |     main.c~==============main.c==============     |                                         |    +-----------------------------------------+</code></pre><h1 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h1><p><code>~</code> 改变当前字母</p><p>你手头有一个分节标题全部是小写的。你想把全部 “section” 改成大写的。这可以用<br>“gU” 操作符。先在第一列执行:</p><pre><code class="hljs">                         gUw    section header      ----&gt;      SECTION header</code></pre><p>“gu” 的作用正好相反:</p><pre><code class="hljs">                         guw    SECTION header      ----&gt;      section header</code></pre><p>你还可以用 “g<del>“ 来交换大小写。所有这些命令都是操作符，所以它们可以用于 “动作”<br>命令，文本对象和可视模式。<br>    要让一个操作符作用于当前行，可以执行这个操作符两次。例如，”d” 是删除操作<br>符，所以删除一行就是 “dd”。相似地，”gugu” 使整一行变成小写。这可以缩成 “guu”。<br>“gUgU” 可以缩成 “gUU” 而 “g</del>g~” 则是 “g~~”。例如:</p><pre><code class="hljs">                            g~~    Some GIRLS have Fun    ----&gt;   sOME girls HAVE fUN </code></pre><h1 id="单词替换"><a href="#单词替换" class="headerlink" title="单词替换"></a>单词替换</h1><p>替换命令可以在全文中用一个单词替换另一个单词:</p><pre><code class="hljs">    :%s/four/4/g</code></pre><p>“%” 范围前缀表示在所有行中执行替换。最后的 “g” 标记表示替换行中的所有匹配点。<br>    如果你有一个像 “thirtyfour” 这样的单词，上面的命令会出错。这种情况下，这<br>个单词会被替换成 “thirty4”。要解决这个问题，用 “&lt;“ 来指定匹配单词开头:</p><pre><code class="hljs">    :%s/\&lt;four/4/g</code></pre><p>显然，这样在处理 “fourteen” 的时候还是会出错。用 “&gt;“ 来解决这个问题:</p><pre><code class="hljs">    :%s/\&lt;four\&gt;/4/g</code></pre><p>如果你在编码，你可能只想替换注释中的 “four”，而保留代码中的。由于这很难指定，<br>可以在替换命令中加一个 “c” 标记，这样，Vim 会在每次替换前提示你:</p><pre><code class="hljs">    :%s/\&lt;four\&gt;/4/gc</code></pre><hr><table><thead><tr><th>上</th><th>下</th><th>左</th><th>右</th></tr></thead><tbody><tr><td>j</td><td>k</td><td>h</td><td>l</td></tr></tbody></table><table><thead><tr><th>命令</th><th>操作</th></tr></thead><tbody><tr><td>ddp</td><td>交换上下行</td></tr><tr><td>yyp</td><td>复制当前行</td></tr><tr><td>gd</td><td>跳到定义</td></tr><tr><td>&#x2F;def</td><td>跳到下个函数开始的地方</td></tr><tr><td>cf.</td><td>直接修改到下个 .</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><p>设置 syntax on</p><p>设置 行号 <code>set nu</code></p><p>设置自动缩进 <code>set autoindent</code> </p><p><code>:e!</code> 重新加载并且不保存文件</p><h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><h2 id="基于单词的移动"><a href="#基于单词的移动" class="headerlink" title="基于单词的移动"></a>基于单词的移动</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">w</span> (word) 下一个单词<br><span class="hljs-keyword">b</span> (back word) 移动回上一个单词<br></code></pre></td></tr></table></figure><h2 id="行移动"><a href="#行移动" class="headerlink" title="行移动"></a>行移动</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-number">18</span> 移动光标到 <span class="hljs-number">18</span> 行<br><span class="hljs-number">14</span>G 移动到 <span class="hljs-number">14</span> 行<br><span class="hljs-number">0</span> 移动光标到行首<br>^ 移动到第一个非空白字符<br>$ 移动光标到行尾<br>g_ 移动到行尾非空白字符<br></code></pre></td></tr></table></figure><h2 id="行间搜索移动"><a href="#行间搜索移动" class="headerlink" title="行间搜索移动"></a>行间搜索移动</h2><ul><li>使用 f{char} 可以移动到 char 字符上, t 移动到 char 前一个字符</li><li>使用 ; 或 , 继续搜索下一个或上一个</li></ul><h2 id="单词移动"><a href="#单词移动" class="headerlink" title="单词移动"></a>单词移动</h2><p>word: 以非空白符分割的单词</p><p>WORD: 以空白符分割的单词</p><ul><li>w&#x2F;W 移动到下一个 word&#x2F;WORD 开头, e&#x2F;E 下一个 word&#x2F;WORD 尾</li><li>b&#x2F;B 回到上一个 word&#x2F;WORD 开头</li></ul><h2 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h2><ul><li>gg 移动到文件开头</li><li>G 移动到文件结尾</li><li>ctrl + O 返回到刚刚移动的位置</li><li>H&#x2F;M&#x2F;L 跳转到屏幕的开头, 中间和 结尾</li><li>ctrl + f, ctrl+u 上下翻页,</li><li>zz 把屏幕放在中间</li></ul><h1 id="增"><a href="#增" class="headerlink" title="增"></a>增</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">a</span>/A (<span class="hljs-keyword">append</span>)<br>i/I (<span class="hljs-keyword">insert</span>)<br><span class="hljs-keyword">o</span>/O (<span class="hljs-keyword">open</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">line</span>)<br></code></pre></td></tr></table></figure><p>a 会在当前字母的后面插入</p><p>i 会在当前字母的前面插入</p><p>o 会打开一个新行</p><p>A 在行末添加</p><p>I 在行首插入</p><p>O 在当前行的上方插入</p><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">d (<span class="hljs-keyword">delete</span>)<br>dw (del word)<br>dd (del <span class="hljs-built_in">line</span>)<br><span class="hljs-keyword">x</span> (删除一个字符)<br>diw (del inner word) 删除不包含空格的单词<br>daw (del around word)<br>ctrl + h 删除上一个字符<br>ctrl + <span class="hljs-keyword">w</span> 删除上一个单词<br>ctrl + <span class="hljs-keyword">u</span> 删除当前行<br></code></pre></td></tr></table></figure><p>d,x 都可以搭配数字执行多次</p><ul><li><p>2dd&#x2F;2x 删除两行&#x2F;删除两个字符</p></li><li><p>dt] del to ], 删除到 ] 的所有内容</p></li><li><p>d0&#x2F;d&amp; 快速删除行首和行尾</p></li></ul><h1 id="改"><a href="#改" class="headerlink" title="改"></a>改</h1><ul><li>r  replace </li><li>c change</li><li>s substitue</li></ul><p>normal 模式下使用 r 替换一个字符, s 替换并进入插入模式</p><p>使用 c 配合文本对象, 可以进行快速修改</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">c</span> (<span class="hljs-keyword">change</span>)<br>ciw (<span class="hljs-keyword">change</span> inner word) 自动删除单词并进入插入模式<br>ct) (chang <span class="hljs-keyword">to</span> ) )??  修改到右括号<br>ci<span class="hljs-comment">&quot; 删除双引号的内容并进入插入模式</span><br></code></pre></td></tr></table></figure><h1 id="查"><a href="#查" class="headerlink" title="查"></a>查</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">f</span> <span class="hljs-keyword">find</span><br>fs 查找当前行一个出现的 s, 使用 ; 查找下一个<br>/keyword 查找单词<br>?keyword 向前查找<br><br></code></pre></td></tr></table></figure><p>使用 n&#x2F;N 跳转到下一个或者上一个匹配</p><h1 id="翻页-1"><a href="#翻页-1" class="headerlink" title="翻页"></a>翻页</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">ctrl + <span class="hljs-keyword">f</span> (forward)<br>ctrl + <span class="hljs-keyword">u</span> (upward)<br></code></pre></td></tr></table></figure><h1 id="粘贴复制"><a href="#粘贴复制" class="headerlink" title="粘贴复制"></a>粘贴复制</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">y</span> <span class="hljs-keyword">yank</span><br><span class="hljs-keyword">p</span> paste<br></code></pre></td></tr></table></figure><h1 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vs</span> <span class="hljs-keyword">vertical</span> <span class="hljs-keyword">split</span><br><span class="hljs-keyword">sp</span> <span class="hljs-keyword">split</span><br></code></pre></td></tr></table></figure><h1 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">% s/foo/bar/g<br></code></pre></td></tr></table></figure><h1 id="其它常用命令"><a href="#其它常用命令" class="headerlink" title="其它常用命令"></a>其它常用命令</h1><h2 id="设置行号"><a href="#设置行号" class="headerlink" title="设置行号"></a>设置行号</h2><p><code>:set nu</code></p><h1 id="visual-模式"><a href="#visual-模式" class="headerlink" title="visual 模式"></a>visual 模式</h1><p>一般用来块状选择文本</p><p>normal 模式下使用 v 进入 visual 模式</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">V  选中行<br>ctrl + v 进行块选择<br>viw 选中单词<br>vaw 选中单词带空格<br></code></pre></td></tr></table></figure><h1 id="快速切换-insert-normal-模式"><a href="#快速切换-insert-normal-模式" class="headerlink" title="快速切换 insert normal 模式"></a>快速切换 insert normal 模式</h1><ul><li>ctrl + c (可能会中断插件) 或者 ctrl + [</li><li>gi  快速跳转到最后一次编辑的地方并进入 insert 模式</li></ul><h1 id="多文件"><a href="#多文件" class="headerlink" title="多文件"></a>多文件</h1><h2 id="buffer-windows-tab"><a href="#buffer-windows-tab" class="headerlink" title="buffer windows tab"></a>buffer windows tab</h2><p>buffer 指打开的文件的一个内存缓冲区</p><p>窗口是 buffer 可视化的分割区</p><p>tab 是窗口的工作区</p><h1 id="文本对象操作方式"><a href="#文本对象操作方式" class="headerlink" title="文本对象操作方式"></a>文本对象操作方式</h1><p><code>[number] &lt;command&gt; [text object]</code><br>&#96;[次数] &lt;命令 (delete change yank)&gt;[文本对象 (单词 w, 句子 s, 段落 p)]</p><h1 id="复制粘贴和寄存器的使用"><a href="#复制粘贴和寄存器的使用" class="headerlink" title="复制粘贴和寄存器的使用"></a>复制粘贴和寄存器的使用</h1><p>Vim 里面剪切 (cut) 复制 (copy) 粘贴 (paste) 分别是 delete&#x2F;yank&#x2F;put</p><h2 id="normal-模式"><a href="#normal-模式" class="headerlink" title="normal 模式"></a>normal 模式</h2><p>normal 模式下复制粘贴分别使用 y(yank) 和 p(put), 剪贴 d 和 p</p><p>可以使用 v(visual) 命令选中要复制的地方, 然后使用 p 粘贴</p><p>配合文本对象使用:</br></p><ul><li>yiw 复制一个单词</li><li>yy 复制一行</li></ul><h2 id="insert-模式下的复制粘贴"><a href="#insert-模式下的复制粘贴" class="headerlink" title="insert 模式下的复制粘贴"></a>insert 模式下的复制粘贴</h2><p>很多人会使用鼠标进行选中, 然后使用 <code>ctrl + v</code> 进行粘贴, 这里和其它编辑器差不多, 但是粘贴代码的时候会有个坑</p><p>当设置了 autoindent, 粘贴代码时缩进会混乱</p><p>这个时候需要使用 <code>set: paste</code> 和 <code>set: nopaste</code> 解决</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>Vim 操作的是寄存器, 不是系统剪贴板</p><p>默认我们使用 d 删除 或者 y 复制的内容都会放到这个 寄存器</p><p>使用 x 删除一个字符放到寄存器, 然后使用 p 粘贴, 可以调换两个字符</p><h3 id="指定寄存器"><a href="#指定寄存器" class="headerlink" title="指定寄存器"></a>指定寄存器</h3><p>通过 “{register}” 前缀可以指定寄存器, 不指定则默认使用无名寄存器</p><p>比如, 使用 <code>&quot;ayiw</code> 复制一个单词到寄存器 a 中, <code>&quot;bdd</code> 删除当前行到寄存器 b 中</p><p>Vim 中 <code>&quot;&quot;</code> 表示无名寄存器, 缺省使用. <code>&quot;&quot;p</code> 等同于 <code>p</code></p><h3 id="其它一些寄存器"><a href="#其它一些寄存器" class="headerlink" title="其它一些寄存器"></a>其它一些寄存器</h3><p>复制专用寄存器 &#96;”0 使用 y 复制文本同时会被拷贝到复制寄存器 0</p><p>系统剪贴板 “+ 可以在复制前加上 “+ 复制到系统剪贴板, 可以使用系统剪贴板粘贴到其它地方</p><p><code>&quot;% 当前文件名, </code>“. 上次插入的文本</p><h2 id="设置系统剪贴板为默认无名寄存器"><a href="#设置系统剪贴板为默认无名寄存器" class="headerlink" title="设置系统剪贴板为默认无名寄存器"></a>设置系统剪贴板为默认无名寄存器</h2><p><code>set clipboard=unnamed</code></p><h1 id="vim-宏-macro"><a href="#vim-宏-macro" class="headerlink" title="vim 宏(macro)"></a>vim 宏(macro)</h1><h2 id="什么是宏"><a href="#什么是宏" class="headerlink" title="什么是宏"></a>什么是宏</h2><p>宏 是一系列命令的集合</p><p>我们可以使用宏 [录制] 一系列操作, 然后用于 [回放]</p><h2 id="使用宏"><a href="#使用宏" class="headerlink" title="使用宏"></a>使用宏</h2><p>宏的使用分为录制和回放</p><p>normal 模式下使用 q 来录制, 同时也是 q 来结束录制</p><p>使用 q{register} 选择要保存的寄存器, 把录制的命令保存其中</p><p>使用 @{register} 回放寄存器中保存的一系列命令</p><h1 id="vim-中的补全"><a href="#vim-中的补全" class="headerlink" title="vim 中的补全"></a>vim 中的补全</h1><p>使用 ctrl + n 和 ctrl + p 补全单词</p><p>使用 ctrl + x 和 ctrl + f 补全文件名</p><p>使用 ctrl + x  ctrl + o 补全代码, 需要开启文件类型检查, 安装插件</p><p>使用 ctrl + xf 补全文件路径 </p><h1 id="vim-换色"><a href="#vim-换色" class="headerlink" title="vim 换色"></a>vim 换色</h1><p>使用 :colorscheme 显示当前的主题配色, 默认 default</p><p>使用 :colorscheme &lt;ctrl + d&gt; 可以显示所有的配色</p><p>使用 :colorscheme 配色名可以修改配色</p><h1 id="vim-配置"><a href="#vim-配置" class="headerlink" title="vim 配置"></a>vim 配置</h1><p>配置文件 ~&#x2F;.vimrc, 常用设置</p><h1 id="idea-和-vscode-输入法自动切换"><a href="#idea-和-vscode-输入法自动切换" class="headerlink" title="idea 和 vscode 输入法自动切换"></a>idea 和 vscode 输入法自动切换</h1><h2 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h2><p>使用  <a href="https://github.com/hadix-lin/ideavim_extension">ideavim_extension</a> </p><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><p>使用 <a href="https://github.com/daipeihust/im-select#installation">im-select</a></p><p>配置 vscode , 在 setting.json 中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;vim.autoSwitchInputMethod.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vim.autoSwitchInputMethod.defaultIM&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.apple.keylayout.ABC&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vim.autoSwitchInputMethod.obtainIMCmd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/local/bin/im-select&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vim.autoSwitchInputMethod.switchIMCmd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/local/bin/im-select &#123;im&#125;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 咋用啊</title>
    <link href="/2019/06/15/git-%E5%92%8B%E7%94%A8%E5%95%8A/"/>
    <url>/2019/06/15/git-%E5%92%8B%E7%94%A8%E5%95%8A/</url>
    
    <content type="html"><![CDATA[<blockquote><p>日出江花红胜火</p></blockquote><span id="more"></span><h1 id="查看操作记录"><a href="#查看操作记录" class="headerlink" title="查看操作记录"></a>查看操作记录</h1><p><code>git reflog</code></p><h1 id="提交错分支"><a href="#提交错分支" class="headerlink" title="提交错分支"></a>提交错分支</h1><h2 id="方案-1"><a href="#方案-1" class="headerlink" title="方案 1"></a>方案 1</h2><p>先新建一个分支</p><p><code>git branch new_branch</code></p><p>取消提交的分支</p><p><code>git reset HEAD~ --hard</code></p><h2 id="方案-2"><a href="#方案-2" class="headerlink" title="方案 2"></a>方案 2</h2><p>先撤销最后一次提交, 但保留变更</p><p><code> git reset HEAD~ --soft</code></p><p><code>git stash</code></p><p>再切换到正确的分支, 提交代码</p><p><code>git checkout correct_branch</code></p><p><code>git stash pop</code></p><p><code>git add .</code></p><p><code>git commit -m &quot;msg&quot;</code></p><h2 id="方案-3"><a href="#方案-3" class="headerlink" title="方案 3"></a>方案 3</h2><p>cherry-pick</p><p>先切换到正确的分支</p><p><code> git  checkout correct_branch</code></p><p>cherry-pick 获取最新一条记录</p><p><code>git cherry-pick master</code></p><p>删除 master 错误的记录</p><p><code>git checkout master</code></p><p><code>git reset HEAD~ --hard</code></p><h2 id="账号密码"><a href="#账号密码" class="headerlink" title="账号密码"></a>账号密码</h2><h3 id="设置单独的-git-配置"><a href="#设置单独的-git-配置" class="headerlink" title="设置单独的 git 配置"></a>设置单独的 git 配置</h3><p>在 .git 路径下执行, 不要带 <code>—global</code>参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">git config user.name <span class="hljs-string">&quot;B&quot;</span></span><br><span class="hljs-meta">$ </span><span class="language-bash">git config user.email <span class="hljs-string">&quot;B@gmail.com&quot;</span></span><br></code></pre></td></tr></table></figure><h3 id="自动记录账号密码"><a href="#自动记录账号密码" class="headerlink" title="自动记录账号密码"></a>自动记录账号密码</h3><p><code> git config --global credential.helper store</code></p><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p><code> git remote add go_turorial git@gitee.com:afreto/go_tutorial.git</code></p><h2 id="拉取远程分支到本地分支"><a href="#拉取远程分支到本地分支" class="headerlink" title="拉取远程分支到本地分支"></a>拉取远程分支到本地分支</h2><p><code> git checkout --track origin/feat/5.01</code></p><p>不带 <code>—track</code> 参数只会拉取 index</p><p><code>git config --global branch.autosetuprebase always</code></p><h1 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h1><p><code>git reset --soft HEAD^ </code></p><p>HEAD^ 的意思是上一个版本，也可以写成 HEAD~1</p><p>如果你进行了 2 次 commit，想都撤回，可以使用 HEAD~2</p><p>–mixed<br>意思是：不删除工作空间改动代码，撤销 commit，并且撤销 git add . 操作<br>这个为默认参数，git reset –mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</p><p>–soft<br>不删除工作空间改动代码，撤销 commit，不撤销 git add . </p><p>–hard<br>删除工作空间改动代码，撤销 commit，撤销 git add . </p><p>注意完成这个操作后，就恢复到了上一次的 commit 状态。</p><h2 id="回滚到-index"><a href="#回滚到-index" class="headerlink" title="回滚到 index"></a>回滚到 index</h2><p><code>git reset HEAD@&#123;index&#125;</code></p><h2 id="添加改动到最后一次-commit"><a href="#添加改动到最后一次-commit" class="headerlink" title="添加改动到最后一次 commit"></a>添加改动到最后一次 commit</h2><blockquote><p>也可用来重新提交 commit message</p></blockquote><p><code>git commit --amend</code></p><h1 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>git config --global https.proxy https://127.0.0.1:1080<br>git config --global http.proxy &#x27;socks5://127.0.0.1:1080&#x27;<br><br>git config --global http.proxy http://127.0.0.1:1080<br>git config --global https.proxy &#x27;socks5://127.0.0.1:1080&#x27;<br><br>git config --global --unset http.proxy<br><br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure><h1 id="删除远程分支后-同步本地分支"><a href="#删除远程分支后-同步本地分支" class="headerlink" title="删除远程分支后, 同步本地分支"></a>删除远程分支后, 同步本地分支</h1><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p><code> git remote show origin</code></p><h2 id="从本地版本库中删除"><a href="#从本地版本库中删除" class="headerlink" title="从本地版本库中删除"></a>从本地版本库中删除</h2><p><code> git remote prune origin</code></p><h1 id="查看-git-个人代码量"><a href="#查看-git-个人代码量" class="headerlink" title="查看 git 个人代码量"></a>查看 git 个人代码量</h1><p><code>git log --author=&quot;username&quot; --pretty=tformat: --numstat | awk &#39;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#39; -</code></p><p>替换一下 username</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode 配置记录</title>
    <link href="/2019/06/13/vscode-%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2019/06/13/vscode-%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我微软大法好</p></blockquote><span id="more"></span><h1 id="python-自动补全不带括号问题"><a href="#python-自动补全不带括号问题" class="headerlink" title="python 自动补全不带括号问题"></a>python 自动补全不带括号问题</h1><p>打开设置, 搜索 addbrackets, 打勾</p><h1 id="vscode-远程开发"><a href="#vscode-远程开发" class="headerlink" title="vscode 远程开发"></a>vscode 远程开发</h1><ul><li>下载 <code>Remote Development</code> 插件, 安装完成后会有<img src="https://i.loli.net/2019/06/13/5d0263afcc5c060173.png">所示标签</li><li>配置 ssh 信息 使用公钥登录, <a href="https://linux.die.net/man/5/ssh_config">ssh配置指南</a><img src="https://i.loli.net/2019/06/13/5d0264092f0af85598.png"></li></ul><h1 id="配置-ssh-IdentityFile"><a href="#配置-ssh-IdentityFile" class="headerlink" title="配置 ssh IdentityFile"></a>配置 ssh IdentityFile</h1><p>使用  <code>ssh-copy-id</code> 命令配置 ssh 公钥</p><p><code>ssh-copy-id -i ~/.ssh/id_rsa.pub root@ip</code></p><h1 id="解决-SSH-公钥配置成功后不生效问题"><a href="#解决-SSH-公钥配置成功后不生效问题" class="headerlink" title="解决 SSH 公钥配置成功后不生效问题"></a>解决 SSH 公钥配置成功后不生效问题</h1><p><a href="https://blog.csdn.net/lisongjia123/article/details/78513244">参考教程</a></p><h2 id="查看系统安全日志-找找问题"><a href="#查看系统安全日志-找找问题" class="headerlink" title="查看系统安全日志, 找找问题"></a>查看系统安全日志, 找找问题</h2><p>查看系统安全日志</p><p><code>sudo cat /var/log/secure</code></p><p>sshd 即为 ssh 服务, 以及查看 Authentication refused 等关键字</p><h2 id="解决-Authentication-refused-问题"><a href="#解决-Authentication-refused-问题" class="headerlink" title="解决  Authentication refused 问题"></a>解决  Authentication refused 问题</h2><p>若是 authorized_keys 权限问题, 则修改权限</p><p><code>chmod 700 ~/.ssh/authorized_keys</code></p><h1 id="保持-ssh-连接"><a href="#保持-ssh-连接" class="headerlink" title="保持 ssh 连接"></a>保持 ssh 连接</h1><h2 id="通过-server-端配置"><a href="#通过-server-端配置" class="headerlink" title="通过 server 端配置"></a>通过 server 端配置</h2><p>通过修改服务端设置，以保证任何连接到服务器的客户端都能使用此设置</p><p>修改 <code>/etc/ssh/sshd_config</code> </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"># <span class="hljs-built_in">Server</span> 每隔 <span class="hljs-number">60</span> 秒发送一次请求给 <span class="hljs-built_in">Client</span>，然后 <span class="hljs-built_in">Client</span>响应，从而保持连接<br>ClientAliveInterval <span class="hljs-number">60</span><br># <span class="hljs-built_in">Server</span>发出请求后，客户端没有响应得次数达到 <span class="hljs-number">10</span>，就自动断开连接，正常情况下，<span class="hljs-built_in">Client</span>不会不响应<br>ClientAliveCountMax <span class="hljs-number">10</span><br>sudo restart ssh<br></code></pre></td></tr></table></figure><h2 id="通过-client-配置"><a href="#通过-client-配置" class="headerlink" title="通过 client 配置"></a>通过 client 配置</h2><p>通过修改客户端设置，以保证连接所有服务器都使用此设置。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo vi /etc/ssh/ssh_config  # 或 ~/.ssh/config<br><br>TCPKeepAlive=yes<br># <span class="hljs-built_in">Client</span>每隔 <span class="hljs-number">60</span> 秒发送一次请求给 <span class="hljs-built_in">Server</span>，然后 <span class="hljs-built_in">Server</span>响应，从而保持连接<br>ServerAliveInterval <span class="hljs-number">60</span><br># <span class="hljs-built_in">Client</span>发出请求后，服务器端没有响应得次数达到<span class="hljs-number">3</span>，就自动断开连接，正常情况下，<span class="hljs-built_in">Server</span> 不会不响应<br>ServerAliveCountMax <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>死小孩</title>
    <link href="/2019/04/12/%E6%AD%BB%E5%B0%8F%E5%AD%A9/"/>
    <url>/2019/04/12/%E6%AD%BB%E5%B0%8F%E5%AD%A9/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>如果只用一個字來形容的話 怂<br>如果再加一个字的话  贱<br>没什么追求<br>喜欢漂亮女孩子<br>但是没胆子追<br>羡慕人家过的光鲜亮丽<br>但懒得努力<br>有难过的事情 就想办法忘掉<br>自己说人生的理想就是混吃等死</p><p>因为太孤单了吧<br>又怕受伤害<br>本来他的生活圈子就很小<br>那些他在乎的人还一个一个的离开了他<br>诺诺轻描淡写地说着<br>每个人都是过一生<br>可人和人的一生是不一样的<br>有的人的人生跟辛巴达纵横七海似的<br>会遇到很多有趣的人<br>认识很多朋友<br>老了跟人吹牛都有很多故事可讲</p><p>对这样的人来说<br>每件往事都很珍贵<br>但也没那么珍贵<br>就像很多有钱的人<br>失去其中的几块固然可惜<br>不过还是有钱人<br>可这个家伙是个穷鬼<br>穷到没有几个他真正在乎的人<br>也没有几件他真正在乎的事<br>如果这些人这些事还OK<br>他就可以继续怂继续贱<br>可当这些人这些事不对了<br>他就慌了<br>慌着慌着就急了<br>急着急着就发起疯来<br>疯着疯着就变成这样了</p>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flask_jsonify</title>
    <link href="/2019/03/26/flask-jsonify/"/>
    <url>/2019/03/26/flask-jsonify/</url>
    
    <content type="html"><![CDATA[<p>flask 中自带的jsonify</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> jsonify <br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/getcurrentuser&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getcurrent_user</span>():<br>    <span class="hljs-keyword">return</span> jsonify(username=g.user.username,<br>                   email=g.user.email,<br>                   <span class="hljs-built_in">id</span>=g.user.<span class="hljs-built_in">id</span>)<br>                   <br>                   <br>This will send a JSON response like this to the browser: &#123;<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;admin@localhost&quot;</span>,<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">42</span><br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产者-消费者的协程</title>
    <link href="/2019/03/15/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E5%8D%8F%E7%A8%8B/"/>
    <url>/2019/03/15/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E5%8D%8F%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>继续站在别人的肩膀上</p></blockquote><span id="more"></span><p><a href="https://zhuanlan.zhihu.com/p/25228075">转载</a>, 单独把这部分拿出来 方便以后查找.</p><h1 id="生产者-消费者的协程"><a href="#生产者-消费者的协程" class="headerlink" title="生产者-消费者的协程"></a>生产者-消费者的协程</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>():<br>    status = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        n = <span class="hljs-keyword">yield</span> status<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我拿到了&#123;&#125;!&quot;</span>.<span class="hljs-built_in">format</span>(n))<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">3</span>:<br>            status = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>(<span class="hljs-params">consumer</span>):<br>    n = <span class="hljs-number">5</span><br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-comment"># yield给主程序返回消费者的状态</span><br>        <span class="hljs-keyword">yield</span> consumer.send(n)<br>        n -= <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    c = consumer()<br>    c.send(<span class="hljs-literal">None</span>)<br>    p = producer(c)<br>    <span class="hljs-keyword">for</span> status <span class="hljs-keyword">in</span> p:<br>        <span class="hljs-keyword">if</span> status == <span class="hljs-literal">False</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我只要3,4,5就行啦&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序结束&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">我拿到了<span class="hljs-number">5</span>!<br>我拿到了<span class="hljs-number">4</span>!<br>我拿到了<span class="hljs-number">3</span>!<br>我只要<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>就行啦<br>程序结束<br></code></pre></td></tr></table></figure><p>上面这个例子是典型的生产者－消费者问题，我们用协程的方式来实现它。首先从主程序中开始看，第一句 c &#x3D; consumer ()，因为 consumer 函数中存在 yield 语句，python 会把它当成一个 generator（生成器，注意：生成器和协程的概念区别很大，千万别混淆了两者），因此在运行这条语句后，python 并不会像执行函数一样，而是返回了一个 generator object。</p><p>再看第二条语句 c.send (None)，这条语句的作用是将 consumer（即变量 c，它是一个 generator）中的语句推进到第一个 yield 语句出现的位置，那么在例子中，consumer 中的 status &#x3D; True 和 while True: 都已经被执行了，程序停留在 n &#x3D; yield status 的位置（注意：此时这条语句还没有被执行），上面说的 send (None) 语句十分重要，如果漏写这一句，那么程序直接报错，这个 send () 方法看上去似乎挺神奇，等下再讲它的作用。</p><p>下面第三句 p &#x3D; producer (c)，这里则像上面一样定义了 producer 的生成器，注意的是这里我们传入了消费者的生成器，来让 producer 跟 consumer 通信。</p><p>第四句 for status in p:，这条语句会循环地运行 producer 和获取它 yield 回来的状态。</p><p>好了，进入正题，<strong>现在我们要让生产者发送 1,2,3,4,5 给消费者，消费者接受数字，返回状态给生产者，而我们的消费者只需要 3,4,5 就行了，当数字等于 3 时，会返回一个错误的状态。最终我们需要由主程序来监控生产者－消费者的过程状态，调度结束程序。</strong></p><p>现在程序流进入了 producer 里面，我们直接看 yield consumer.send (n)，生产者调用了消费者的 send () 方法，把 n 发送给 consumer（即 c），在 consumer 中的 n &#x3D; yield status，n 拿到的是消费者发送的数字，同时，consumer 用 yield 的方式把状态（status）返回给消费者，注意：这时 producer（即消费者）的 consumer.send () 调用返回的就是 consumer 中 yield 的 status！消费者马上将 status 返回给调度它的主程序，主程序获取状态，判断是否错误，若错误，则终止循环，结束程序。上面看起来有点绕，其实这里面 generator.send (n) 的作用是：把 n 发送 generator (生成器) 中 yield 的赋值语句中，同时返回 generator 中 yield 的变量（结果）。</p><p>于是程序便一直运作，直至 consumer 中获取的 n 的值变为 3！此时 consumer 把 status 变为 False，最后返回到主程序，主程序中断循环，程序结束。</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django-rest-framework 示例</title>
    <link href="/2019/01/10/django-rest-framework-%E7%A4%BA%E4%BE%8B/"/>
    <url>/2019/01/10/django-rest-framework-%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p> <a href="https://www.django-rest-framework.org/tutorial/2-requests-and-responses/">官网</a>的例子 马下来方便参考~</p></blockquote><span id="more"></span><h1 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = (<br>    ...<br>    <span class="hljs-string">&#x27;rest_framework&#x27;</span>,<br>    <span class="hljs-string">&#x27;snippets.apps.SnippetsConfig&#x27;</span>,<br>)<br></code></pre></td></tr></table></figure><h1 id="models"><a href="#models" class="headerlink" title="models"></a>models</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Snippet</span>(models.Model):<br>    created = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>)<br>    title = models.CharField(max_length=<span class="hljs-number">100</span>, blank=<span class="hljs-literal">True</span>, default=<span class="hljs-string">&#x27;&#x27;</span>)<br>    code = models.TextField()<br>    linenos = models.BooleanField(default=<span class="hljs-literal">False</span>)<br>    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="hljs-string">&#x27;python&#x27;</span>, max_length=<span class="hljs-number">100</span>)<br>    style = models.CharField(choices=STYLE_CHOICES, default=<span class="hljs-string">&#x27;friendly&#x27;</span>, max_length=<span class="hljs-number">100</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        ordering = (<span class="hljs-string">&#x27;created&#x27;</span>,)<br></code></pre></td></tr></table></figure><h1 id="serializers"><a href="#serializers" class="headerlink" title="serializers"></a>serializers</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User, Group<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserSerializer</span>(serializers.HyperlinkedModelSerializer):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = User<br>        fields = (<span class="hljs-string">&#x27;url&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;groups&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="Pulling-it-all-together"><a href="#Pulling-it-all-together" class="headerlink" title="Pulling it all together"></a>Pulling it all together</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<br><span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> api_view<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> snippets.models <span class="hljs-keyword">import</span> Snippet<br><span class="hljs-keyword">from</span> snippets.serializers <span class="hljs-keyword">import</span> SnippetSerializer<br><br><br><span class="hljs-meta">@api_view(<span class="hljs-params">[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">snippet_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    List all code snippets, or create a new snippet.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        snippets = Snippet.objects.<span class="hljs-built_in">all</span>()<br>        serializer = SnippetSerializer(snippets, many=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">return</span> Response(serializer.data)<br><br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        serializer = SnippetSerializer(data=request.data)<br>        <span class="hljs-keyword">if</span> serializer.is_valid():<br>            serializer.save()<br>            <span class="hljs-keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)<br>        <span class="hljs-keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api_view(<span class="hljs-params">[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;PUT&#x27;</span>, <span class="hljs-string">&#x27;DELETE&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">snippet_detail</span>(<span class="hljs-params">request, pk</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Retrieve, update or delete a code snippet.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        snippet = Snippet.objects.get(pk=pk)<br>    <span class="hljs-keyword">except</span> Snippet.DoesNotExist:<br>        <span class="hljs-keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        serializer = SnippetSerializer(snippet)<br>        <span class="hljs-keyword">return</span> Response(serializer.data)<br><br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;PUT&#x27;</span>:<br>        serializer = SnippetSerializer(snippet, data=request.data)<br>        <span class="hljs-keyword">if</span> serializer.is_valid():<br>            serializer.save()<br>            <span class="hljs-keyword">return</span> Response(serializer.data)<br>        <span class="hljs-keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)<br><br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;DELETE&#x27;</span>:<br>        snippet.delete()<br>        <span class="hljs-keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>取梦</title>
    <link href="/2019/01/08/%E5%8F%96%E6%A2%A6/"/>
    <url>/2019/01/08/%E5%8F%96%E6%A2%A6/</url>
    
    <content type="html"><![CDATA[<p>这波 有点腻啊….</p><span id="more"></span><p>长安有个昙姑娘，可以从梦里取东西出来。昙姑娘小小只，脸圆圆的，整天像是没睡醒。<br>将军跑去找这个姑娘：替我取十万兵马两个月用的粮草回来。<br>昙姑娘摊开手：十五万两。<br>将军：你知道骗我是啥下场吗？<br>昙姑娘想了想：但是有个事儿我得提前和您说……<br>将军：少废话，直接给我变出来。<br>副将在旁边听得冷汗都下来了，怎么听都觉得自家将军被骗了。</p><p>昙姑娘过了几天给将军府捎了口信：东西到了，午夜去城东空地自提。<br>到了城东，粮草垒得和小山一样高。<br>十五万两买十万兵马两个月的粮草，四舍五入一下和白送没区别。将军笑得像个一百三十斤的孩子，连夜跑去给昙姑娘送锦旗：谢谢谢谢，忧国忧民！</p><p>但只乐呵了一天，副将擦着汗来报：刚入库的粮草都不见了。</p><p>神特么把两个月的粮草给偷了？！搜！<br>城里正搜着人，昙姑娘屁颠屁颠跑来：那个，将军，有个事儿我没和你说……<br>将军：现在忙着呢，有啥事待会儿说。<br>昙姑娘：就是我变出来的东西只能保持十二个时辰。过时了就消失了。<br>将军静了静：……干啥不早说？<br>昙姑娘：你让我少废话。<br>将军：我特么让你少废话你就真的少废话了？！你怎么不直接装哑巴呢？！<br>昙姑娘：但这能怪我吗……<br>将军：能。</p><p>将军把昙姑娘抓了。不是那种很浪漫的金屋藏娇，直接抓，上了镣铐关进死牢。<br>昙姑娘说，我全额退款吧，顶多不做这单生意了……<br>将军：狗屁，那么简单？过一阵就开打了，你让我去哪搞粮草？<br>昙姑娘：这也不关我事儿啊……</p><p>没钱搞后勤的原因是上边不批，将军只好拿着少得可怜的那点钱去折腾歪门邪道。<br>副将有点看不过去：老大，当时确实是你让人姑娘别废话的，我拍良心说她在姑娘里面话绝对不算多了，你是没见过话多的……<br>将军：我现在就见到了。<br>副将：我是说咱要不把她一起带上去打仗，反正她从梦里变出来的东西可以存在一天，让她每天取新的不就行了？还能节省辎重兵呢。<br>将军一听，对啊。<br>昙姑娘：啊？那我工钱怎么算？<br>将军：你还敢要工钱？这都是谁的责任？<br>怎么算也不会是自己的责任啊。昙姑娘委屈。</p><p>昙姑娘的家族一直有这能力，就是能取回梦里梦见的东西。有时被当祥瑞有时被当灾祸，如今在长安立了个小门派，活的还算滋润。不过干这活不容易，要控制自己能梦见的东西，需要很长时间的锻炼，心态也要保持清静。<br>将军上来就要把昙姑娘这个掌门带走，昙姑娘不愿意。左拖右拖，到最后一天才跟着他上路。将军本来还美滋滋，结果过了一天，马车里的昙姑娘不见了。<br>大家反应过来了。这个昙姑娘也是昙姑娘从梦里取出来的，过一天就没了。</p><p>将军气疯了，杀回长安冲进府里把昙姑娘拽出来：你知道死字怎么写吗？<br>昙姑娘：知道的，一横，一撇……</p><p>将军直接把人绑着带走了。</p><p>昙姑娘从梦里取东西出来，要的是心静如水。跟着上战场显然满足不了这个条件。<br>昙姑娘：不行，梦不到粮草，梦见了几个桔子，你们要不今天就吃桔子凑合一下？<br>将军咬牙：明天两军交战，你再梦不到，我就拿你祭旗。</p><p>将军也是被逼的，没办法。自古将军不好当，尤其是年纪轻轻就身居高位的，每年古风小说里阵亡的将军连起来可以从长安排到洛阳。现在长安有人故意要逼他死，不给粮草就让他出战，他是没办法了，否则绝不会来为难一个小姑娘。<br>第二天要冲锋了，昙姑娘没有被祭旗。将军把她放了：算了，你滚吧，直接往关内逃，以后别人问起你认不认识我，你就说不认识，免得惹麻烦。<br>昙姑娘毫不犹豫，扭头走了。</p><p>她走了不久，远处身后就打了起来。</p><p>昙姑娘和将军都忧心忡忡的，昙姑娘觉得将军其实人不坏所以忧心，将军是担心昙姑娘那副傻样走不快。<br>打了半天，战况僵持。就在这时候，昙姑娘又屁颠屁颠回来了。<br>昙姑娘：我半路困了就睡了一会儿，梦到个东西，想着你可能用得着。<br>将军：梦到啥啊？<br>昙姑娘：白旗……<br>将军：闭嘴，我怎么就没把你杀了祭旗。<br>昙姑娘只好闭嘴。敌方的鼓声响了，眼看又要开打，昙姑娘拉住将军：那个……<br>将军：行了你快跑吧，我们要冲了。认识你算我倒霉。<br>昙姑娘站原地，看将士们跑远了。</p><p>两边眼看要开打，突然往敌阵那边刮起一阵黑色沙尘风，持续地刮，不停地刮。将军他们目瞪口呆看着对方自乱阵脚，撤了。<br>昙姑娘气喘吁吁跟上：你总要让我把话说完吧，我梦见了旗子还有风，风也是可以取出来的啊。</p><p>回了长安，将军成了英雄，想整他的人也安静了。<br>将军现在唯一的烦恼是新收到的账单，昙姑娘寄来的，总共几十万两的账单。<br>他只好去找昙姑娘：你这价钱怎么算出来的？<br>昙姑娘：你知道赖账的赖怎么写吗？一横，一竖……<br>将军小气地给了个首付：就此别过！</p><p>结果七夕前，他又去找昙姑娘帮忙。<br>七夕灯会城里的大人物都会携家眷聚集一堂，将军单身，每年都要被催婚。<br>将军：变个女的给我，我带去应付一下。</p><p>当夜，轿子到了将军府门口。将军一掀帘子，里面坐着的是将军自己。<br>昙姑娘跟在轿子后面：梦不到好看的姑娘，就梦了个你，你让他代替你去就行了。<br>将军想想，也行。</p><p>于是假将军去了灯会。将军忽然问昙姑娘：你怎么会梦见我的？<br>昙姑娘：少废话。</p><p>——《取梦》</p>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go学习笔记(基础篇)</title>
    <link href="/2019/01/04/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9F%BA%E7%A1%80%E7%AF%87)/"/>
    <url>/2019/01/04/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9F%BA%E7%A1%80%E7%AF%87)/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 我们一起学猫叫 一起喵喵喵喵喵~</p></blockquote><span id="more"></span><p>[[TOC]]</p><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>常量的定义格式：<code>const identifier [type] = value</code></p><ul><li>显式类型定义： <code>const b string = &quot;abc&quot;</code></li><li>隐式类型定义： <code>const b = &quot;abc&quot;</code></li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>使用 <code>var</code> 关键字：<code>var identifier type</code></p><h2 id="整数的类型"><a href="#整数的类型" class="headerlink" title="整数的类型"></a>整数的类型</h2><p><img src="https://i.loli.net/2019/03/28/5c9ceaa99347d.png" alt="屏幕快照 2019-03-28 23.39.02.png"><br><img src="https://i.loli.net/2019/03/28/5c9ceb13eed47.png" alt="屏幕快照 2019-03-28 23.40.52.png"></p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p><img src="https://i.loli.net/2019/03/28/5c9cebd84d9c1.png" alt="屏幕快照 2019-03-28 23.44.11.png"></p><blockquote><p>通常情况下应该使用 float64, 因为它比 float32 更精确</p></blockquote><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><blockquote><p><strong>golang 中字符串是不可变的</strong></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">s1 := <span class="hljs-string">&quot;hello killy&quot;</span><br>s1[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;y&quot;</span> <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} --><p>字符串的表示</p><ul><li>双引号</li><li>反引号: 以字符串的形式原生输出(python 中的 <code>r&#39;hello kitty&#39;</code>)</li></ul><h2 id="基本数据类型默认值"><a href="#基本数据类型默认值" class="headerlink" title="基本数据类型默认值"></a>基本数据类型默认值</h2><p><img src="https://i.loli.net/2019/03/29/5c9cef8acf38b.png" alt="屏幕快照 2019-03-29 00.00.00.png"></p><h1 id="基本数据类型的转换"><a href="#基本数据类型的转换" class="headerlink" title="基本数据类型的转换"></a>基本数据类型的转换</h1><p>Go 在不同的类型之间赋值时需要显示的转换. 即 Golang 中数据类型不能自动转换.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> i <span class="hljs-type">int32</span> = <span class="hljs-number">100</span><br><span class="hljs-keyword">var</span> n1 <span class="hljs-type">float32</span> = <span class="hljs-type">float32</span>(i)<br></code></pre></td></tr></table></figure><p>数据转换中若结果溢出, 编译时不会报错, 只是转换的结果会按照溢出处理.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> num1 <span class="hljs-type">int64</span> = <span class="hljs-number">9999999</span><br><span class="hljs-keyword">var</span> num2 <span class="hljs-type">int8</span> = <span class="hljs-type">int8</span>(num1)<br><span class="hljs-comment">// num2 = 63 </span><br></code></pre></td></tr></table></figure><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><ul><li>保持 package 名字和目录一致.</li><li>变量名, 函数名, 常量名采用驼峰法命名</li><li>若首字母大写, 贼可以被其它的包访问, 若小写则只能在本包中使用.</li></ul><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> intP *<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> i <span class="hljs-type">int</span> = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> ptr *<span class="hljs-type">int</span> = &amp;i<br><span class="hljs-comment">// ptr 是一个指针变量</span><br><span class="hljs-comment">// ptr 的类型是 *int</span><br><span class="hljs-comment">// ptr 本身的值是 &amp;i</span><br></code></pre></td></tr></table></figure><h1 id="源码-反码-补码"><a href="#源码-反码-补码" class="headerlink" title="源码, 反码, 补码"></a>源码, 反码, 补码</h1><p><img src="https://i.loli.net/2019/03/29/5c9cf68b10f95.png" alt="屏幕快照 2019-03-29 00.29.53.png"></p><h1 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h1><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> condition1 &#123;<br>    <span class="hljs-comment">// do something    </span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> condition2 &#123;<br>    <span class="hljs-comment">// do something else    </span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// catch-all or default</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常用例子"><a href="#常用例子" class="headerlink" title="常用例子"></a>常用例子</h3><p>判断一个字符串是否为空：</p><ul><li><code>if str == &quot;&quot; &#123; ... &#125;</code></li><li><code>if len(str) == 0 &#123;...&#125;</code></li></ul><p>函数 <code>Abs()</code> 用于返回一个整型数字的绝对值:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Abs</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> -x<br>    &#125;<br>    <span class="hljs-keyword">return</span> x    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试多返回值函数的错误"><a href="#测试多返回值函数的错误" class="headerlink" title="测试多返回值函数的错误"></a>测试多返回值函数的错误</h2><p><a href="https://go.fdos.me/05.2.html">参考教程</a></p><h2 id="swich"><a href="#swich" class="headerlink" title="swich"></a>swich</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> var1 &#123;<br>    <span class="hljs-keyword">case</span> val1:<br>        ...<br>    <span class="hljs-keyword">case</span> val2:<br>        ...<br>    <span class="hljs-keyword">default</span>:<br>        ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for结构"><a href="#for结构" class="headerlink" title="for结构"></a>for结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> 初始化语句; 条件语句; 修饰语句 &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="Break-与-continue"><a href="#Break-与-continue" class="headerlink" title="Break 与 continue"></a>Break 与 continue</h2><p><a href="https://go.fdos.me/05.5.html">Break 与 continue</a></p><h2 id="标签与-goto"><a href="#标签与-goto" class="headerlink" title="标签与 goto"></a>标签与 goto</h2><p><a href="https://go.fdos.me/05.6.html">标签与 goto</a></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="传递变长参数"><a href="#传递变长参数" class="headerlink" title="传递变长参数"></a>传递变长参数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myFunc</span><span class="hljs-params">(a, b, arg ...<span class="hljs-type">int</span>)</span></span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>示例函数和调用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(prefix <span class="hljs-type">string</span>, who ...<span class="hljs-type">string</span>)</span></span><br>Greeting(<span class="hljs-string">&quot;hello:&quot;</span>, <span class="hljs-string">&quot;Joe&quot;</span>, <span class="hljs-string">&quot;Anna&quot;</span>, <span class="hljs-string">&quot;Eileen&quot;</span>)<br></code></pre></td></tr></table></figure><p>在 Greeting 函数中，变量 <code>who</code> 的值为 <code>[]string&#123;&quot;Joe&quot;, &quot;Anna&quot;, &quot;Eileen&quot;&#125;</code></p><h2 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    callback(<span class="hljs-number">1</span>, Add)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Add</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;The sum of %d and %d is: %d\n&quot;</span>, a, b, a+b)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callback</span><span class="hljs-params">(y <span class="hljs-type">int</span>, f <span class="hljs-keyword">func</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>) &#123;<br>    f(y, <span class="hljs-number">2</span>) <span class="hljs-comment">// this becomes Add(1, 2)</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用闭包调试"><a href="#使用闭包调试" class="headerlink" title="使用闭包调试"></a>使用闭包调试</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">where := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    _, file, line, _ := runtime.Caller(<span class="hljs-number">1</span>)<br>    log.Printf(<span class="hljs-string">&quot;%s:%d&quot;</span>, file, line)<br>&#125;<br>where()<br><span class="hljs-comment">// some code</span><br>where()<br></code></pre></td></tr></table></figure><h2 id="通过内存缓存提升性能"><a href="#通过内存缓存提升性能" class="headerlink" title="通过内存缓存提升性能"></a>通过内存缓存提升性能</h2><p>牺牲空间换时间, 示例 <code> fibonacci_memoization.go</code></p><h1 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>一个切片在未初始化之前默认为 nil，长度为 0。</p><p>切片的初始化格式是：<code>var slice1 []type = arr1[start:end]</code>。</p><h2 id="使用-make-创建去切片"><a href="#使用-make-创建去切片" class="headerlink" title="使用 make() 创建去切片"></a>使用 <code>make()</code> 创建去切片</h2><p><code>func make([]T, len, cap)</code>，其中 cap 是可选参数。</p><p>所以下面两种方法可以生成相同的切片:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>)<br><span class="hljs-built_in">new</span>([<span class="hljs-number">100</span>]<span class="hljs-type">int</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">50</span>]<br></code></pre></td></tr></table></figure><h2 id="new-和-make-的区别"><a href="#new-和-make-的区别" class="headerlink" title="new() 和 make() 的区别"></a><code>new()</code> 和 <code>make()</code> 的区别</h2><ul><li>new(T) 为每个新的类型 T 分配一片内存，初始化为 0 并且返回类型为 * T 的内存地址：这种方法 <strong>返回一个指向类型为 T，值为 0 的地址的指针</strong>，它适用于值类型如数组和结构体（参见第 10 章）；它相当于 <code>&amp;T&#123;&#125;</code>。</li><li>make(T) <strong>返回一个类型为 T 的初始值</strong>，它只适用于 3 种内建的引用类型：切片、map 和 channel（参见第 8 章，第 13 章）。</li></ul><h2 id="bytes-包"><a href="#bytes-包" class="headerlink" title="bytes 包"></a><code>bytes</code> 包</h2><h2 id="For-range-结构"><a href="#For-range-结构" class="headerlink" title="For-range 结构"></a><code>For-range</code> 结构</h2><p>这种构建方法可以应用于数组和切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> ix, value := <span class="hljs-keyword">range</span> slice1 &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="切片重组-reslice"><a href="#切片重组-reslice" class="headerlink" title="切片重组(reslice)"></a>切片重组(<code>reslice</code>)</h2><p>改变切片长度的过程称之为切片重组<code> reslicing</code>，做法如下：<code>slice1 = slice1[0:end]</code>，其中 end 是新的末尾索引（即长度)</p><p><a href="https://go.fdos.me/07.5.html">参考示例</a></p><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="声明、初始化和-make"><a href="#声明、初始化和-make" class="headerlink" title="声明、初始化和 make"></a>声明、初始化和 make</h2><p>map 是引用类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> map1 <span class="hljs-keyword">map</span>[keytype]valuetype<br><br><span class="hljs-keyword">var</span> map1 <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p>未初始化的 map 的值是 nil</p><p><code>var map1 = make(map[keytype]valuetype)</code></p><p>不要用 <code>new</code> 构造 Map</p><h2 id="测试键值是否存在及删除元素"><a href="#测试键值是否存在及删除元素" class="headerlink" title="测试键值是否存在及删除元素"></a>测试键值是否存在及删除元素</h2><h3 id="判断-key-是否存在"><a href="#判断-key-是否存在" class="headerlink" title="判断 key 是否存在"></a>判断 key 是否存在</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">_, ok := map1[key1] <span class="hljs-comment">// 如果key1存在则ok == true，否则ok为false</span><br></code></pre></td></tr></table></figure><p>或者和 if 混合使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> _, ok := map1[key1]; ok &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除-key"><a href="#删除-key" class="headerlink" title="删除 key"></a>删除 key</h4><p><code>delete(map1, key1)</code></p><p>key 不存在, 不会产生错误.</p><h2 id="For-range"><a href="#For-range" class="headerlink" title="For-range"></a>For-range</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> map1 &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="map-类型的切片"><a href="#map-类型的切片" class="headerlink" title="map 类型的切片"></a>map 类型的切片</h2><p>想获取一个 map 类型的切片,  必须使用两次 <code>make()</code>, 第一次分配切片, 第二次分配切片中每个 map 元素, <a href="https://go.fdos.me/08.4.html">示例</a></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><a href="https://go.fdos.me/08.5.html">代码示例</a></p><h2 id="键值对调"><a href="#键值对调" class="headerlink" title="键值对调"></a>键值对调</h2><p><a href="https://go.fdos.me/08.6.html">代码示例</a></p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><blockquote><p>GFW 牛逼 … </p><p>有些方法得研究研究</p></blockquote><h1 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h1><p>init 是一类非常特殊的函数, 不能够被人为调用, 会在包初始化后自动执行, 优先级高于 main.</p><h1 id="结构和方法"><a href="#结构和方法" class="headerlink" title="结构和方法"></a>结构和方法</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> identifier <span class="hljs-keyword">struct</span> &#123;<br>    field1 type1<br>    field2 type2<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new()"></a>new()</h3><p><code>t := new(T)</code>，变量 <code>t</code> 是一个指向 <code>T</code>的指针，此时结构体字段的值是它们所属类型的零值</p><h2 id="工厂方法创建结构体实例"><a href="#工厂方法创建结构体实例" class="headerlink" title="工厂方法创建结构体实例"></a>工厂方法创建结构体实例</h2><p>按惯例，工厂的名字以 new 或 New 开头.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> File <span class="hljs-keyword">struct</span> &#123;<br>    fd      <span class="hljs-type">int</span>     <span class="hljs-comment">// 文件描述符</span><br>    name    <span class="hljs-type">string</span>  <span class="hljs-comment">// 文件名</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个结构体类型对应的工厂方法，它返回一个指向结构体实例的指针：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewFile</span><span class="hljs-params">(fd <span class="hljs-type">int</span>, name <span class="hljs-type">string</span>)</span></span> *File &#123;<br>    <span class="hljs-keyword">if</span> fd &lt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> &amp;File&#123;fd, name&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后这样调用它：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">f := NewFile(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;./test.txt&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="强制使用工厂方法"><a href="#强制使用工厂方法" class="headerlink" title="强制使用工厂方法"></a>强制使用工厂方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> matrix truct &#123;<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMatrix</span><span class="hljs-params">(params)</span></span> *matrix &#123;<br>    m := <span class="hljs-built_in">new</span>(matrix) <span class="hljs-comment">// 初始化 m</span><br>    <span class="hljs-keyword">return</span> m<br>&#125;<br></code></pre></td></tr></table></figure><p>在其他包里使用工厂方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;matrix&quot;</span><br>...<br>wrong := <span class="hljs-built_in">new</span>(matrix.matrix)     <span class="hljs-comment">// 编译失败（matrix 是私有的）</span><br>right := matrix.NewMatrix(...)  <span class="hljs-comment">// 实例化 matrix 的唯一方式</span><br></code></pre></td></tr></table></figure><h2 id="带标签的结构体"><a href="#带标签的结构体" class="headerlink" title="带标签的结构体"></a>带标签的结构体</h2><blockquote><p>略</p></blockquote><h2 id="匿名字段和内嵌结构体"><a href="#匿名字段和内嵌结构体" class="headerlink" title="匿名字段和内嵌结构体"></a>匿名字段和内嵌结构体</h2><p>结构体可以包含一个或多个 <strong>匿名（或内嵌）字段</strong>，即这些字段没有显式的名字，只有字段的类型是必须的，此时类型就是字段的名字。匿名字段本身可以是一个结构体类型，即 <strong>结构体可以包含内嵌结构体</strong></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>定义方法的一般格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(recv receiver_type)</span></span> methodName(parameter_list) (return_value_list) &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>类型和作用在它上面定义的方法必须在同一个包里定义，这就是为什么不能在 int、float 或类似这些的类型上定义方法</p><h3 id="函数和方法的区别"><a href="#函数和方法的区别" class="headerlink" title="函数和方法的区别"></a>函数和方法的区别</h3><p>函数将变量作为参数：<strong>Function1(recv)</strong></p><p>方法在变量上被调用：<strong>recv.Method1()</strong></p><h3 id="指针或值作为接收者"><a href="#指针或值作为接收者" class="headerlink" title="指针或值作为接收者"></a>指针或值作为接收者</h3><p><code> pointer_value</code></p><h3 id="方法和未导出字段"><a href="#方法和未导出字段" class="headerlink" title="方法和未导出字段"></a>方法和未导出字段</h3><p>提供 getter 和 setter 方法</p><p><code>person2.go</code></p><p>略</p><h2 id="类型的-String-方法和格式化描述符"><a href="#类型的-String-方法和格式化描述符" class="headerlink" title="类型的 String() 方法和格式化描述符"></a>类型的 String() 方法和格式化描述符</h2><p>如果类型定义了 <code>String()</code> 方法，它会被用在 <code>fmt.Printf()</code> 中生成默认的输出：等同于使用格式化描述符 <code>%v</code> 产生的输出。还有 <code>fmt.Print()</code> 和 <code>fmt.Println()</code> 也会自动使用 <code>String()</code> 方法。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>通过如下格式定义接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Namer <span class="hljs-keyword">interface</span> &#123;<br>    Method1(param_list) return_type<br>    Method2(param_list) return_type<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的 <code>Namer</code> 是一个 <strong>接口类型</strong>。</p><p>（按照约定，只包含一个方法的）接口的名字由方法名加 <code>[e]r</code> 后缀组成，例如 <code>Printer</code>、<code>Reader</code>、<code>Writer</code>、<code>Logger</code>、<code>Converter</code> 等等。还有一些不常用的方式（当后缀 <code>er</code> 不合适时），比如 <code>Recoverable</code>，此时接口名以 <code>able</code> 结尾，或者以 <code>I</code> 开头（像 <code>.NET</code> 或 <code>Java</code> 中那样）</p><p>Go 语言中的接口都很简短，通常它们会包含 0 个、最多 3 个方法。</p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><h3 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">//声明一个接口</span><br><span class="hljs-keyword">type</span> Usb <span class="hljs-keyword">interface</span> &#123;<br>   <span class="hljs-comment">//声明两个没有实现的方法</span><br>   Start()<br>   Stop()<br>&#125;<br><br><span class="hljs-keyword">type</span> Phone <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-comment">//让 Phone 实现 Usb 接口的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Phone)</span></span> Start() &#123;<br>   fmt.Println(<span class="hljs-string">&quot;手机开始工作&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Phone)</span></span> Stop() &#123;<br>   fmt.Println(<span class="hljs-string">&quot;手机停止工作&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//让 camera 实现 Usb 接口的方法</span><br><span class="hljs-keyword">type</span> Camera <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Camera)</span></span> Start() &#123;<br>   fmt.Println(<span class="hljs-string">&quot;Camera 开始工作&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Camera)</span></span> Stop() &#123;<br>   fmt.Println(<span class="hljs-string">&quot;Camera 停止工作&quot;</span>)<br>&#125;<br><span class="hljs-comment">//计算机</span><br><span class="hljs-keyword">type</span> Cumputer <span class="hljs-keyword">struct</span> &#123;<br><br>&#125;<br><span class="hljs-comment">// 编写一个方法 Working 接收一个 usb 接口类型变量</span><br><span class="hljs-comment">//只要实现了 Usb 接口 (所谓实现Usb 接口,就是指实现了Usb接口声明所有方法)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Cumputer)</span></span>Working(usb Usb)  &#123;<br>   <span class="hljs-comment">//通过 Usb接口变量来调用 Start 和 Stop 方法</span><br>   usb.Start()<br>   usb.Stop()<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">//测试</span><br>   <span class="hljs-comment">//先声明相关的结构体变量</span><br>   computer := <span class="hljs-built_in">new</span>(Cumputer)<br>   phone := <span class="hljs-built_in">new</span>(Phone)<br>   camera := <span class="hljs-built_in">new</span>(Camera)<br>   <span class="hljs-comment">//关键点</span><br>   computer.Working(phone)<br>   computer.Working(camera)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">手机开始工作<br>手机停止工作<br>Camera 开始工作<br>Camera 停止工作<br></code></pre></td></tr></table></figure><h3 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h3><p>使用接口对结构体排序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br>)<br><br><span class="hljs-comment">//声明 Hero 结构体</span><br><span class="hljs-keyword">type</span> Hero <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>Age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-comment">//声明一个 Hero 结构体的切片类型</span><br><span class="hljs-keyword">type</span> HeroSlice []Hero<br><br><span class="hljs-comment">//实现 interface (排序用) 接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(hs HeroSlice)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(hs)<br>&#125;<br><br><span class="hljs-comment">//less 方法判断使用什么标准进行排序</span><br><span class="hljs-comment">//1. 按照年龄从小到达排序</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(hs HeroSlice)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> hs[i].Age &lt; hs[j].Age<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(hs HeroSlice)</span></span> Swap(i, j <span class="hljs-type">int</span>) &#123;<br>hs[i], hs[j] = hs[j], hs[j]<br><span class="hljs-comment">//temp := hs[i]</span><br><span class="hljs-comment">//hs[i] = hs[j]</span><br><span class="hljs-comment">//hs[j] = temp</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//先定义一个数组 or 切片</span><br>intSlice := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">90</span>&#125;<br><span class="hljs-comment">//对 intSlice 进行冒泡排序</span><br><span class="hljs-comment">//使用系统提供的方法</span><br>sort.Ints(intSlice)<br>fmt.Println(intSlice)<br><span class="hljs-comment">//对结构体切片进行排序</span><br><span class="hljs-keyword">var</span> heroes HeroSlice<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>hero := Hero&#123;<br>Name: fmt.Sprintf(<span class="hljs-string">&quot;英雄_%d&quot;</span>, rand.Intn(<span class="hljs-number">100</span>)),<br>Age:  rand.Intn(<span class="hljs-number">100</span>),<br>&#125;<br><span class="hljs-comment">//将 hreo append 到 heros 切片中</span><br>heroes = <span class="hljs-built_in">append</span>(heroes, hero)<br>&#125;<br><span class="hljs-comment">//查看排序前的顺序</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> heroes &#123;<br>fmt.Println(v)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;------ 正在排序 ---------&quot;</span>)<br><span class="hljs-comment">//调用 sort.sort 进行排序</span><br>sort.Sort(heroes)<br><span class="hljs-comment">//排序后的顺序</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> heroes &#123;<br>fmt.Println(v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>output</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">[-1 0 7 10 90]</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_81 87&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_47 59&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_81 18&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_25 40&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_56 0&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_94 11&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_62 89&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_28 74&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_11 45&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_37 6&#125;</span><span class="language-xml"></span><br><span class="language-xml">------ 正在排序 ---------</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_81 87&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_81 87&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_81 87&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_81 87&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_81 87&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_81 87&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_62 89&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_62 89&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_62 89&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;英雄_62 89&#125;</span><br></code></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>使用以下形式来进行类型断言:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> v, ok := varI.(T); ok &#123;  <span class="hljs-comment">// checked type assertion</span><br>    Process(v)<br>    <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// varI is not of type T</span><br></code></pre></td></tr></table></figure><p>如果转换合法，<code>v</code> 是 <code>varI</code> 转换到类型 <code>T</code> 的值，<code>ok</code> 会是 <code>true</code>；否则 <code>v</code> 是类型 <code>T</code> 的零值，<code>ok</code> 是 <code>false</code>，也没有运行时错误发生。</p><p>由于接口是一般类型, 不知道具体类型. 如果要转换成具体类型, 就需要使用类型断言.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> x <span class="hljs-keyword">interface</span>&#123;&#125;<br>b := <span class="hljs-number">1.1</span><br><span class="hljs-comment">//var b float32 = 1.1</span><br>x = b <span class="hljs-comment">// 空接口  可以接收任意类型</span><br>b_type := reflect.TypeOf(b)<br>fmt.Println(b_type)<br>y := x.(<span class="hljs-type">float64</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;y 的类型是 %T, 值是%v&quot;</span>, y, y)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">map</span>[<span class="hljs-number">1</span>:<span class="hljs-number">1</span>]<span class="hljs-meta"></span><br><span class="hljs-meta">[&#123;&#125; &#123;&#125; &#123;&#125;]</span><br><span class="hljs-attribute">float64</span><br><span class="hljs-attribute">y</span> 的类型是 float64, 值是<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="类型判断：type-switch"><a href="#类型判断：type-switch" class="headerlink" title="类型判断：type-switch"></a>类型判断：type-switch</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> t := areaIntf.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *Square:<br>    fmt.Printf(<span class="hljs-string">&quot;Type Square %T with value %v\n&quot;</span>, t, t)<br><span class="hljs-keyword">case</span> *Circle:<br>    fmt.Printf(<span class="hljs-string">&quot;Type Circle %T with value %v\n&quot;</span>, t, t)<br><span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:<br>    fmt.Printf(<span class="hljs-string">&quot;nil value: nothing to check?\n&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>    fmt.Printf(<span class="hljs-string">&quot;Unexpected type %T\n&quot;</span>, t)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试值是否实现了某个接口"><a href="#测试值是否实现了某个接口" class="headerlink" title="测试值是否实现了某个接口"></a>测试值是否实现了某个接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Stringer <span class="hljs-keyword">interface</span> &#123;<br>    String() <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">if</span> sv, ok := v.(Stringer); ok &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;v implements String(): %s\n&quot;</span>, sv.String()) <span class="hljs-comment">// note: sv, not v</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h2><p><strong>空接口或者最小接口</strong> 不包含任何方法，它对实现不做任何要求：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Any <span class="hljs-keyword">interface</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>任何其他类型都实现了空接口（它不仅仅像 <code>Java/C#</code> 中 <code>Object</code> 引用类型），<code>any</code> 或 <code>Any</code> 是空接口一个很好的别名或缩写。</p><h2 id="反射包"><a href="#反射包" class="headerlink" title="反射包"></a>反射包</h2><h1 id="gorouttine"><a href="#gorouttine" class="headerlink" title="gorouttine"></a>gorouttine</h1><p>Go 协程的特点:</p><pre><code class="hljs">- 有独立的栈空间- 共享程序堆空间- 调度由用户控制</code></pre><h2 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">//在主线程中开启一个 goroutine, 隔一秒输出</span><br><span class="hljs-comment">//主线程每隔一秒输出, 输出十次后, 退出程序</span><br><span class="hljs-comment">//主线程和协程同时执行</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loop_print</span><span class="hljs-params">(c <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(c + strconv.Itoa(i))<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello_world</span><span class="hljs-params">()</span></span> &#123;<br>loop_print(<span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> hello_world()<br>loop_print(<span class="hljs-string">&quot;hello golang&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><p>channel 本质是一个队列</p><p>线程安全, 多 goroutine 访问时, 不需要加锁.</p><p>channel 是有类型的.</p><h2 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h2><p><code>var &lt;变量名&gt; chan &lt;数据类型&gt;</code> </p><p><code>ch := make(chan int)</code></p><p>channel 是引用类型, 必须初始化, 即 make 后才能使用.</p><p>在没有使用协程的情况下, 如果管道的数据被全部取出, 继续读取数据会死锁, 报 deadlock 错误</p><p>创建空接口类型的 channel, 可以存放任意类型.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">allChan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h2 id="使用-channel-进行-goroutine-通信demo"><a href="#使用-channel-进行-goroutine-通信demo" class="headerlink" title="使用 channel 进行 goroutine 通信demo"></a>使用 channel 进行 goroutine 通信demo</h2><blockquote><p>使用通信共享内存, 而不是共享内存来通信</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeData</span><span class="hljs-params">(intchan <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++ &#123;<br>intchan &lt;- i<br>fmt.Printf(<span class="hljs-string">&quot;writeDate =%v\n&quot;</span>, i)<br>&#125;<br><span class="hljs-built_in">close</span>(intchan)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readData</span><span class="hljs-params">(intchan <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, exitchan <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>v, ok := &lt;-intchan<br><span class="hljs-keyword">if</span> ok &#123;<br>fmt.Printf(<span class="hljs-string">&quot;readDate =%v\n&quot;</span>, v)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//读取完数据后, 即任务完成</span><br>exitchan &lt;- <span class="hljs-literal">true</span><br><span class="hljs-built_in">close</span>(exitchan)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//创建两个 channel</span><br>intchan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">50</span>)<br>exitchan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">go</span> writeData(intchan)<br>  <span class="hljs-comment">// 如果只向管道写数据, 会出现 dead lock 错误.</span><br><span class="hljs-keyword">go</span> readData(intchan, exitchan)<br><span class="hljs-comment">//time.Sleep(time.Second * 10)</span><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>_, ok := &lt;-exitchan<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="使用-select-读取管道数据"><a href="#使用-select-读取管道数据" class="headerlink" title="使用 select 读取管道数据"></a>使用 select 读取管道数据</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//使用 select 解决 channel 阻塞问题</span><br>intChan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++ &#123;<br>intChan &lt;- i<br>&#125;<br>strChan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">5</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>strChan &lt;- <span class="hljs-string">&quot;hello&quot;</span> + fmt.Sprintf(<span class="hljs-string">&quot;%d&quot;</span>, i)<br>&#125;<br><span class="hljs-comment">//传统的方法在遍历管道时, 如果不关闭会阻塞导致死锁 deadlock</span><br><span class="hljs-comment">//开发时, 不好确定怎么关闭管道时, 可以使用 select</span><br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> v := &lt;-intChan: <span class="hljs-comment">// 如果管道未关闭也不会一直阻塞, 会匹配下一个 case</span><br>fmt.Printf(<span class="hljs-string">&quot; read data from intChan, %d\n&quot;</span>, v)<br><span class="hljs-keyword">case</span> v := &lt;-strChan:<br>fmt.Printf(<span class="hljs-string">&quot;read data from strChan, %s\n&quot;</span>, v)<br><span class="hljs-keyword">default</span>:<br>fmt.Printf(<span class="hljs-string">&quot;read data failed, alsdkjfl;kasjdlkfjklajskldfj\n&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="goroutine-中捕获错误"><a href="#goroutine-中捕获错误" class="headerlink" title="goroutine 中捕获错误"></a>goroutine 中捕获错误</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>time.Sleep(time.Second)<br>fmt.Println(<span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">//=======================================</span><br><span class="hljs-comment">//捕获 panic</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>err:=<span class="hljs-built_in">recover</span>()<br><span class="hljs-keyword">if</span> err !=<span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;test() panic, err:&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">//if err := recover(); err != nil &#123;</span><br><span class="hljs-comment">//fmt.Println(&quot;test() panic, err:&quot;, err)</span><br><span class="hljs-comment">//&#125;</span><br>&#125;()<br><span class="hljs-comment">//=======================================</span><br><br><br><span class="hljs-comment">//=======================================</span><br><span class="hljs-comment">//错误使用 map 导致 panic</span><br><span class="hljs-comment">//panic: assignment to entry in nil map</span><br><span class="hljs-keyword">var</span> mymap <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span><br>mymap[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;golang&quot;</span><br><span class="hljs-comment">//=======================================</span><br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> sayHello()<br><span class="hljs-keyword">go</span> test()<br><span class="hljs-keyword">for</span> i, _ := <span class="hljs-keyword">range</span> <span class="hljs-string">&quot;1234567890&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;main  ok=&quot;</span>, i)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li>反射可以在运行时动态的获取变量的各种信息</li><li>如果是结构体变量, 还可以获取到结构体本身的信息.</li><li>通过反射, 可以修改变量的值, 可以调用相关的方法</li><li>使用反射, 需要 import (“reflect”)</li><li>变量 interface() 和 reflect.Value 是可以相互转换的, <img src="https://i.loli.net/2019/04/25/5cc1782cb88f9.png" alt="示意"></li></ul><h2 id="demo1-1"><a href="#demo1-1" class="headerlink" title="demo1"></a>demo1</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reflectTest1</span><span class="hljs-params">(b <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-comment">//获取 reflect.Type()</span><br>rType := reflect.TypeOf(b)<br>fmt.Println(<span class="hljs-string">&quot;rType: &quot;</span>, rType)<br><span class="hljs-comment">//获取 reflect.Value&#123;&#125;</span><br>rValue := reflect.ValueOf(b)<br>fmt.Printf(<span class="hljs-string">&quot;rValue: %v,\nrValueType: %T\n&quot;</span>, rValue, rValue)<br><span class="hljs-comment">//转换为 int</span><br>rValue1 := reflect.ValueOf(b).Int()<br>fmt.Printf(<span class="hljs-string">&quot;rValue: %v,\nrValueType: %T\n&quot;</span>, rValue1, rValue1)<br><br><span class="hljs-comment">//将 rValue 转换成 interface()</span><br>iV := rValue.Interface()<br>num2 := iV.(<span class="hljs-type">int</span>)<br>fmt.Println(<span class="hljs-string">&quot;num2: &quot;</span>, num2)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reflectTest2</span><span class="hljs-params">(b <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-comment">//获取 reflect.Type()</span><br>rType := reflect.TypeOf(b)<br>fmt.Println(<span class="hljs-string">&quot;rType: &quot;</span>, rType)<br><span class="hljs-comment">//获取 reflect.Value&#123;&#125;</span><br>rValue := reflect.ValueOf(b)<br>fmt.Printf(<span class="hljs-string">&quot;rValue: %v,\nrValueType: %T\n&quot;</span>, rValue, rValue)<br><span class="hljs-comment">//将 rValue 转换成 interface()</span><br>iV := rValue.Interface()<br>fmt.Printf(<span class="hljs-string">&quot;iv: %v, type: %T\n&quot;</span>, iV, iV)<br><span class="hljs-comment">//通过类型断言转换成需要的类型</span><br>stu, ok:=iV.(*Student) <span class="hljs-comment">// 这里不用指针, 会不 ok, 没弄懂, 是因为我传递的参数是指针me</span><br><span class="hljs-keyword">if</span> ok &#123;<br>fmt.Printf(<span class="hljs-string">&quot;stu.Name=%v \n&quot;</span>, stu.Name)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>Age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-comment">//反射的基本操作</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>num := <span class="hljs-number">10</span><br>reflectTest1(num)<br>fmt.Println(<span class="hljs-string">&quot;\n&quot;</span>)<br>stu := <span class="hljs-built_in">new</span>(Student)<br>stu.Name = <span class="hljs-string">&quot;tom&quot;</span><br>stu.Age = <span class="hljs-number">10</span><br>reflectTest2(stu)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="demo2-通过反射修改值"><a href="#demo2-通过反射修改值" class="headerlink" title="demo2 通过反射修改值"></a>demo2 通过反射修改值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reflectTest</span><span class="hljs-params">(b <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>rVal:=reflect.ValueOf(b)<br><span class="hljs-comment">//修改 b 的值</span><br>rVal.Elem().SetInt(<span class="hljs-number">2</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>num:=<span class="hljs-number">2</span><br>reflectTest(&amp;num)<br>fmt.Println(<span class="hljs-string">&quot;num: &quot;</span>,num)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="demo3-通过反射遍历结构体-获取方法和标签值"><a href="#demo3-通过反射遍历结构体-获取方法和标签值" class="headerlink" title="demo3 通过反射遍历结构体, 获取方法和标签值"></a>demo3 通过反射遍历结构体, 获取方法和标签值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/bradfitz/iter&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Monster <span class="hljs-keyword">struct</span> &#123;<br>Name  <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span><br>Age   <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;monster_age&quot;`</span><br>Score <span class="hljs-type">float64</span><br>Sex   <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">//显示 monster 的值</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Monster)</span></span> Print() &#123;<br>fmt.Println(<span class="hljs-string">&quot;===== start =====&quot;</span>)<br>fmt.Println(s)<br>fmt.Println(<span class="hljs-string">&quot;===== end =====&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Monster)</span></span> GetSum(n1, n2 <span class="hljs-type">int</span>) <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> n1 + n2<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Monster)</span></span> Set(name <span class="hljs-type">string</span>, age <span class="hljs-type">int</span>, score <span class="hljs-type">float64</span>, sex <span class="hljs-type">string</span>) &#123;<br>s.Name = name<br>s.Age = age<br>s.Score = score<br>s.Sex = sex<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestStruct</span><span class="hljs-params">(a <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>typ := reflect.TypeOf(a)<br>val := reflect.ValueOf(a)<br>kd := val.Kind()<br><span class="hljs-keyword">if</span> kd != reflect.Struct &#123;<br>fmt.Println(<span class="hljs-string">&quot;except struct&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">//获取结构体字段数量</span><br>num := val.NumField()<br>fmt.Printf(<span class="hljs-string">&quot;struct has %d fields \n&quot;</span>, num)<br><span class="hljs-keyword">for</span> i, _ := <span class="hljs-keyword">range</span> iter.N(num) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;field %d: 值: %v\n &quot;</span>, i, val.Field(i))<br><span class="hljs-comment">//通过 reflect.Type 获取 struct 标签,</span><br>tagVal := typ.Field(i).Tag.Get(<span class="hljs-string">&quot;json&quot;</span>)<br><span class="hljs-keyword">if</span> tagVal != <span class="hljs-string">&quot;&quot;</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;field %d: tag: %v\n&quot;</span>, i, tagVal)<br>&#125;<br>&#125;<br>numOfMethod := val.NumMethod()<br>fmt.Printf(<span class="hljs-string">&quot;struct has %d methods\n&quot;</span>, numOfMethod)<br><span class="hljs-comment">//方法的排序按照函数名进行排序</span><br><span class="hljs-comment">//调用结构体的第一个方法 method(0)</span><br>val.Method(<span class="hljs-number">1</span>).Call(<span class="hljs-literal">nil</span>)<br><br><span class="hljs-comment">// todo 使用 make 方法创建 slice</span><br><span class="hljs-keyword">var</span> params []reflect.Value<br>params = <span class="hljs-built_in">append</span>(params, reflect.ValueOf(<span class="hljs-number">10</span>))<br>params = <span class="hljs-built_in">append</span>(params, reflect.ValueOf(<span class="hljs-number">40</span>))<br><span class="hljs-comment">//传入的参数是 []reflect.Value</span><br>res := val.Method(<span class="hljs-number">0</span>).Call(params)<br><span class="hljs-comment">//返回的结果是 []reflect.Value</span><br>fmt.Println(<span class="hljs-string">&quot;red: &quot;</span>, res[<span class="hljs-number">0</span>].Int())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>m := <span class="hljs-built_in">new</span>(Monster)<br>m.Name = <span class="hljs-string">&quot;test&quot;</span><br>m.Age = <span class="hljs-number">100</span><br>m.Score = <span class="hljs-number">40.0</span><br>m.Sex = <span class="hljs-string">&quot;nan&quot;</span><br>TestStruct(*m)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 的几个方法</title>
    <link href="/2018/12/27/vue-%E7%9A%84%E5%87%A0%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    <url>/2018/12/27/vue-%E7%9A%84%E5%87%A0%E4%B8%AA%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>小白一枚 大神绕路哈</p></blockquote><h1 id="页面跳转传递参数"><a href="#页面跳转传递参数" class="headerlink" title="页面跳转传递参数"></a>页面跳转传递参数</h1><h2 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;api_list_edit&quot;</span>,<br><span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">modify</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">sel_currentRow</span> &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">modify</span><br></code></pre></td></tr></table></figure><h1 id="请求图片"><a href="#请求图片" class="headerlink" title="请求图片"></a>请求图片</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> img = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../images/who.jpg&#x27;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setAvator&#x27;</span>, img);<br></code></pre></td></tr></table></figure><h1 id="使用-Cookie"><a href="#使用-Cookie" class="headerlink" title="使用 Cookie"></a>使用 Cookie</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Cookies</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;js-cookie&#x27;</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span>;<br><br><span class="hljs-title class_">Cookies</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Http 权威指南读书笔记</title>
    <link href="/2018/11/22/Http-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/11/22/Http-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p><em>温故而知新, 可以为师矣…</em>  </p></blockquote><span id="more"></span><h1 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h1><p>HTTP 报文都是纯文本, 不是二进制代码<br>HTTP 报文包括三个部分:</p><ul><li><strong>起始行</strong> 报文的第一行就是起始行, 在请求报文中用来说明要做什么, 在响应报文里面说明出现了什么状况</li><li><strong>首部字段</strong> 起始行后面有零或多个首部字段. <code>key: value</code> 格式.首部以一个空行结束.添加一个首部字段和添加一个新行一样简单.</li><li><strong>主体</strong>  空行之后就是可选的报文主体<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><h2 id="TCP-x2F-IP"><a href="#TCP-x2F-IP" class="headerlink" title="TCP&#x2F;IP"></a>TCP&#x2F;IP</h2>HTTP 是应用层协议,不操心网络通信的具体细节<br>TCP&#x2F;IP 提供:</li><li>无差错的数据传输</li><li>按序传输(数据总是会按照发送的顺序到达)</li><li>未分段的数据流(可以在任意时刻以任意尺寸将数据发送出去)<h1 id="Web-结构组件"><a href="#Web-结构组件" class="headerlink" title="Web 结构组件"></a>Web 结构组件</h1></li><li>代理</li><li>缓存</li><li>网关</li><li>隧道 <em>对 HTTP 通信报文进行盲转发的特殊代理</em></li><li>Agent 代理 _发起自动 HTTP 请求的半智能 Web 客户端<h1 id="连接-1"><a href="#连接-1" class="headerlink" title="连接"></a>连接</h1><h2 id="HTTP-时延"><a href="#HTTP-时延" class="headerlink" title="HTTP 时延"></a>HTTP 时延</h2></li><li>dns 解析耗时</li><li>TCP 连接建立握手</li><li>TCP 慢启动拥塞控制<blockquote><p>TCP 连接会随着时间进行自我调谐, 起初会限制连接的最大速度,如果苏剧成功传输,会随着时间的推移提高传输的速度,这种调谐成为 TCP 慢启动, 用于防止突然过载和拥塞<br>  TCP 慢启动限制了一个 TCP 端点在任意时刻可以传输的分组数.</p></blockquote></li><li>数据聚集的 Nagle 算法</li><li>用于稍待确认的 TCP 延迟确认算法</li><li>TIME_WAIT时延和端口耗尽<h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2>如果一个事务, 不管是执行一次还是很多次,得到的结果都相同,这个事务就是幂等的,实现者们可以认为 GET, HEAD, PUT, DELETE, TRACE 和 OPTIONS 方法都共享这一特性<table><thead><tr><th align="center">HTTP Method</th><th align="center">Idempotent</th><th align="center">Safe</th></tr></thead><tbody><tr><td align="center">OPTIONS</td><td align="center">yes</td><td align="center">yes</td></tr><tr><td align="center">GET</td><td align="center">yes</td><td align="center">yes</td></tr><tr><td align="center">HEAD</td><td align="center">yes</td><td align="center">yes</td></tr><tr><td align="center">PUT</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">POST</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">DELETE</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">PATCH</td><td align="center">no</td><td align="center">no</td></tr></tbody></table><h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h2>TCP 连接时双向的. TCP 连接的每一端都有一个输入队和一个输出队列,用于数据的读写.放入一端输出队列中的数据最终会出现在另一端的输入队列中<h3 id="完全关闭和半关闭"><a href="#完全关闭和半关闭" class="headerlink" title="完全关闭和半关闭"></a>完全关闭和半关闭</h3>应用程序可以关闭 TCP 输入和输出信道中的任意一个,或者将两者都关闭了.套接字调用 close() 会将 TCP 连接的输入和输出信道都关闭了,称为完全关闭.还可以用套接字调用 shutdown() 单独关闭输入或输出信道,称为瓣关闭.<h1 id="Web-服务器"><a href="#Web-服务器" class="headerlink" title="Web 服务器"></a>Web 服务器</h1></li><li>建立连接 <em>接受一个客户端连接,或者如果不希望与这个客户端建立连接,就将其关闭</em></li><li>接收请求 <em>从网络中读取一条 HTTP 请求报文</em><ul><li>解析请求行,查找请求方法和指定的资源标识符和版本号.</li><li>读取以 CRLF 结尾的保温首部</li><li>检测到以 CRLF 结尾的, 标识首部结束的空行 <em>(如果有的话)</em></li><li>读取请求主体 <em>(如果有的话)</em></li></ul></li><li>处理请求 <em>对请求报文进行解释,并处理</em></li><li>访问资源 <em>访问报文中指定的资源</em></li><li>构建响应 <em>创建带有正确首部的 HTTP 响应报文</em><br>  如果有响应主体的话,相应报文中通常包括:<ul><li>描述了响应主体 MIME 类型的 Content-Type 首部</li><li>描述了响应主题长度的 Content-Length 首部</li></ul></li><li>发送响应 <em>将相应回送给客户端</em></li><li>记录事务处理过程 <em>日志</em><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><h2 id="如何获取流量"><a href="#如何获取流量" class="headerlink" title="如何获取流量"></a>如何获取流量</h2></li><li>修改客户端</li><li>修改网络</li><li>dns</li><li>web 服务重定向<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1>会话 cookie | 持久cookie<br>区别在于他们的过期时间<h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2>类似标签, Web 服务器给当前用户贴上一个由 <code>key=value</code> 这样的信息构成的任意列表,并通过 Set-Cookie 首部将其贴到用户身上. cookie 可以包含任意信息.<h1 id="内容发布"><a href="#内容发布" class="headerlink" title="内容发布"></a>内容发布</h1></li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="有条件的请求"><a href="#有条件的请求" class="headerlink" title="有条件的请求"></a>有条件的请求</h2><p>有条件的请求是通过以 ‘IF-‘ 开头的有条件的首部来实现的.<br>验证码分为 <strong>弱验证码</strong> 和 <strong>强验证码</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /announce.html HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">If</span>-Modified-Since:Sat,<span class="hljs-number">29</span> Jun <span class="hljs-number">2002</span>,<span class="hljs-number">14</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span> GMT<br></code></pre></td></tr></table></figure><p>如果 - 从 … 之后 ?? 修改过<br>每个有条件的请求都通过特定的验证码来发挥作用. 验证码是文档实例的一个特殊属性,用它来测试条件为真.  </p>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Effective Python 读书笔记</title>
    <link href="/2018/11/18/Effective-Python-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/11/18/Effective-Python-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> this<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="用-Python-的方式思考"><a href="#用-Python-的方式思考" class="headerlink" title="用 Python 的方式思考"></a>用 Python 的方式思考</h1><h2 id="bytes-str-和-unicode"><a href="#bytes-str-和-unicode" class="headerlink" title="bytes str 和 unicode"></a>bytes str 和 unicode</h2><p>接受 str 或 bytes 返回 str 的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_str</span>(<span class="hljs-params">bytes_or_str</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bytes_or_str, <span class="hljs-built_in">bytes</span>):<br>        value = bytes_or_str.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        value = bytes_or_str<br>    <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><p>接受 str 或 bytes 返回 bytes 的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_bytes</span>(<span class="hljs-params">bytes_or_str</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bytes_or_str, <span class="hljs-built_in">str</span>):<br>        value = bytes_or_str.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        value = bytes_or_str<br>    <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>如果从序列的开头获取切片,那就不要在 start 那里写上 0 ,而是应该把它留空,这样代码看起来会清爽一些.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> s[:<span class="hljs-number">5</span>] == s[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>如果切片一直要取到列表末尾,那就应该把 end 留空,因为即使写了,也是多余.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> s[<span class="hljs-number">5</span>:] == s[<span class="hljs-number">5</span>:<span class="hljs-built_in">len</span>(s)]<br></code></pre></td></tr></table></figure><p>切割列表时,如果指定了 stride,那么代码可能会变得相当费解.我们呢不应该把 stride 与 start 和 end 写在一起.如果非要用,那就尽量采用正值.同时省略 start 和 end 索引.如果一定要配合 start 或 end 索引来使用 stride,请考虑步进式切片,把切割结果赋给某个变量,然后二次切片.</p><h2 id="尽量用-enumerate-取代-range"><a href="#尽量用-enumerate-取代-range" class="headerlink" title="尽量用 enumerate 取代 range"></a>尽量用 <code>enumerate</code> 取代 <code>range</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i, flavor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(flavor_list, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, flavor))<br></code></pre></td></tr></table></figure><h2 id="用-zip-遍历两个列表"><a href="#用-zip-遍历两个列表" class="headerlink" title="用 zip() 遍历两个列表"></a>用 <code>zip()</code> 遍历两个列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">names = [<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;anny&#x27;</span>, <span class="hljs-string">&#x27;jake&#x27;</span>]<br>letters = [<span class="hljs-built_in">len</span>(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> names]<br><span class="hljs-keyword">for</span> name, count <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(names, letters):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, count))<br></code></pre></td></tr></table></figure><p><strong>如果输入的迭代器长度不同, 受封装的那些迭代器中,只要有一个耗尽了,<code>zip</code> 就不再产生新的元组了</strong></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="尽量用异常来表示特殊情况-而不要返回-None"><a href="#尽量用异常来表示特殊情况-而不要返回-None" class="headerlink" title="尽量用异常来表示特殊情况,而不要返回 None"></a>尽量用异常来表示特殊情况,而不要返回 <code>None</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> a / b<br>    <span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Invlid inputs&#x27;</span>) <span class="hljs-keyword">from</span> e<br></code></pre></td></tr></table></figure><h1 id="类与继承"><a href="#类与继承" class="headerlink" title="类与继承"></a>类与继承</h1><h2 id="尽量用辅助类来维护程序的状态-而不要用字典和元组"><a href="#尽量用辅助类来维护程序的状态-而不要用字典和元组" class="headerlink" title="尽量用辅助类来维护程序的状态, 而不要用字典和元组"></a>尽量用辅助类来维护程序的状态, 而不要用字典和元组</h2><p>很容易就能用 Python 内置的字典与元组类型构建出分层的数据结构, 从而保存程序的内部状态. 但是, 当嵌套多于一层的时候, 就应该避免这种做法(<strong>不要使用包含字典的字典</strong>), 这种多层嵌套的代码, 其他人很难看懂, 而且自己维护起来也很麻烦.</p><p>用来保存程序状态的数据结构一旦变得过于复杂, 就应该将其拆解为类, 以便提供更为明确的接口, 也能够在接口与具体实现之间创建抽象层.  </p><h3 id="把嵌套结构重构为类"><a href="#把嵌套结构重构为类" class="headerlink" title="把嵌套结构重构为类"></a>把嵌套结构重构为类</h3><p><code>collections</code> 模块着的 <code>namedtuple</code>(<strong>具名元组</strong>)类型非常适合这种需求, 使用它很容易定义出精简而又不可变的数据类.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><br>Grade = collections.namedtuple(<span class="hljs-string">&#x27;Grade&#x27;</span>, (<span class="hljs-string">&#x27;score&#x27;</span>, <span class="hljs-string">&#x27;weight&#x27;</span>))<br><br><br><span class="hljs-comment"># 科目类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self._grades = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">report_grade</span>(<span class="hljs-params">self, score, weight</span>):<br>        self._grades.append(Grade(score, weight))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">average_grade</span>(<span class="hljs-params">self</span>):<br>        total, total_weight = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> grade <span class="hljs-keyword">in</span> self._grades:<br>            total += grade.score * grade.weight<br>            total_weight += grade.weight<br>        <span class="hljs-keyword">return</span> total / total_weight<br><br><br><span class="hljs-comment"># 学生类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self._subjects = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">subject</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-keyword">if</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self._subjects:<br>            self._subjects[name] = Subject()<br>        <span class="hljs-keyword">return</span> self._subjects[name]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">average_grade</span>(<span class="hljs-params">self</span>):<br>        total, count = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> subject <span class="hljs-keyword">in</span> self._subjects.values():<br>            total += subject.average_grade()<br>            count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> total / count<br><br><br><span class="hljs-comment"># 考试成绩容器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Gradebook</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self._students = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">student</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-keyword">if</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self._students:<br>            self._students[name] = Student()<br>        <span class="hljs-keyword">return</span> self._students[name]<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    book = Gradebook()<br>    albert = book.student(<span class="hljs-string">&#x27;Albert Einstein&#x27;</span>)<br>    math = albert.subject(<span class="hljs-string">&#x27;Math&#x27;</span>)<br>    math.report_grade(<span class="hljs-number">80</span>, <span class="hljs-number">0.10</span>)<br>    <span class="hljs-built_in">print</span>(albert.average_grade())<br></code></pre></td></tr></table></figure><p><em>要点</em></p><ul><li>不要使用包含其它字典的字典, 也不要使用过长的元组</li><li>如果容器中包含间的而又不可变的数据, 那么可以先使用 <code>nametuple</code> 来表示, 再修改为完整的类</li><li>保存内部状态的字典如果变得比较复杂, 那就应该把这些代码拆解为多个辅助类.<h2 id="只在使用-Mix-in-组件制作工具类时进行多重继承"><a href="#只在使用-Mix-in-组件制作工具类时进行多重继承" class="headerlink" title="只在使用 Mix-in 组件制作工具类时进行多重继承"></a>只在使用 <code>Mix-in</code> 组件制作工具类时进行多重继承</h2><blockquote><p>待续</p></blockquote><h2 id="多用-public-属性-少用-private-属性"><a href="#多用-public-属性-少用-private-属性" class="headerlink" title="多用 public 属性, 少用 private 属性"></a>多用 public 属性, 少用 private 属性</h2><h1 id="元类及属性"><a href="#元类及属性" class="headerlink" title="元类及属性"></a>元类及属性</h1><h2 id="用纯属性取代-get-和-set-方法"><a href="#用纯属性取代-get-和-set-方法" class="headerlink" title="用纯属性取代 get 和 set 方法"></a>用纯属性取代 <code>get</code> 和 <code>set</code> 方法</h2><p>使用 <code>@property</code> 装饰器在设置属性的时候实现特殊行为.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Resistor</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ohms</span>):<br>        self.ohms = ohms<br>        self.voltage = <span class="hljs-number">0</span><br>        self.current = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>下面这个子类继承自 Resistor, 它在给 voltage(<em>电压</em>)属性赋值的时候,还会同时修改 current(<em>电流</em>)属性.</p><blockquote><p><code>setter</code> 和 <code>getter</code> 方法的名称必须与相关属性相符.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">VoltageResistance</span>(<span class="hljs-title class_ inherited__">Resistor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ohms</span>):<br>        <span class="hljs-built_in">super</span>().__init__(ohms)<br>        self._voltage = <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">voltage</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._voltage<br><br><span class="hljs-meta">    @voltage.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">voltage</span>(<span class="hljs-params">self, voltage</span>):<br>        self._voltage = voltage<br>        self.current = self._voltage / self.ohms<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    r2 = VoltageResistance(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Before: &#123;&#125; amps&#x27;</span>.<span class="hljs-built_in">format</span>(r2.current))<br>    r2.voltage = <span class="hljs-number">10</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after: &#123;&#125; amps&#x27;</span>.<span class="hljs-built_in">format</span>(r2.curren<br></code></pre></td></tr></table></figure><p><code>&gt;&gt;&gt;</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Before</span>: <span class="hljs-number">0</span> amps<br><span class="hljs-attribute">after</span>: <span class="hljs-number">3</span>.<span class="hljs-number">3333333333333335</span> amps<br></code></pre></td></tr></table></figure><h2 id="用-property-来代替属性重构"><a href="#用-property-来代替属性重构" class="headerlink" title="用 @property 来代替属性重构"></a>用 <code>@property</code> 来代替属性重构</h2><p>带有配额的漏桶.<br><em>代码略</em></p><blockquote><p>漏桶算法是一种具备传输, 调度和统计等用途的算法. 它把容器比作底部有漏洞的桶(<em>leakybucket</em>), 把配额(<em>quota</em>)比作桶底漏出的水.</p></blockquote><h2 id="用描述符来改写需要复用的-property-方法"><a href="#用描述符来改写需要复用的-property-方法" class="headerlink" title="用描述符来改写需要复用的 @property 方法"></a>用描述符来改写需要复用的 <code>@property</code> 方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Grade</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-comment">#...</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set__</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-comment"># ...</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exam</span>():<br>    <span class="hljs-comment">#class attributes</span><br>    math_grade = Grade()<br>    writing_grade = Grade()<br>    science_grade = Grade()<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    exam = Exam()<br>    exam.writing_grade = <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>为属性赋值时, Python 会将其转译:<br><br><code>Exam.__dict__[&#39;writing_grade&#39;].__set__(exam, 40)</code><br><br>在获取属性时<br><code>print(exam.writing_grade)</code><br>Python 也会将其转译<br><code>print(Exam.__dict__[&#39;writing_grade&#39;].__get__(exam, Exam))</code></p><h2 id="用-getattr-getattribute-和-setattr-实现按需生成的属性"><a href="#用-getattr-getattribute-和-setattr-实现按需生成的属性" class="headerlink" title="用 __getattr__ __getattribute__ 和 __setattr__ 实现按需生成的属性"></a>用 <code>__getattr__ __getattribute__ 和 __setattr__</code> 实现按需生成的属性</h2><h3 id="getattr"><a href="#getattr" class="headerlink" title="__getattr__"></a><code>__getattr__</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyDB</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.exists = <span class="hljs-number">5</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattr__</span>(<span class="hljs-params">self, name</span>):<br>        value = <span class="hljs-string">&#x27;value for &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name)<br>        <span class="hljs-built_in">setattr</span>(self, name, value)<br>        <span class="hljs-keyword">return</span> value<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    data = LazyDB()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.__dict__))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;foo: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.foo))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.__dict__))<br></code></pre></td></tr></table></figure><p><code>&gt;&gt;&gt;</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">before</span>: &#123;<span class="hljs-string">&#x27;exists&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>foo: <span class="hljs-keyword">value</span> <span class="hljs-keyword">for</span> foo<br><span class="hljs-keyword">after</span>: &#123;<span class="hljs-string">&#x27;exists&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-string">&#x27;value for foo&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>然后给 LazyDB 添加记录功能, 把程序对 <code>__getattr__</code> 的调用行为记录下来. 为了避免无限递归, 需要在 LoggingLazyDB 子类里面通过 <code>super().__getattr__()</code> 来获取真正的属性值.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingLazyDB</span>(<span class="hljs-title class_ inherited__">LazyDB</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattr__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Called __getattr__&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().__getattr__(name)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    data = LoggingLazyDB()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exists:  &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.exists))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;foo: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.foo))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;foo: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.foo))<br></code></pre></td></tr></table></figure><p><code>&gt;&gt;&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pyton">exists:  5<br>Called __getattr__foo<br>foo: value for foo<br>foo: value for foo<br></code></pre></td></tr></table></figure><p>因为 exists 属性本身就在实例字典里面, 所以访问它的时候不会触发 <code>__getattr__</code>. foo 属性初始时并不在实例字典里, 所以初次访问的时候会触发 <code>__getattr__</code>. <code>__getattr__</code> 调用 <code>setattr</code> 方法, 把 foo 放在实例字典中, 所以第二次访问 foo 的时候不会触发 <code>__getattr__</code>.</p><h3 id="getattribute"><a href="#getattribute" class="headerlink" title="__getattribute__"></a><code>__getattribute__</code></h3><p>程序每次访问对象的属性时, Python 会调用这个特殊方法, 即使属性字典里面已经有了该属性, 也依然会触发 <code>__getattribute__</code> 方法.<br><br>ValidatingDB 会在 <code>__getattribute__</code> 方法里面记录每次调用的时间.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidatingDB</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.exists = <span class="hljs-number">5</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattribute__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Called __getattrbute__ &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name))<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().__getattribute__(name)<br>        <span class="hljs-keyword">except</span> AttributeError:<br>            value = <span class="hljs-string">&#x27;value for &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name)<br>            <span class="hljs-built_in">setattr</span>(self, name, value)<br>            <span class="hljs-keyword">return</span> value<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    data = ValidatingDB()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exists:  &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.exists))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;foo: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.foo))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;foo: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.foo))<br></code></pre></td></tr></table></figure><p><code>&gt;&gt;&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Called __getattrbute__ exists<br>exists:  <span class="hljs-number">5</span><br>Called __getattrbute__ foo<br>foo: value <span class="hljs-keyword">for</span> foo<br>Called __getattrbute__ foo<br>foo: value <span class="hljs-keyword">for</span> foo<br></code></pre></td></tr></table></figure><p>按照 Python 处理缺失属性的标准流程, 如果程序动态地访问了一个不应该有的属性, 可以在 <code>__getattr__</code> 和 <code>__getattrbute__</code> 里面抛出 AttributeError 异常.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MissingPropertyDB</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattr__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;bad_name&#x27;</span>:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&#x27;&#123;&#125; is missing&#x27;</span>.<span class="hljs-built_in">format</span>(name))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    data = MissingPropertyDB()<br>    data.bad_name<br></code></pre></td></tr></table></figure><p><code>&gt;&gt;&gt;</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Traceback (most recent <span class="hljs-keyword">call</span> last):<br>  File &quot;C:/Users/wter/OneDrive/pythonpj/half_a_wheel/half/test.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">54</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    data.bad_name<br>  File &quot;C:/Users/wter/OneDrive/pythonpj/half_a_wheel/half/test.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">49</span>, <span class="hljs-keyword">in</span> __getattr__<br>    <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&#x27;&#123;&#125; is missing&#x27;</span>.format(<span class="hljs-type">name</span>))<br>AttributeError: bad_name <span class="hljs-keyword">is</span> missing<br></code></pre></td></tr></table></figure><p>实现通用的功能时, 会在 Python 中使用内置的 hasattr 函数来判断对象是否已经拥有了相关的属性, 并用内置的 getattr 函数来获取属性值. 这些函数会在实例字典中搜索待查询的属性,然后再调用 <code>__getattr__</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">data = LoggingLazyDB()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before:  &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.__dict__))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;foo exists:  &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hasattr</span>(data, <span class="hljs-string">&#x27;foo&#x27;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after:   &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data.__dict__))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;foo exists:  &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hasattr</span>(data, <span class="hljs-string">&#x27;foo&#x27;</span>)))<br></code></pre></td></tr></table></figure><p><code>&gt;&gt;&gt;</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">before</span>:  &#123;<span class="hljs-string">&#x27;exists&#x27;</span>: <span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">Called</span> __getattr__foo<br>foo <span class="hljs-keyword">exists</span>:  <span class="hljs-keyword">True</span><br><span class="hljs-keyword">after</span>:   &#123;<span class="hljs-string">&#x27;exists&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-string">&#x27;value for foo&#x27;</span>&#125;<br>foo <span class="hljs-keyword">exists</span>:  <span class="hljs-keyword">True</span><br></code></pre></td></tr></table></figure><h2 id="用元类验证子类"><a href="#用元类验证子类" class="headerlink" title="用元类验证子类"></a>用元类验证子类</h2><p><em>内容赞略</em></p><h2 id="用元类来注册子类"><a href="#用元类来注册子类" class="headerlink" title="用元类来注册子类"></a>用元类来注册子类</h2><p><em>内容赞略</em></p><h2 id="用元类来注解类的属性"><a href="#用元类来注解类的属性" class="headerlink" title="用元类来注解类的属性"></a>用元类来注解类的属性</h2><p><em>内容赞略</em></p><h1 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h1><h2 id="用-subprocess-模块来管理子进程"><a href="#用-subprocess-模块来管理子进程" class="headerlink" title="用 subprocess 模块来管理子进程"></a>用 <code>subprocess</code> 模块来管理子进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_sleep</span>(<span class="hljs-params">period</span>):<br>    proc = subprocess.Popen([<span class="hljs-string">&#x27;sleep&#x27;</span>, <span class="hljs-built_in">str</span>(period)])<br>    <span class="hljs-keyword">return</span> proc<br><br>start = time.time()<br>procs = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>):<br>    proc = run_sleep(<span class="hljs-number">0.1</span>)<br>    procs.append(proc)<br><span class="hljs-keyword">for</span> proc <span class="hljs-keyword">in</span> procs:<br>    proc.communicate()<br>end = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Finished in &#123;&#125; s&#x27;</span>.<span class="hljs-built_in">format</span>(end - start))<br></code></pre></td></tr></table></figure><h2 id="用协程来并发的运行多个函数"><a href="#用协程来并发的运行多个函数" class="headerlink" title="用协程来并发的运行多个函数"></a>用协程来并发的运行多个函数</h2><p><em>暂略</em></p><h1 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h1><h2 id="用-function-wraps-定义函数修饰器"><a href="#用-function-wraps-定义函数修饰器" class="headerlink" title="用 function.wraps 定义函数修饰器"></a>用 <code>function.wraps</code> 定义函数修饰器</h2><h2 id="用-datetima-模块来处理本地时间"><a href="#用-datetima-模块来处理本地时间" class="headerlink" title="用 datetima 模块来处理本地时间"></a>用 <code>datetima</code> 模块来处理本地时间</h2><h3 id="time-模块"><a href="#time-模块" class="headerlink" title="time 模块"></a>time 模块</h3><h3 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a>datetime 模块</h3><h2 id="使用内置算法与数据结构"><a href="#使用内置算法与数据结构" class="headerlink" title="使用内置算法与数据结构"></a>使用内置算法与数据结构</h2><h3 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h3><p><code>collection</code> 模块中的 <code>deque</code> 类, 是一种双向队列. 从头部或者尾部插入或移除一个元素, 之需要消耗常数级别的时间.非常适合用来表示先进先出的队列.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fifo = deque()<br>fifo.append(<span class="hljs-number">1</span>)<br>x = fifo.popleft()<br></code></pre></td></tr></table></figure><p>list 从尾部插入或者移除元素,  需要O(1), 但是从头部插入或移除元素会消耗线性级别的时间.</p><h3 id="有序字典"><a href="#有序字典" class="headerlink" title="有序字典"></a>有序字典</h3><p><code>collection</code> 模块中的 <code>OrderedDict</code> 类, 能够按照键的插入顺序, 来保留键值对在字典中的次序.</p><h3 id="带有默认值的字典"><a href="#带有默认值的字典" class="headerlink" title="带有默认值的字典"></a>带有默认值的字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">stats = defaultdict(<span class="hljs-built_in">int</span>)<br>stats[my_counte<span class="hljs-string">r&#x27;] += 1</span><br></code></pre></td></tr></table></figure><h3 id="堆队列"><a href="#堆队列" class="headerlink" title="堆队列"></a>堆队列</h3><p><code>heapd</code> 模块提供了 <code>heappush</code> <code>heappop</code> 和 <code>nsmallest</code> 等函数, 能在标准的list类型中创建堆结构.</p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>list 使用 index 方法来搜索某个元素, 所耗的时间会与列表的长度呈线性比例.<br><code>bisect</code> 模块中的 <code>bisect_left</code> 等函数, 提供了高效的二分析半搜索算法, 可以在一系列排好顺序的元素之中搜寻某个值.</p><h3 id="迭代器有关的工具"><a href="#迭代器有关的工具" class="headerlink" title="迭代器有关的工具"></a>迭代器有关的工具</h3><h2 id="在重视精确度的场景-应该使用-decimal"><a href="#在重视精确度的场景-应该使用-decimal" class="headerlink" title="在重视精确度的场景, 应该使用 decimal"></a>在重视精确度的场景, 应该使用 <code>decimal</code></h2><h1 id="协作开发"><a href="#协作开发" class="headerlink" title="协作开发"></a>协作开发</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>使用大写的变量名称表示常量<br><br>习惯用下划线表示无用的变量<br></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图解算法读书笔记</title>
    <link href="/2018/11/15/%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/11/15/%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 从一个朋友那里学来的读书笔记的习惯 还不是很会写 努力吧<br> <em>ps: 很多问题其实学生时期 是想过的呀 … 看这本书 经常会有一种 好像赚钱的方法都写在了刑法上了的感觉</em> </p></blockquote><span id="more"></span><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">findSmallest</span>(<span class="hljs-params">arr</span>):<br>    <span class="hljs-comment"># 存储最小的值</span><br>    smallest = arr[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 存储最小的元素的 index</span><br>    smallest_index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(arr)):<br>        <span class="hljs-keyword">if</span> arr[i] &lt; smallest:<br>            smallest = arr[i]<br>            smallest_index = i<br>    <span class="hljs-keyword">return</span> smallest_index<br></code></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quicksort</span>(<span class="hljs-params">array</span>):<br>    <span class="hljs-comment"># 所有小于基准值的元素组成的子数组</span><br>    less = []<br>    <span class="hljs-comment"># 所有大于基准值的元素组成的子数组</span><br>    greater = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-comment"># 基线条件</span><br>        <span class="hljs-keyword">return</span> array<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 递归条件</span><br>        pivot = array[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> array[<span class="hljs-number">1</span>:]:<br>            <span class="hljs-keyword">if</span> i &lt;= pivot:<br>                less.append(i)<br>            <span class="hljs-keyword">if</span> i &gt; pivot:<br>                greater.append(i)<br>    <span class="hljs-keyword">return</span> quicksort(less) + [pivot] + quicksort(greater)<br></code></pre></td></tr></table></figure><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>广度优先搜索可以解决两类问题</p><ul><li>从节点 a  出发, 有前往节点 b  的路径么</li><li>从节点 a 出发, 前往节点 b 的哪条路径最短<blockquote><p>使用广度优先搜索解决芒果销售商问题, 假设你经营一个芒果农场, 需要寻找芒果销售商(假设无重复好友)…</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">person_is_seller</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> name[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;m&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search_seller</span>():<br>    graph = &#123;<span class="hljs-string">&#x27;you&#x27;</span>: [<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;jerry&#x27;</span>]&#125;<br>    <span class="hljs-comment"># 创建一个队列</span><br>    search_queue = deque()<br>    <span class="hljs-comment"># 添加邻居</span><br>    search_queue += graph[<span class="hljs-string">&#x27;you&#x27;</span>]<br>    <span class="hljs-comment"># 只要队列不为空</span><br>    <span class="hljs-keyword">while</span> search_queue:<br>        person = search_queue.popleft()<br>        <span class="hljs-keyword">if</span> person_is_seller(person):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; is seller ...&#x27;</span>.<span class="hljs-built_in">format</span>(person))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            search_queue += graph[person]<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h2 id="迪克斯特拉算法"><a href="#迪克斯特拉算法" class="headerlink" title="迪克斯特拉算法"></a>迪克斯特拉算法</h2><p>加权的广度优先搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_lowest_cost_node</span>(<span class="hljs-params">costs</span>):<br>    lowest_cost = fload(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>    lowest_cost_node = <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># 遍历所有节点</span><br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> costs:<br>        cost = costs[nodes]<br>        <span class="hljs-comment"># 如果当前节点的开销更低 且未处理过</span><br>        <span class="hljs-keyword">if</span> cost &lt; lowest_cost <span class="hljs-keyword">and</span> node <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> processes:<br>            <span class="hljs-comment"># 将其视为开销最低的节点</span><br>            lowest_cost = cost<br>            lowest_cost_node = node<br>    <span class="hljs-keyword">return</span> lowest_cost_node<br></code></pre></td></tr></table></figure><h1 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h1><h2 id="教室调度问题"><a href="#教室调度问题" class="headerlink" title="教室调度问题"></a>教室调度问题</h2><blockquote><p>每步选择局部最优解 最终得到的就是全局最优解</p></blockquote><h2 id="广播台问题"><a href="#广播台问题" class="headerlink" title="广播台问题"></a>广播台问题</h2><blockquote><p>使用贪婪算法计算近似最优解…</p></blockquote></li></ul><p>选择覆盖 50 个的州的最小电台合集  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> states_needed:<br>    best_station = <span class="hljs-literal">None</span><br>    states_covered = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> station, states <span class="hljs-keyword">in</span> stations.items():<br>        covered = states_needed &amp; states<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(covered) &gt; <span class="hljs-built_in">len</span>(states_covered):<br>            best_station = station<br>            states_covered = covered<br>        states_needed -= states_covered<br>        final_stations.add(best_station)<br></code></pre></td></tr></table></figure><h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><p>动态规划</p><h1 id="K-最近邻算法"><a href="#K-最近邻算法" class="headerlink" title="K 最近邻算法"></a>K 最近邻算法</h1><h2 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h2><p>橘子还是橙子</p><h2 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h2><p>光学字符识别</p>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式..</title>
    <link href="/2018/11/15/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2018/11/15/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>总是记不住 不过没关系 多用用就好了 写下来 方便查阅</p></blockquote><span id="more"></span><table><thead><tr><th align="center">正则表达式模式</th><th align="left">匹配的字符串</th></tr></thead><tbody><tr><td align="center">&#96;at</td><td align="left">home&#96;</td></tr><tr><td align="center">f.o</td><td align="left">匹配 ‘f’ ‘o’ 之间的任意一个字符 ‘fao f90’ 等</td></tr><tr><td align="center">..</td><td align="left">任意两个字符</td></tr><tr><td align="center">.end</td><td align="left">匹配在字符串 end 之前的任意一个字符</td></tr><tr><td align="center">^From</td><td align="left">任何以 From 作为起始的字符串</td></tr><tr><td align="center">&#x2F;bin&#x2F;tcsh$</td><td align="left">任何以 ‘bin&#x2F;tcsh’ 作为结尾的字符串</td></tr><tr><td align="center">^Subject:hi$</td><td align="left">任何以由单独的字符串 ‘Subject:hi’ 构成的字符串</td></tr><tr><td align="center">the</td><td align="left">任何包含 the 的字符串</td></tr><tr><td align="center">\bthe</td><td align="left">任何以 the 开始的字符串</td></tr><tr><td align="center">\bthe\b</td><td align="left">仅匹配单词 the</td></tr><tr><td align="center">\Bthe</td><td align="left">任何包含但并不以 the 作为起始的字符串</td></tr><tr><td align="center">b[aeiu]t</td><td align="left">bat bet bit but</td></tr><tr><td align="center">[dn]ot?</td><td align="left">字母 ‘d’ 或者 ‘n’ 后面跟着一个 ‘o’,然后最多是一个 ‘t’, do no dot not</td></tr><tr><td align="center">z.[0-9]</td><td align="left">字母 ‘z’ 后面跟着任何一个字符, 然后跟着一个数字</td></tr><tr><td align="center">[r-u][env-y][us]</td><td align="left">字母 ‘r’ ‘s’ ‘t’ 或者 ‘u’ 后面跟着 ‘e’ ‘n’ ‘v’ ‘w’ ‘x’ 或者 ‘y’, 然后跟着 ‘u’ 或者 ‘s’</td></tr><tr><td align="center">[^\t\n]</td><td align="left">不匹配制表符或者 ‘\n’</td></tr><tr><td align="center">\W+-\d+_</td><td align="left">一个由字母数字组成的字符串和一串由一个连字符分隔的数字</td></tr><tr><td align="center">[A-Za-z]\W*</td><td align="left">第一个字符是字母; 其余字符(如果存在)可以是字母或者数字</td></tr><tr><td align="center">\d{3}-\d{3}-\d{4}</td><td align="left">美国的电话号码格式 800-555-1212</td></tr><tr><td align="center">\W+@\W+.com</td><td align="left">以 <a href="mailto:&#x58;&#88;&#88;&#x40;&#89;&#x59;&#89;&#x2e;&#99;&#x6f;&#109;">&#x58;&#88;&#88;&#x40;&#89;&#x59;&#89;&#x2e;&#99;&#x6f;&#109;</a> 格式表示的简单电子邮件地址</td></tr></tbody></table><blockquote><p>匹配子组的后面再更新吧<br>看过好多次都没怎么记得住  主要项目一直都没有使用过  用用就好了</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django 页面装饰器</title>
    <link href="/2018/11/12/django-%E9%A1%B5%E9%9D%A2%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2018/11/12/django-%E9%A1%B5%E9%9D%A2%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>直接上代码吧</p></blockquote><span id="more"></span><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment"># -*-coding:utf-8-*-</span><br>__author__ = <span class="hljs-string">&#x27;Afreto&#x27;</span><br>__email__ = <span class="hljs-string">&#x27;kongandmarx@163.com&#x27;</span><br>__date__ = <span class="hljs-string">&#x27;2018/5/11&#x27;</span><br><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponseRedirect,HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator_test</span>(<span class="hljs-params">view</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">request,*args,**kwargs</span>):<br>        token = request.COOKIES.get(<span class="hljs-string">&#x27;token&#x27;</span>,<span class="hljs-literal">False</span>)<br>        <span class="hljs-built_in">print</span>(token,<span class="hljs-built_in">type</span>(token))<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;token&#x27;</span> <span class="hljs-keyword">in</span> request.COOKIES:<br>                <span class="hljs-keyword">return</span> view(request,*args,**kwargs)<br>            <span class="hljs-keyword">else</span>:<br>                response = HttpResponseRedirect(request.build_absolute_uri())<br>                <span class="hljs-comment"># response = HttpResponseRedirect(&#x27;/session_test/index&#x27;)</span><br>                response.set_cookie(<span class="hljs-string">&#x27;token&#x27;</span>, <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> response<br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">return</span> auth_fail_handler(request)<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>APScheduler 使用记录</title>
    <link href="/2018/11/01/APScheduler-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2018/11/01/APScheduler-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>由四个组件构成 : 触发器 (trigger)，作业存储 (job store)，执行器 (executor)，调度器 (scheduler)</p></blockquote><h1 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h1><h2 id="触发器-trigger"><a href="#触发器-trigger" class="headerlink" title="触发器 (trigger)"></a>触发器 (trigger)</h2><p>包含调度逻辑，每一个作业有它自己的触发器，用于决定接下来哪一个作业会运行。除了他们自己初始配置意外，触发器完全是无状态的<br>APScheduler 有三种内建的 trigger:  </p><blockquote><p>date: 特定的时间点触发<br>interval: 固定时间间隔触发<br>cron: 在特定时间周期性地触发</p></blockquote><h2 id="作业存储-job-store"><a href="#作业存储-job-store" class="headerlink" title="作业存储 (job store)"></a>作业存储 (job store)</h2><p>存储被调度的作业，默认的作业存储是简单地把作业保存在内存中，其他的作业存储是将作业保存在数据库中。一个作业的数据讲在保存在持久化作业存储时被序列化，并在加载时被反序列化。调度器不能分享同一个作业存储。<br>APScheduler 默认使用 MemoryJobStore，可以修改使用 DB 存储方案</p><h2 id="执行器-executor"><a href="#执行器-executor" class="headerlink" title="执行器 (executor)"></a>执行器 (executor)</h2><p>处理作业的运行，他们通常通过在作业中提交制定的可调用对象到一个线程或者进城池来进行。当作业完成时，执行器将会通知调度器。<br>常用的 executor 有两种：  </p><blockquote><p>ProcessPoolExecutor </br><br>ThreadPoolExecutor</p></blockquote><h2 id="调度器-scheduler"><a href="#调度器-scheduler" class="headerlink" title="调度器 (scheduler)"></a>调度器 (scheduler)</h2><p>通常在应用中只有一个调度器，应用的开发者通常不会直接处理作业存储、调度器和触发器，相反，调度器提供了处理这些的合适的接口。配置作业存储和执行器可以在调度器中完成，例如添加、修改和移除作业。</p><h3 id="配置调度器"><a href="#配置调度器" class="headerlink" title="配置调度器"></a>配置调度器</h3><p>APScheduler 提供了许多不同的方式来配置调度器，你可以使用一个配置字典或者作为参数关键字的方式传入。你也可以先创建调度器，再配置和添加作业，这样你可以在不同的环境中得到更大的灵活性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> apscheduler.schedulers.blocking <span class="hljs-keyword">import</span> BlockingScheduler<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">job</span>():<br>    <span class="hljs-built_in">print</span>(datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))<br><span class="hljs-comment"># 定义BlockingScheduler</span><br>sched = BlockingScheduler()<br>sched.add_job(job, <span class="hljs-string">&#x27;interval&#x27;</span>, seconds=<span class="hljs-number">5</span>)<br>sched.start()<br></code></pre></td></tr></table></figure><p>上述代码创建了一个 BlockingScheduler，并使用默认内存存储和默认执行器。(默认选项分别是 MemoryJobStore 和 ThreadPoolExecutor，其中线程池的最大线程数为 10)。配置完成后使用 start() 方法来启动。<br><br>显式设置 job store(使用 mongo 存储) 和 executor :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> pymongo <span class="hljs-keyword">import</span> MongoClient<br><span class="hljs-keyword">from</span> apscheduler.schedulers.blocking <span class="hljs-keyword">import</span> BlockingScheduler<br><span class="hljs-keyword">from</span> apscheduler.jobstores.memory <span class="hljs-keyword">import</span> MemoryJobStore<br><span class="hljs-keyword">from</span> apscheduler.jobstores.mongodb <span class="hljs-keyword">import</span> MongoDBJobStore<br><span class="hljs-keyword">from</span> apscheduler.executors.pool <span class="hljs-keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor<br><span class="hljs-comment"># MongoDB 参数</span><br>host = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>port = <span class="hljs-number">27017</span><br>client = MongoClient(host, port)<br><span class="hljs-comment"># 输出时间</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">job</span>():<br>    <span class="hljs-built_in">print</span>(datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))<br><span class="hljs-comment"># 存储方式</span><br>jobstores = &#123;<br>    <span class="hljs-string">&#x27;mongo&#x27;</span>: MongoDBJobStore(collection=<span class="hljs-string">&#x27;job&#x27;</span>, database=<span class="hljs-string">&#x27;test&#x27;</span>, client=client),<br>    <span class="hljs-string">&#x27;default&#x27;</span>: MemoryJobStore()<br>&#125;<br>executors = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: ThreadPoolExecutor(<span class="hljs-number">10</span>),<br>    <span class="hljs-string">&#x27;processpool&#x27;</span>: ProcessPoolExecutor(<span class="hljs-number">3</span>)<br>&#125;<br>job_defaults = &#123;<br>    <span class="hljs-string">&#x27;coalesce&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-string">&#x27;max_instances&#x27;</span>: <span class="hljs-number">3</span><br>&#125;<br>scheduler = BlockingScheduler(jobstores=jobstores, executors=executors, job_defaults=job_defaults)<br>scheduler.add_job(job, <span class="hljs-string">&#x27;interval&#x27;</span>, seconds=<span class="hljs-number">5</span>, jobstore=<span class="hljs-string">&#x27;mongo&#x27;</span>)<br>scheduler.start()<br></code></pre></td></tr></table></figure><h3 id="操作-Job"><a href="#操作-Job" class="headerlink" title="操作 Job"></a>操作 Job</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><ul><li>add_job()</li><li>scheduled_job()</li></ul><p>第二种方法只适用于应用运行期间不会改变的 job，而第一种方法返回一个 apscheduler.job.Job 的实例，可以用来改变或者移除 job。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> apscheduler.schedulers.blocking <span class="hljs-keyword">import</span> BlockingScheduler<br>sched = BlockingScheduler()<br><span class="hljs-comment"># 装饰器</span><br><span class="hljs-meta">@sched.scheduled_job(<span class="hljs-params"><span class="hljs-string">&#x27;interval&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;my_job_id&#x27;</span>, seconds=<span class="hljs-number">5</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">job_function</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><span class="hljs-comment"># 开始</span><br>sched.start()<br></code></pre></td></tr></table></figure><h4 id="移除-job"><a href="#移除-job" class="headerlink" title="移除 job"></a>移除 job</h4><ul><li>remove_job()</li><li>job.remove()</li></ul><p>remove_job 使用 jobID 移除<br><br>job.remove() 使用 add_job() 返回的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">job = scheduler.add_job(myfunc, <span class="hljs-string">&#x27;interval&#x27;</span>, minutes=<span class="hljs-number">2</span>)<br>job.remove()<br><span class="hljs-comment"># id</span><br>scheduler.add_job(myfunc, <span class="hljs-string">&#x27;interval&#x27;</span>, minutes=<span class="hljs-number">2</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;my_job_id&#x27;</span>)<br>scheduler.remove_job(<span class="hljs-string">&#x27;my_job_id&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="暂停和恢复-job"><a href="#暂停和恢复-job" class="headerlink" title="暂停和恢复 job"></a>暂停和恢复 job</h4><p>暂停一个 job：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">apscheduler.job.Job.pause()<br>apscheduler.schedulers.base.BaseScheduler.pause_job()<br></code></pre></td></tr></table></figure><h4 id="恢复-job："><a href="#恢复-job：" class="headerlink" title="恢复 job："></a>恢复 job：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">apscheduler.job.Job.resume()<br>apscheduler.schedulers.base.BaseScheduler.resume_job()<br></code></pre></td></tr></table></figure><blockquote><p>apscheduler.job.Job 是 add_job() 返回的实例</p></blockquote><h4 id="获取-job-列表"><a href="#获取-job-列表" class="headerlink" title="获取 job 列表"></a>获取 job 列表</h4><p>获得可调度 job 列表，可以使用 get_jobs() 来完成，它会返回所有的 job 实例。</p><p>也可以使用 print_jobs() 来输出所有格式化的 job 列表。</p><h4 id="修改-job"><a href="#修改-job" class="headerlink" title="修改 job"></a>修改 job</h4><p>除了 jobID 之外 job 的所有属性都可以修改，使用 apscheduler.job.Job.modify() 或者 modify_job() 修改一个 job 的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">job.modify(max_instances=<span class="hljs-number">6</span>, name=<span class="hljs-string">&#x27;Alternate name&#x27;</span>)<br>modify_job(<span class="hljs-string">&#x27;my_job_id&#x27;</span>, trigger=<span class="hljs-string">&#x27;cron&#x27;</span>, minute=<span class="hljs-string">&#x27;*/5&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="关闭-job"><a href="#关闭-job" class="headerlink" title="关闭 job"></a>关闭 job</h4><p>默认情况下调度器会等待所有的 job 完成后，关闭所有的调度器和作业存储。将 wait 选项设置为 False 可以立即关闭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">scheduler.shutdown()<br>scheduler.shutdown(wait=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h4 id="scheduler-事件"><a href="#scheduler-事件" class="headerlink" title="scheduler 事件"></a>scheduler 事件</h4><p>scheduler 可以添加事件监听器，并在特殊的时间触发。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_listener</span>(<span class="hljs-params">event</span>):<br>    <span class="hljs-keyword">if</span> event.exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The job crashed :(&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The job worked :)&#x27;</span>)<br><span class="hljs-comment"># 添加监听器</span><br>scheduler.add_listener(my_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)<br></code></pre></td></tr></table></figure><h2 id="trigger-规则"><a href="#trigger-规则" class="headerlink" title="trigger 规则"></a>trigger 规则</h2><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>最基本的一种调度，作业只会执行一次</p><ul><li>run_date (datetime|str) – the date&#x2F;time to run the job at</li><li>timezone (datetime.tzinfo|str) – time zone for run_date if it doesn’t have one already</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><span class="hljs-keyword">from</span> apscheduler.schedulers.blocking <span class="hljs-keyword">import</span> BlockingScheduler<br>sched = BlockingScheduler()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_job</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-built_in">print</span>(text)<br><span class="hljs-comment"># The job will be executed on November 6th, 2009</span><br>sched.add_job(my_job, <span class="hljs-string">&#x27;date&#x27;</span>, run_date=date(<span class="hljs-number">2009</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>), args=[<span class="hljs-string">&#x27;text&#x27;</span>])<br>sched.add_job(my_job, <span class="hljs-string">&#x27;date&#x27;</span>, run_date=datetime(<span class="hljs-number">2009</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>, <span class="hljs-number">16</span>, <span class="hljs-number">30</span>, <span class="hljs-number">5</span>), args=[<span class="hljs-string">&#x27;text&#x27;</span>])<br>sched.add_job(my_job, <span class="hljs-string">&#x27;date&#x27;</span>, run_date=<span class="hljs-string">&#x27;2009-11-06 16:30:05&#x27;</span>, args=[<span class="hljs-string">&#x27;text&#x27;</span>])<br><span class="hljs-comment"># The &#x27;date&#x27; trigger and datetime.now() as run_date are implicit</span><br>sched.add_job(my_job, args=[<span class="hljs-string">&#x27;text&#x27;</span>])<br>sched.start()<br></code></pre></td></tr></table></figure><h3 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h3><ul><li>year (int|str) – 4-digit year</li><li>month (int|str) – month (1-12)</li><li>day (int|str) – day of the (1-31)</li><li>week (int|str) – ISO week (1-53)</li><li>day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</li><li>hour (int|str) – hour (0-23)</li><li>minute (int|str) – minute (0-59)</li><li>second (int|str) – second (0-59)</li><li>start_date (datetime|str) – earliest possible date&#x2F;time to trigger on (inclusive)</li><li>end_date (datetime|str) – latest possible date&#x2F;time to trigger on (inclusive)</li><li>timezone (datetime.tzinfo|str) – time zone to use for the date&#x2F;time calculations (defaults to scheduler timezone)</li></ul><p>表达式:<br><img src="https://i.loli.net/2018/11/01/5bdab0bd54b93.png" alt="python_timer_expression.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> apscheduler.schedulers.blocking <span class="hljs-keyword">import</span> BlockingScheduler<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">job_function</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><span class="hljs-comment"># BlockingScheduler</span><br>sched = BlockingScheduler()<br><span class="hljs-comment"># Schedules job_function to be run on the third Friday</span><br><span class="hljs-comment"># of June, July, August, November and December at 00:00, 01:00, 02:00 and 03:00</span><br>sched.add_job(job_function, <span class="hljs-string">&#x27;cron&#x27;</span>, month=<span class="hljs-string">&#x27;6-8,11-12&#x27;</span>, day=<span class="hljs-string">&#x27;3rd fri&#x27;</span>, hour=<span class="hljs-string">&#x27;0-3&#x27;</span>)<br><span class="hljs-comment"># Runs from Monday to Friday at 5:30 (am) until 2014-05-30 00:00:00</span><br>sched.add_job(job_function, <span class="hljs-string">&#x27;cron&#x27;</span>, day_of_week=<span class="hljs-string">&#x27;mon-fri&#x27;</span>, hour=<span class="hljs-number">5</span>, minute=<span class="hljs-number">30</span>, end_date=<span class="hljs-string">&#x27;2014-05-30&#x27;</span>)<br>sched.start()<br></code></pre></td></tr></table></figure><h3 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h3><p>参数:</p><ul><li>weeks (int) – number of weeks to wait</li><li>days (int) – number of days to wait</li><li>hours (int) – number of hours to wait</li><li>minutes (int) – number of minutes to wait</li><li>seconds (int) – number of seconds to wait</li><li>start_date (datetime|str) – starting point for the interval calculation</li><li>end_date (datetime|str) – latest possible date&#x2F;time to trigger on</li><li>timezone (datetime.tzinfo|str) – time zone to use for the date&#x2F;time calculations</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> apscheduler.schedulers.blocking <span class="hljs-keyword">import</span> BlockingScheduler<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">job_function</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><span class="hljs-comment"># BlockingScheduler</span><br>sched = BlockingScheduler()<br><span class="hljs-comment"># Schedule job_function to be called every two hours</span><br>sched.add_job(job_function, <span class="hljs-string">&#x27;interval&#x27;</span>, hours=<span class="hljs-number">2</span>)<br><span class="hljs-comment"># The same as before, but starts on 2010-10-10 at 9:30 and stops on 2014-06-15 at 11:00</span><br>sched.add_job(job_function, <span class="hljs-string">&#x27;interval&#x27;</span>, hours=<span class="hljs-number">2</span>, start_date=<span class="hljs-string">&#x27;2010-10-10 09:30:00&#x27;</span>, end_date=<span class="hljs-string">&#x27;2014-06-15 11:00:00&#x27;</span>)<br>sched.start()<br></code></pre></td></tr></table></figure><h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">sched.add_job(job1, <span class="hljs-string">&#x27;interval&#x27;</span>, seconds=<span class="hljs-number">1</span>, args=[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>])<br>sched.add_job(job2, <span class="hljs-string">&#x27;interval&#x27;</span>, seconds=<span class="hljs-number">1</span>, kwargs=&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;c&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><h2 id="misfire-和-job-合并"><a href="#misfire-和-job-合并" class="headerlink" title="misfire 和 job 合并"></a>misfire 和 job 合并</h2><p>可以通过设置 job 的 misfire_grace_time 选项来指示之后尝试执行的次数<br><br>可以合并所有错过时间的 job 到一个 job 来执行，通过设定 job 的 <code>coalesce=True</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">misfire_grace_time=<span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><h1 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h1><p><a href="https://github.com/viniciuschiele/flask-apscheduler/blob/master/examples/flask_context.py">flask-apscheduler 官方 git</a></p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    SCHEDULER_JOBSTORES = &#123;<br>        <span class="hljs-string">&#x27;default&#x27;</span>: SQLAlchemyJobStore(url=<span class="hljs-string">&#x27;sqlite://&#x27;</span>)<br>    &#125;<br>    SCHEDULER_EXECUTORS = &#123;<br>        <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;threadpool&#x27;</span>, <span class="hljs-string">&#x27;max_workers&#x27;</span>: <span class="hljs-number">20</span>&#125;<br>    &#125;<br>    SCHEDULER_JOB_DEFAULTS = &#123;<br>        <span class="hljs-string">&#x27;coalesce&#x27;</span>: <span class="hljs-literal">False</span>,<br>        <span class="hljs-string">&#x27;max_instances&#x27;</span>: <span class="hljs-number">3</span><br>    &#125;<br>    SCHEDULER_API_ENABLED = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>job 并不推荐 在 Config 中设置</p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">app = Flask(__name__)<br>app.config.from_object(Config())<br><br>db.app = app<br>db.init_app(app)<br><br>scheduler = APScheduler()<br>scheduler.init_app(app)<br>scheduler.start()<br></code></pre></td></tr></table></figure><blockquote><p>job 操作同 apscheduler</p></blockquote><h1 id="django"><a href="#django" class="headerlink" title="django"></a>django</h1><p><a href="https://github.com/jarekwg/django-apscheduler">官方git</a></p><h2 id="start-1"><a href="#start-1" class="headerlink" title="start"></a>start</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> apscheduler.schedulers.background <span class="hljs-keyword">import</span> BackgroundScheduler<br><br><span class="hljs-keyword">from</span> django_apscheduler.jobstores <span class="hljs-keyword">import</span> DjangoJobStore, register_events, register_job<br><br>scheduler = BackgroundScheduler()<br>scheduler.add_jobstore(DjangoJobStore(), <span class="hljs-string">&quot;default&quot;</span>)<br><br><br><span class="hljs-meta">@register_job(<span class="hljs-params">scheduler, <span class="hljs-string">&quot;interval&quot;</span>, seconds=<span class="hljs-number">5</span>, replace_existing=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_job</span>():<br>    time.sleep(random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1</span>)/<span class="hljs-number">100.</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&#x27;m a test job!&quot;</span>)<br>    <span class="hljs-comment"># raise ValueError(&quot;Olala!&quot;)</span><br><br><br>register_events(scheduler)<br><br>scheduler.start()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Scheduler started!&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="local-tiamezone-问题"><a href="#local-tiamezone-问题" class="headerlink" title="local tiamezone 问题"></a>local tiamezone 问题</h2><p>在 <code>flask</code> 中使用时,未指定 <code>timezone</code>, 报错 <code>Unable to determine the name of the local timezone</code><br><br>在添加任务时指定 <code>timezone</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scheduler.add_job(<span class="hljs-built_in">id</span>=job_id, func=update, trigger=<span class="hljs-string">&#x27;interval&#x27;</span>, seconds=<span class="hljs-built_in">int</span>(interval),misfire_grace_time=<span class="hljs-number">30</span>, timezone=<span class="hljs-string">&quot;UTC&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="django-中读取数据库链接失效问题"><a href="#django-中读取数据库链接失效问题" class="headerlink" title="django 中读取数据库链接失效问题"></a>django 中读取数据库链接失效问题</h2><ul><li><p>场景<br>在 job 中使用 django.db, job 调用时报 <code>mysql has gone away</code> 错误</p></li><li><p>原因<br><br>应该是 job 被调用的时使用了 django.db 中已关闭的连接 <em>不知所云 ing</em></p></li><li><p>解决方案<br><br>job 中使用 django.db 之前关闭连接</p><pre><code class="hljs">  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">django.db.close_old_connections()<br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="flask-中任务重复运行"><a href="#flask-中任务重复运行" class="headerlink" title="flask 中任务重复运行"></a>flask 中任务重复运行</h2><ul><li>场景<br>flask 服务开启 debug 模式, <code>tigger = interval</code> 模式下, 修改代码服务自动重载后定时任务会启动两次, 其它模式下为验证</li><li>原因<br><br><code>scheduler.start()</code> 在 debug 模式下被重载创建了新的进程</li></ul><h2 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h2><blockquote><p>在使用 apscheduler 框架是遇到 <code> Unable to determine the name of the local timezone</code> 错误</p></blockquote><p>修改系统时区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf /etc/localtime<br>ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><span class="hljs-meta"># </span><span class="language-bash">centos7</span><br>timedatectl set-timezone Asia/Shanghai<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium的使用</title>
    <link href="/2018/10/31/Selenium%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2018/10/31/Selenium%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Selenium 是一个自动化测试工具,可以使用它操作浏览器</p></blockquote><span id="more"></span><h1 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenuim <span class="hljs-keyword">import</span> webdriver<br><br>borwser = webdriver.Chrome()<br>browser.get(<span class="hljs-string">&#x27;https://www.taobao.com)</span><br><span class="hljs-string">print(borwser.page_source)</span><br><span class="hljs-string">browser.close()</span><br></code></pre></td></tr></table></figure><h1 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h1><h2 id="单个节点"><a href="#单个节点" class="headerlink" title="单个节点"></a>单个节点</h2><p>获取淘宝首页的搜索框<br><img src="https://i.loli.net/2018/10/31/5bd9adfb07b53.png" alt="taobao"><br>可以发现 搜索框的 id 是 q, name 也是 q.<br>可以使用 find_element_by_name() 和 find_element_by_id() 获取<br>还可以根据 XPath CSS 选择器获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">browser.get(<span class="hljs-string">&#x27;https://www.taobao.com&#x27;</span>)<br>input_first = browser.find_element_by_id(<span class="hljs-string">&#x27;q&#x27;</span>)<br>input_second = browser.find_element_by_css_selector(<span class="hljs-string">&#x27;#q&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>通用方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><br>ele = browser.find_element(By.ID,<span class="hljs-string">&#x27;q&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="多个节点"><a href="#多个节点" class="headerlink" title="多个节点"></a>多个节点</h2><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">find<span class="hljs-number">_</span>elements<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>id<br>find<span class="hljs-number">_</span>elements<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_n</span>ame<br>find<span class="hljs-number">_</span>elements<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>xpath<br>...<br></code></pre></td></tr></table></figure><h1 id="节点交互"><a href="#节点交互" class="headerlink" title="节点交互"></a>节点交互</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">input</span> = browser.find_element_by_id(<span class="hljs-string">&#x27;q&#x27;</span>)<br><span class="hljs-built_in">input</span>.send_keys(<span class="hljs-string">&#x27;test&#x27;</span>)<br>time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">input</span>.clear()<br><span class="hljs-built_in">input</span>.send_keys(<span class="hljs-string">&#x27;test1&#x27;</span>)<br>button =browser.find_element_by_class_name(<span class="hljs-string">&#x27;btn-search&#x27;</span>)<br>button.click()<br></code></pre></td></tr></table></figure><h1 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h1><blockquote><p>将某个节点从位置 a 拖动到 b</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver <span class="hljs-keyword">import</span> ActionChains<br><br>browser = webdriver.Chrome()<br>browser.get(<span class="hljs-string">&#x27;test_url&#x27;</span>)<br>browser.switch_to.frame(<span class="hljs-string">&#x27;iframeResult&#x27;</span>)<br>source = browser.find_element_by_css_selector(<span class="hljs-string">&#x27;#draggable&#x27;</span>)<br>target = browser.find_element_by_css_selector(<span class="hljs-string">&#x27;#droppable&#x27;</span>)<br>actions = ActionChains(browser)<br>actions.drag_and_drop(source,target)<br>actions.perform()<br></code></pre></td></tr></table></figure><h1 id="执行-JavaScript"><a href="#执行-JavaScript" class="headerlink" title="执行 JavaScript"></a>执行 JavaScript</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">browser.execute_script(<span class="hljs-string">&#x27;alert(&quot;TO Bottom&quot;)&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h1><h2 id="属性-文本"><a href="#属性-文本" class="headerlink" title="属性 文本"></a>属性 文本</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">logo = browser.find<span class="hljs-constructor">_element_by_id(&#x27;<span class="hljs-params">zh</span>-<span class="hljs-params">top</span>-<span class="hljs-params">link</span>-<span class="hljs-params">log</span>&#x27;)</span><br>print(logo.get<span class="hljs-constructor">_attribute(&#x27;<span class="hljs-params">class</span>&#x27;)</span>)<br></code></pre></td></tr></table></figure><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">logo.id<br>logo.test<br><span class="hljs-meta">...</span><br></code></pre></td></tr></table></figure><h1 id="切换-Frame"><a href="#切换-Frame" class="headerlink" title="切换 Frame"></a>切换 Frame</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">browser.swiich_to.frame(<span class="hljs-string">&#x27;iframeResult&#x27;</span>)<br>browser.switch_to.parent_frame()<br></code></pre></td></tr></table></figure><h1 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h1><h2 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">browser</span>.implicitly_wait(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h2 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expexted_conditions <span class="hljs-keyword">as</span> EC<br><br><br>browser - webdriver.Chrome()<br>browser.get(<span class="hljs-string">&#x27;https://www.taobao.com&#x27;</span>)<br>wait = WebDriverWait(browser, <span class="hljs-number">10</span>)<br><span class="hljs-built_in">input</span> = wait_until(EC.presence_of_element_located((By.ID,<span class="hljs-string">&#x27;q&#x27;</span>)))<br>button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,<span class="hljs-string">&#x27;.btn-search&#x27;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>,butthon)<br></code></pre></td></tr></table></figure><blockquote><p>可见 <a href="https://selenium-python.readthedocs.io/api.html">官链</a></p></blockquote><h1 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">browser<span class="hljs-selector-class">.add_cookie</span>(&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;name&#x27;</span>&#125;)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(browser.get_cookies()</span></span>)<br>browser<span class="hljs-selector-class">.delete_all_cookies</span>()<br></code></pre></td></tr></table></figure><h1 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">browser.execute<span class="hljs-constructor">_script(&#x27;<span class="hljs-params">window</span>.<span class="hljs-params">open</span>()</span>&#x27;)<br>handles = browser.window_handles<br>browser.switch<span class="hljs-constructor">_to_window(<span class="hljs-params">handles</span>[1])</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iview自定义Modal</title>
    <link href="/2018/10/31/iview%E8%87%AA%E5%AE%9A%E4%B9%89Modal/"/>
    <url>/2018/10/31/iview%E8%87%AA%E5%AE%9A%E4%B9%89Modal/</url>
    
    <content type="html"><![CDATA[<blockquote><p>使用一个自定义的组件作为 Modal 框的内容 </p><p>内容组件包含有两个 Input 组件，用于实现两个变量的输入。</p></blockquote><span id="more"></span><h1 id="自定义组件-add-vue"><a href="#自定义组件-add-vue" class="headerlink" title="自定义组件 add.vue"></a>自定义组件 add.vue</h1><p>为两个 Input 组件分别定义 on-change 事件的方法。只要 value1 的值或者 value2 的值发生变化，就会向父组件 emit 对应的事件 value1 和 value2。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Row</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;heart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Icon</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>save<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value1&quot;</span> @<span class="hljs-attr">on-change</span>=<span class="hljs-string">&quot;value1Change&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Input</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value2&quot;</span> @<span class="hljs-attr">on-change</span>=<span class="hljs-string">&quot;value2Change&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Input</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Row</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;add&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">value1</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">value2</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">value1Change</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> obj = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;value1&#x27;</span>, obj.<span class="hljs-property">value1</span>)</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">value2Change</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> obj = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;value2&#x27;</span>, obj.<span class="hljs-property">value2</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125; </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h1><p>引入自定义内容组件 add,监听事件 value1 和 value2, 若在此过程中父组件有需要传递给内容组件的参数，需要在 props 中填入。onOk 项后定义触发模态框中 ok 按钮的回调函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;openModal&quot;</span>&gt;</span>弹出模态框<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> add <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./content/add.vue&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">v1</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">v2</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">            add</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">openModal</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$Modal</span>.<span class="hljs-title function_">confirm</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">scrollable</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">okText</span>:<span class="hljs-string">&#x27;保存&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(add, &#123;</span><br><span class="language-javascript">                            <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">                               </span><br><span class="language-javascript">                            &#125;,</span><br><span class="language-javascript">                            <span class="hljs-attr">on</span>: &#123;</span><br><span class="language-javascript">                                <span class="hljs-attr">value1</span>: <span class="hljs-function">(<span class="hljs-params">value1</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">v1</span> = value1</span><br><span class="language-javascript">                                &#125;,</span><br><span class="language-javascript">                                <span class="hljs-attr">value2</span>: <span class="hljs-function">(<span class="hljs-params">value2</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">v2</span> = value2</span><br><span class="language-javascript">                                &#125;</span><br><span class="language-javascript">                            &#125;</span><br><span class="language-javascript">                        &#125;)</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-attr">onOk</span>: <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">v1</span> == <span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">v2</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="language-javascript">                            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$Message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;信息填写不完整!&#x27;</span>)</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                        <span class="hljs-keyword">const</span> msg = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$Message</span>.<span class="hljs-title function_">loading</span>(&#123;</span><br><span class="language-javascript">                            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;正在保存..&#x27;</span>,</span><br><span class="language-javascript">                            <span class="hljs-attr">duration</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">                        &#125;)</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">saveLink</span>(msg)</span><br><span class="language-javascript">                    &#125;                        </span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125; </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="点击确认的回调"><a href="#点击确认的回调" class="headerlink" title="点击确认的回调"></a>点击确认的回调</h1><blockquote><p>自定义了一个 table 的按钮  点击按钮 触发自定义组件  </p><p>点击确认的回调函数 onOK</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">edit (index) &#123;<br>                <span class="hljs-comment">// 编辑按钮</span><br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$Modal</span>.<span class="hljs-title function_">confirm</span>(&#123;<br>                        <span class="hljs-attr">scrollable</span>: <span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">okText</span>: <span class="hljs-string">&#x27;确认修改&#x27;</span>,<br>                        <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(edit_task, &#123;<br>                                <span class="hljs-attr">props</span>: &#123;<br>                                    <span class="hljs-attr">autofocus</span>: <span class="hljs-literal">true</span><br>                                &#125;,<br>                                <span class="hljs-attr">on</span>: &#123;<br>                                    <span class="hljs-attr">model1</span>: <span class="hljs-function">(<span class="hljs-params">model1</span>) =&gt;</span> &#123;<br>                                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">model1</span> = model1;<br>                                    &#125;<br>                                &#125;,<br>                                <span class="hljs-attr">onOk</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                            &#125;);<br>                        &#125;,<br>                        <span class="hljs-attr">onOk</span>: <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">// 回调函数</span><br>                        &#125;<br>                    &#125;);<br>                &#125;);<br><br></code></pre></td></tr></table></figure><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><img src="https://i.loli.net/2018/10/31/5bd929f2223f4.png" alt="table"></p><p><img src="https://i.loli.net/2018/10/31/5bd929f2b4e63.png" alt="edit"></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用flask实现自定义Prometheus的exporter</title>
    <link href="/2018/10/30/%E7%94%A8flask%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89Prometheus%E7%9A%84exporter/"/>
    <url>/2018/10/30/%E7%94%A8flask%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89Prometheus%E7%9A%84exporter/</url>
    
    <content type="html"><![CDATA[<blockquote><p>想要简单的把监控的东西 放在一个 dict 里面 然后 用 flask 提供服务给 Prometheus 采集<br>官方的 prometheus_client 提供的 server 不满足需求  找了一圈也没找到合适的轮子 所以自己造一个  方法感觉略蠢  有好用的轮子  M我  谢了  </p></blockquote><span id="more"></span><h1 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h1><p><a href="https://github.com/prometheus/client_python">官方的demo</a>提供了生成 Gauge 的方法 Gauge()<br>所以我赌五毛钱应该可以 遍历 metrics  然后将生成的 Gauge 放入一个 list 中 再使用 prometheus_client.generate_latest()方法<br>将数据整理为 Prometheus 需要的格式  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> gauge_buffer:<br>        t.labels(instance=<span class="hljs-string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;ip&#x27;</span>, <span class="hljs-string">&#x27;port&#x27;</span>)).<span class="hljs-built_in">set</span>(data[index_buffer[gauge_buffer.index(t)]])<br>        <span class="hljs-comment"># generate_latest更新列表</span><br>        res_list.append(prometheus_client.generate_latest(t))<br></code></pre></td></tr></table></figure><p>跑一下代码 发现可行…<br><strong>but</strong>  当第二次访问的时候 View 函数会重新调用 Gauge() 方法 初始化  第二次访问接口就会报错<br>google 了好久 没有合适的轮子 只好自己想了个蠢的办法 <em>(ps:肯定有更好的方法 我一直在寻找)</em><br>在 flask 初始化服务的时候 先初始化 Gauge 同时定义一个列表 来记录 Gauge 实例的 index<br>然后在 view 函数被调用的时候更新数据 再根据 index 索引到 Gauge<br>最后 使用 prometheus_client.generate_latest() 返回 response    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ele = Gauge(<span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ele), <span class="hljs-string">&#x27;&#x27;</span>, [<span class="hljs-string">&#x27;instance&#x27;</span>, ])<br>gauge_buffer.append(ele)<br></code></pre></td></tr></table></figure><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DATE :  2018/7/23 </span><br><span class="hljs-comment"># AUTHOR : kongandmarx@163.com</span><br><br><br><span class="hljs-keyword">import</span> prometheus_client<br><span class="hljs-keyword">from</span> prometheus_client <span class="hljs-keyword">import</span> Gauge<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Response, Flask<br><br>test = &#123;<span class="hljs-string">r&#x27;monitor&#x27;</span>: <span class="hljs-number">1</span>&#125;<br>app = Flask(__name__)<br>gauges = test<br><span class="hljs-comment"># Gauge列表</span><br>gauge_buffer = []<br><span class="hljs-comment"># 位置列表</span><br>index_buffer = []<br><span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> gauges:<br>    <span class="hljs-comment"># 记录Gauge 列表位置</span><br>    index_buffer.append(ele)<br>    <span class="hljs-comment"># 循环生成Gauge实例,添加到列表</span><br>    ele = Gauge(<span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ele), <span class="hljs-string">&#x27;&#x27;</span>, [<span class="hljs-string">&#x27;instance&#x27;</span>, ])<br>    gauge_buffer.append(ele)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/metrics&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">metrics</span>():<br>    <span class="hljs-comment"># 每次访问调用 test</span><br>    data = test<br>    res_list = []<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> gauge_buffer:<br>        t.labels(instance=<span class="hljs-string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;ip&#x27;</span>, <span class="hljs-string">&#x27;port&#x27;</span>)).<span class="hljs-built_in">set</span>(data[index_buffer[gauge_buffer.index(t)]])<br>        <span class="hljs-comment"># generate_latest更新列表</span><br>        res_list.append(prometheus_client.generate_latest(t))<br>    <span class="hljs-keyword">return</span> Response(res_list, mimetype=<span class="hljs-string">&#x27;text/plain&#x27;</span>)<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">True</span><br>    app.run(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">10110</span>)<br>    <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如果武林外传这个故事一直发展下去会是什么样子</title>
    <link href="/2018/10/26/%E5%A6%82%E6%9E%9C%E6%AD%A6%E6%9E%97%E5%A4%96%E4%BC%A0%E8%BF%99%E4%B8%AA%E6%95%85%E4%BA%8B%E4%B8%80%E7%9B%B4%E5%8F%91%E5%B1%95%E4%B8%8B%E5%8E%BB%E4%BC%9A%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90/"/>
    <url>/2018/10/26/%E5%A6%82%E6%9E%9C%E6%AD%A6%E6%9E%97%E5%A4%96%E4%BC%A0%E8%BF%99%E4%B8%AA%E6%95%85%E4%BA%8B%E4%B8%80%E7%9B%B4%E5%8F%91%E5%B1%95%E4%B8%8B%E5%8E%BB%E4%BC%9A%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>《小青篇》<br>我奉老爷之命找回小姐，小雨时节出门，到今日，算来一年有余。<br>一路停停走走，我又来到七侠镇。抬头一望，《同福客栈》的匾额落漆斑斑，石阶上青苔厚如浓砚。这就是小姐生活过三年的地方，我把手按在那道哀尘遍布大门上，思绪万千。<br>“诶！……客栈已经关门了！”身后有人急切的喊。我回头一望，一个身穿麻布，头绑粗巾的胖大哥手提扫帚站在我身后。<br>“是你！”二人同时开口说道。我微微一笑，看到他拿的清扫器具，对其来意了然。<br>“还在找小郭呢？”李大嘴问。<br>我点头：“找不到小姐，我就不回去。”<br>“是是是，小贝她……”李大嘴叹口气：“放心吧，秀才那里就包我身上了。”<br>我从包里取出四十两银子，放在大嘴手里，道“姑爷那，就拜托你了。”<br>“诶！”他仿佛又没什么可说的了，讪讪的笑笑，又说“进来坐坐吧。”<br>“不了，我这次回来，是想打听一下有没有佟掌柜他们的消息”<br>“掌柜的回汉中了，听说和老白一年前就出门了，现在也不知道找着小贝没有。”<br>我暗暗捏了捏剑柄，道：“如果见到佟掌柜，替我传话，我家老爷有请，共议降魔大计。”<br>言毕，我再拱手“后会有期。”<br>《展红绫篇》<br>六年前，我托盗圣之福，以一本《缉盗指南》入身六扇门，成为天下第一女捕头，后嫁于追风，名气更盛。夫妻二人携手破案，另各路贼盗闻风丧胆。<br>但近月，却有几桩案子着实让我们束手无措。先是少林寺的玄难大师被人点穴至死，后是武当派的白眉道长死于剑下，接着是峨眉派的冲琳师太毙命于掌下。那手法，剑法，掌法分别是葵花点穴手，衡山剑法以及惊涛掌。江湖身怀绝学的人不少，但可以另三大高手一招毙命的人，连郭巨侠也做不到。<br>经过侦查，我们发现，三人或许是死于同一人之手，因为他们死前，都接到了一枚火焰令牌——赤焰狂魔。<br>赤焰狂魔是男是女，是老是少谁也不知道，只知道他杀人前会送出一枚火焰牌，而接到他令牌的人，都死了。<br>六扇门降魔令已发，各派掌门想必已陆续收到，下月初四，只是不知赤焰狂魔是否会出现了。<br>还有，他会来吗？我翻开《辑盗指南》，突然想起，已经一年多没有他的消息了。<br>听闻七侠镇发生巨变，关中大侠死于非命，同福客栈的人分兵多路追查真凶，至今未回。<br>“嗖”一枚暗器破窗而入，我急急躲开，只见房柱上一道赤红令牌末柄而入。<br>“赤焰狂魔！”我惊呼。推开门窗，一轮明月西头高挂，房阶银色如洗，哪里有半分人影。<br>《赛貂蝉篇》<br>从七侠镇回来，我和小翠的心结解开，回关东后，她出资，我们开了一家客栈。<br>那日无事，我于客栈前闲坐，手摇香扇，看车马往来，寻日东升。<br>“赛掌柜，别来无恙”，有人立在跟前，遮去大半阳光，我眯眼看去，依稀觉得眼熟“您是？”<br>“是我。”来者掀开斗笠，露出一张风情万种的鹅蛋脸来。<br>“佟掌柜？”，我笑迎道：“你怎么来了，快坐快坐。翠儿～快来呀，看谁来啦～”<br>“不忙，”佟掌柜道，“途径这里，甚是叨扰，我那边还有几个朋友，想借住一宿，不知是否方便？”<br>“方便方便！”我赶忙道，搀着佟掌柜进门“你这打哪儿走啊？白大哥呢？可在我这走走地位，耍几天要得。”<br>佟掌柜突然黯然神伤，道“有事未完，他日一定登门再会。”<br>“你这是……咋啦？”我瞧出不对，问“出啥事儿了？跟我说，我义不容辞。”<br>佟掌柜凄凄一笑，道了声谢，没有再说下去，她回头道：“展堂～”<br>街头几辆那车滚滚而来，带头之人，正是白大哥。<br>“白大哥，你的手……”我看见白大哥的食中二指齐断，双掌上的三根手指分外突兀。<br>白大哥微微抿嘴，朝我凄凉一笑“叨扰了，出了点小事。”<br>“你们这是？”我惊惧不已“到底出啥事了，跟妹子说吧。”<br>白大哥佟掌柜对眼一望，回头说“赛掌柜，我们要赴往京城参加降魔大会，恳请你为我们准备几匹快马……”<br>我心头狂跳“你们……”<br>“还有，你有小贝的消息吗？”佟掌柜突然说，一滴泪从她的眼睛流出，在骄阳下印出一片霞影。<br>《蕙兰篇》<br>一饮琼瑶百感生。子骏今夜谈生意去了，看月色朦胧甚好，我坐桃树下独醉。<br>人生真是妙不可言，两年前我还是一无所有，浪迹天涯的杨惠兰；两年后我已是富甲一方，名声显赫的杜夫人。只是，偶尔回眸，想起当初形骸放浪，也会不禁嗤笑，嗤笑中也有淡淡的落寞。<br>枝影疏朗，我伸了个懒腰，一瞥，却看见两条人影闪过……<br>“谁！”我横起右手，一记火焰刀蓄势待发。<br>“蕙兰，许久不见，”来人从墙头翻身下来，却是两个曼丽女子——小郭，无双。<br>“怎么是你们？”我听闻七侠镇发生巨变，一夜间秀才不幸去世，小贝不知所踪，看来都是真的了。<br>“我们有事请教，”无双拱手道“你的西域火焰刀师承何处？”<br>我略微踌躇，火焰刀乃西域秘传绝技，向来单脉传承，事关家师，不可向他人道来。<br>“不知你们为何要问火焰刀之事？”<br>小郭恨恨道“因为秀才死于火焰刀下！我们想知道，火焰刀失传已久，除了你还有谁会用。”<br>我不禁哑然，“家师远在西域，何况他与秀才无冤无仇，不可能至中原杀人，而我，自嫁给子骏，至今尚未出过门。”<br>“我们没有怀疑你”，无双道：“只是，火焰刀难道只有你们师徒二人会用吗？”<br>我皱眉：“火焰刀乃不传秘技，除了师傅和我，我想不出还有第三人会用。”<br>我又道：“这事疑点众多，非三言两语可以说清，二位不如留下详谈。蕙兰定当尽力协助追拿真凶。”<br>“实不相瞒，我们怀疑秀才的死和小贝失踪，都和江湖近期崛起的魔头有关！”小郭掏出一枚火焰令牌：“这是在秀才身上找到的。”<br>“赤炎狂魔！”我惊呼。<br>“不错”无双看了看小郭“出事后师兄和掌柜一组，我和小郭一组分头寻找真凶，已经一年有余，现在郭巨侠召开降魔大会，我和小郭决定回京赴会，或许可得知真凶。”<br>“蕙兰有何事可以相助一二，两位尽管吩咐。”<br>“多谢你的好意，”小郭拱手：“杜家财大势大，如果有魔头的消息，请帮忙留意。”<br>“那是自然。”<br>“告辞了”两人拱手。几个起落，她们的身影已消失在蒙蒙夜色中。<br>我放下酒杯，只觉得此事古怪异常，心想还是给师傅修书一封为好。<br>“来人～”我喊道。<br>四下沉寂，唯虫鸣清耳，风呼啸而过，我突然感觉身后有一道炙热的气焰斩来，匆匆躲过，我翻身看去，只见一个全身黑衣的，面蒙黑巾的人站在房檐下，他起手为刀——火焰刀！<br>《画画老人篇》<br>我这一生没别的爱好，就喜欢喝二两薄酒，嚼几张肉夹馍，酒足饭饱，也不干什么，就喜欢画上几张武功，过个眼瘾。<br>很多人问我叫什么，真名我早忘了，江湖弟兄送的几个外号倒是还记得一点，几十年前，大家都叫我缺德道人，几十年后，又有谁能记得起我。<br>最近几年我感觉自己真的老了，眼又瞎，耳又聋，那么多的武功秘籍，我还没画完呢……算了，画了又能怎么样，我的身子骨自己知道，画的了武功，也练不成了。<br>但我这一身的武艺，脑中不断浮现的武林秘技，白白在尘土中泯灭实在不甘。所以，我找了弟子，要把我一生所有，倾囊相授。<br>不愿学？他敢！我杀他爹娘，杀他爱人，杀他一切在乎的人，杀到他自己来找我。<br>今夜，他终于来了。<br>“你来晚了”我扬一扬手上的酒坛“酒都喝完了，你来干嘛？”<br>“杀你”来人恨道。<br>“黄口小儿，武功学全了吗？”我嗤笑“你有把握杀的了我。”<br>“我的武功都是你教的，以前没有，现在有了。”他从怀里摸出一把菜刀，6 寸长 3 寸宽，通身玄铁，迸射出一股惊人的杀气。<br>“我很早以前就对你说过，杀人要无心，无心才能无形，”我拿起一张肉夹馍，不住磨砂，道：“你现在被杀气充昏了头，刀拿得住吗。”<br>“拿得住。”他道：“你派人杀了我母亲，杀了我兄弟，还杀了我最爱的蕙兰！不就想让我再拿起这把刀吗？”<br>“哈哈哈哈哈……”我大笑：“你资质太差，这辈子也学不全我的武功，杀的那些人，只是我新弟子的磨刀石而已。”<br>“你……”他的手微微颤抖：“你把她给……”<br>“不错，你学不了的，她一学就会，你学的会的，她一学就精，她是天生的奇才，是做我传人的最佳人选。”我讥笑道“可惜了这么好的苗子，却不愿意学武功。所以，我只好用了点手段，哈哈哈！”<br>“老匹夫！”他怒喝，那杀意直冲云霄，一轮新月印出残红。<br>我冷笑，将肉夹馍甩出，挥出弧形，所到之处，事物尽被斩断，包括他拿刀的右手，道：“我今日废你武功，留你一条狗命，滚吧！”<br>“我今日留下右手，把你教的武功还你，你我师徒恩义已尽！”他冷汗兢兢道。<br>我顺着他的目光低头看向胸口，一把菜刀末柄而入，玄铁的寒意直斥心扉：“哈哈哈……不愧是我的好徒儿，这是……是何刀法？”<br>“师傅忘了，”他的声音传来，我已经渐渐听不清了……<br>“我，姓，李”！他一字一句道。<br>《燕小六篇》（断更了这么久，不好意思大家，现在补上两篇）<br>“干了几年铺头，小六已经被郭巨侠提携到六扇门了。七舅姥爷，师傅，小六没给你们丢人……但是，我真的好想七侠镇，好想你们大家啊。”<br>“今天又到小六巡班了，带队的老刘和师傅一样，对小六挺照顾的，这里的兄弟虽然不像七侠镇那班人那么有趣，但也讲义气。郭巨侠说，让我好好历练，总有上升的一天。七舅姥爷，师傅，你们放心，小六一定会有出息的。”<br>“这几天天可真黑啊，天乌黑乌黑的，就像师傅的两只大手，却又不下雨，闷死小六了。这几天巡逻的人更多了，查禁也更严了，听说郭巨侠要开什么‘耳朵木木鬼大会’，会有很厉害的大盗会出现，希望小六碰到，就可以立大功了。等小六当上总铺头，一定回去接你们……乌云啊乌云，如果你听见了我的话，就飘到十八里铺，把小六说的话告诉我师傅吧”，我走在宫墙脚，抬头看云，从怀里摸出唢呐，忍不住叹了口气。<br>“小六”一只手突然搭在我肩上，声音几乎在耳边响起。<br>“谁！”我连忙回头，一个全身黑袍的的人站在我眼前，他的脸压低在帽子下，使人看不清楚，但声音，我却是很熟的。<br>我半肯定的问：“莫小贝？”<br>来人点点头。<br>“你咋来这儿了？”我高兴说“我师傅还好吧，无双在七侠镇捕快当的咋样，大家伙过得好吗？”<br>迟疑了良久，小贝开口道，“说来话长，我这次来，有事找你。”<br>“嘛事”<br>“杀你！”小贝突然抬头，还没等我喊出声，我就后脖子一痛，晕了过去，我躺在地上，最后一眼看的是黑压压的云，一滴雨落下来砸在脸上，我心里想的是，下雨了，可我唢呐还没吹呢。<br>《白展堂篇》<br>如果一个人的人生可以用天气表示，那么我初出江湖的天就是凉爽但又压抑的阴天，我在客栈的天，就是湛蓝又明媚的晴天，而现在，我的天都是雨天。<br>二月初四，小雨，今天降魔大会将在京城郭府召开，平时我是不敢见捕快的，但现在，心中的意念让我不惧前行。我和湘玉快马加鞭，京都已经近在眼前。<br>秀才惨死，小贝失踪，客栈分崩离析，现在在湘玉的眼里我只能看到泪水和一股执念，还看到一丝疲惫和恨意，看得久了，我哑然发现，里面的失意也有我的倒影。我发誓，一定要揪出幕后真凶，将他绳之以法！<br>“展堂，你看前方是谁？”湘玉突然开口。<br>我收回心绪，眺望去，只看见一个捕快躺在地上——燕小六。<br>我们快速跑到小六那边。“驭……”喝马停下，两人相顾，只从对方眼里看到了自己的疑惑。<br>我下马扶起小六，朝湘玉摆摆手，释意让她不必担心，“只是晕过去了。”<br>“为什么小六会在这，光天化日，朗朗乾坤，是什么人做的？”湘玉下马问道。<br>我摇了摇头。身后却传来一个雌雄莫辨的声音，“是我！”<br>我跳到湘玉前面，把她护在身后，随手接过对方投来的暗器——一柄赤炎令牌。<br>“赤炎狂魔”我吃惊看去，这个魔头一身黑衣，连面上也蒙了黑巾，让人看不清他的样子。没想到他如此大胆，居然直进京城赴约对付他的降魔大会。<br>“你把小贝还给我！”湘玉惨叫一声，向前飞扑过去，我一把拉住她，眼睛却时刻注意着眼前魔头的动向。<br>实话说，从刚刚他发镖的身法看，和他动手，我绝对会输，于是用言语拖住他，等京中高手赴会，合力降魔，“你为什么要对一个小捕快动手？”<br>我看到赤炎狂魔身影微微颤抖，他用左手狠狠的抓住自己的右手，仿佛要压制住什么东西一样，雌雄莫辨的声音传来“没有饵，怎么引盗圣上钩？”<br>果然是冲着我来的，我不禁想道。<br>“小贝在哪？”湘玉的泪水夺眶而出，她盯着魔头，却没有再上前。<br>沉默良久，魔头缓缓道，“她已经死了。”<br>“啊！！！”湘玉痛哭，拔剑冲上前道，“我要你偿命！”<br>“不好，”我身法立动，挡在湘玉身前，只见魔头全是颤抖，异乎寻常，仿佛坐以待毙一样，等待湘玉一剑刺下。<br>说迟时那时快，我左手拉住湘玉，右手虚掩，却一指点向魔头诸身要穴。魔头略微失神，他一定料不到我居然在救人的时候，敢大胆出手，他极速后退，好一招移形换影。<br>这一剑，一拉，一点，一闪，不过刹那，魔头终究晚了半步，他躲过了我凌厉的一指，却被湘玉的长剑挑开了面巾。<br>眼前的这张脸，是让我们日思夜想，辗转难眠的一张脸，我愣住了。<br>“小贝！”湘玉又惊又喜，又疑又恼的叫道，“怎么是你？”<br>“白大哥，嫂子，”小贝失声痛哭，“你们杀了我吧。”<br>“你在说什么啊？”湘玉跌跌转转的上前，她拉住小贝的手，用力抱住她。<br>小贝却一把推开湘玉，她紧皱眉头，仿佛下定决心一样，大声喊到，“我对不起大家，对不起，秀才是我杀的！！！”<br>我们错愕……<br>突然听见马蹄声近，带着狂怒，我略微抬头，只见小贝身后一女子飞扑而来，口中大喝“排山倒海！！！”<br>《郭芙蓉篇》待更<br>二月初四，小雨，我和无双快马加鞭，直奔京城。<br>秀才已经离世一年了，我永远也不会忘记，那天，最后一次，他躺在我怀里，眼睛里含着温柔的笑意，他想摸我的脸，却重伤无力。<br>我发誓，我一定要让凶手血债血偿！这一年来我勤练惊涛掌，功力居然突飞猛进，一双细皮嫩肉的手掌，也在马背上厚茧增生。但这一切，为了报仇，我义无反顾。<br>今日降魔大会，掌柜和老白他们也一定来了吧，不知道他们是否打探到赤焰狂魔的消息？想到此处，我心更切。<br>过了京郊，京城就在眼前，我抬头看满天飞雨，时节尚寒，雨中夹杂着细碎的冰屑，娘的寒腿不知有无发作，爹爹是否还好，女儿不孝。<br>临近城下，前方依稀有几个人影，我看到一个身穿黑袍的神秘人背对着我，突然，她大声喊到，“秀才是我杀的！”<br>我的心好像被人紧紧的揪住，痛不可言，我深吸一口气，心痛转为了愤怒，杀夫仇人就在眼前，我怎能让过。<br>“排山倒海！”我飞扑过去，用尽全身力气，势必要她毙命掌下！<br>“小郭！”无双在身后惊喝。但我已管不了那么多了。<br>这掌即将打在黑袍人身上，突然有人抢出，一把推开了黑袍人。<br>掌柜的！<br>电光火石，我自收掌不及，这十层功力的惊涛掌，就这样结结实实的打在了她身上。<br>“湘玉！”老白冲上来，他一把抱住掌柜，神色甚切。<br>我低头看向自己的双手，血迹斑斑，那是掌柜的血！<br>抬头，看黑袍下，小贝哭的涕泗横流，她泣不能声，愣愣的看着一切。<br>“小贝～小贝，你过来”掌柜的轻轻招呼，她的胸襟上都是呕出的血，鲜红无比。<br>小贝走过去，她跪在地上，失声喊道“嫂子！”<br>“你跟嫂子…说实话…你为什么…要…要杀秀才”<br>“我中了移魂大法，那时候我也不知道怎么回事，等我醒过来，秀才哥哥就被我打死了。”<br>“果然…果然是他”掌柜眼里的生气渐渐流逝，她伸出一只手，轻轻的抵在小贝的额头，道“好孩子，那不关你的事，把一切都忘了吧。”<br>移魂大法！<br>“嫂子对…对不起你，以后，你要…一个人，好…好好的活下去。”湘玉姐柔柔着注视着小贝，她最后看看了一眼白大哥，那一眼，让我想起秀才死前看我的眼神。<br>白大哥痛哭流涕，他批上小贝的黑袍，轻轻吻了湘玉姐，说“你放心。”<br>雁过留痕，白大哥已蒙面飞入京城，黑袍上，是一朵火红的赤炎。<br>“怎么会这样呢？”我看着眼前的一切，心神大乱“怎么会这样呢！”<br>“小郭！”无双上来，拦在小贝面前，她是怕我对小贝动手吗？<br>我怎么能再动手？<br>“湘玉姐，我……我……”我突然吐出一口血，真气在我体内四处流窜，我哈哈哈大笑，“为什么会这样！！！”<br>“小郭？”声音远远的传来。<br>眼前的女子是谁，郭芙蓉是谁？我为什么要在这里，我？我是谁？<br>《我是谁》<br>我不知道自己是谁，我也不知道自己要到哪里去，我醒来看的第一个人，是一个温柔美丽的女子，她说她叫祝无双。<br>我是谁？我问她<br>她轻轻一笑，笑容中有一份无可奈何，她说我叫祝白玉，是她的妹妹。<br>我再问，为什么我什么都不记得了，为什么我们长得不像。<br>她说江湖中本来就没有那么多为什么。话了，她给我盖上被子，说出去拿点吃的。<br>“等等，”我叫住她，“佟湘玉和白展堂是谁，为什么我脑海里一直响着他们的名字？”<br>她略微纳罕，只是刹那，神色又变得柔和起来，“他们是当世侠侣，以前你最喜欢听说书的讲他们的故事了。”<br>我疑惑，想再问，她已经出去了。<br>躺在床上十分难受，我忍不住起身，看到桌子上有纸笔，拿起来，发现自己居然还记得写字，我写下“白展堂，佟湘玉”这几个字，脑海中仿佛有什么东西要破壳而出，不经思索，我提笔又写下“莫小贝，郭芙蓉，吕轻候，李大嘴”这几个字。<br>为什么这些名字我如此耳熟，他们的容貌我却没半分印象。<br>我再提笔，写“祝白玉”这三字，这个名字我为何如此陌生？<br>“把笔放下，你刚好，不能使力”无双姐走进来，她看到我写字，立刻放下手上吃的，把我扶上床。<br>她看了那些名字，留下一滴泪。<br>“你怎么了”我问。<br>“没什么，”无双姐拭去泪，说“吃吧，等你好了，我们就回家。”<br>“回家，回哪儿？”<br>“同福客栈。”<br>（全书完）</p>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用王家卫的方式改编《武林外传》</title>
    <link href="/2018/10/26/%E7%94%A8%E7%8E%8B%E5%AE%B6%E5%8D%AB%E7%9A%84%E6%96%B9%E5%BC%8F%E6%94%B9%E7%BC%96%E3%80%8A%E6%AD%A6%E6%9E%97%E5%A4%96%E4%BC%A0%E3%80%8B/"/>
    <url>/2018/10/26/%E7%94%A8%E7%8E%8B%E5%AE%B6%E5%8D%AB%E7%9A%84%E6%96%B9%E5%BC%8F%E6%94%B9%E7%BC%96%E3%80%8A%E6%AD%A6%E6%9E%97%E5%A4%96%E4%BC%A0%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>追风赶月别留情，这是我八岁时候听到的话，那年我还在葵花派学点穴，师父说指如疾风，势如闪电，你的手追上敌人容易，但身子追上手，就难了。<br>师父让我记住这句话，我一直以为这是功夫的关口，后来我才知道，功夫的关口不在追风赶月，而在抽身回头。<br>我叫白玉汤，那年我初入江湖，以为各门各派，镖局绿林，生活都大不相同。过了些年我才明白，原来穷的时候，所有人都一样。<br>·1<br>很多年以后，我有个朋友叫做吕轻侯，他说侠客是个悖论，行侠仗义的人但凡想要报酬，那就不叫侠客，只能等这人饿死，大家才会惋惜认同。<br>但人们往往不会关心大侠有没有饿肚子。<br>我跟姬无命决定去当个侠盗，填饱肚子是一方面，像楚留香一样扬名立万更是所有人都向往的。<br>后来我才发现，盗圣也好，盗神也罢，两个刚刚踏入江湖的小毛贼，很难闯出名声。门派里的人不认识你，黑白两道也不给你面子，就算你真偷到了东西，人往六扇门里一报案，江湖里屁大点浪都掀不起。<br>有一天我和姬无命坐在京城的小酒馆里喝酒，京城中人潮涌动，像是大海，四面八方散开一汪水，唯独我像块礁石。<br>姬无命说，想成名？想当楚留香？楚留香家里有田，海里有船，你当年穷得连饭都吃不起哪有资格成名？<br>我静静喝着酒，半晌，说出一句话：正是因为穷得吃不起饭，我才更要成名。<br>我以为姬无命那天喝醉了，趴在桌上没再说话，很久以后他才告诉我，其实他清醒得很，只是他知道我们不是一条路上的人，他没办法回答我。<br>那天过后，我开始学楚留香，我分不清自己究竟是想留下侠名，还是仅仅想让自己拿钱的时候更心安理得一些。<br>我遇见楚留香那天，他正在王府的屋顶上喝酒，一轮圆月在他头顶，月光倾洒在他的手边，像是在为他斟酒。<br>楚留香看见我，轻轻笑道：“你也来偷贵妃镜？”<br>他的声音仿佛一汪清泉，我站在屋顶，风声在我耳旁呼啸，我听见自己说：楚留香，我一定会比你先偷到这面镜子。<br>有时候人的身体会欺骗自己，其实我想告诉楚留香，我仰慕你很久，能不能做个朋友。<br>但是我开口，便要与他争个胜负。<br>谁知楚留香摸了摸鼻子，笑一笑道：“既然你这么想要，那就让给你好了。”<br>我一怔，眼前衣袂飘飘，楚留香已飘然而起，他向我甩来半壶清酒，又笑着摇了摇头。<br>“你来之前，我已经决定不偷贵妃镜，因为我的经验告诉我，这里将会有大麻烦。”<br>我像可达鸭一样眉头一皱：经验？<br>楚留香笑道：“我的经验并不多，只有一点点关于女人的经验。今晚当值的是天下第一女捕头，只要有女人在场，总会有麻烦上门。”<br>那一夜，当展红绫追出我三千里外，我终于信了楚留香的话。<br>展红绫告诉我，她抓不住我，就不能进六扇门，进六扇门是她一直以来的梦想，绝不会这样破灭在我的手中。<br>说着说着，几乎要落下泪来。<br>楚留香说，我为数不多的经验告诉我，女人的眼泪，往往会给你带来天大的麻烦。<br>楚留香说的话很少会错，至少那一次我没能抗住。<br>我给展红绫写了本书，名叫辑盗指南，每一行都有自己的规矩，自己的暗语，我把这些都教给展红绫，实则是坏了规矩。<br>因为这本书，我被整个盗门追杀。<br>展红绫问过我，说要不要帮忙？我冲她摇了摇头，说你是官，我是贼，我们从来都不同路，你帮不来的。<br>姑娘就又想哭。<br>我慌张溜走了，心跳的有些快，我问姬无命这姑娘是不是看上我了，姬无命说我对不起你。<br>我还一头雾水的时候，姬无命又一把将我狠狠推开，说：快跑！<br>我这才反应过来，当即推窗望月外加燕子三抄水，在盗门的人合围之前，遁身到暗夜之中。<br>茫茫江湖，我第一反应，竟然是去找楚留香。<br>·2<br>我曾经听人说过，其实谁都可以变得狠毒，只要你明白什么是嫉妒。<br>理论上来讲，我应该嫉妒楚留香，我想要侠名，想要红颜知己，想要富可敌国，最后我发现自己除了长得跟他一样帅，好像没什么能比得上他。<br>但我还是嫉妒不来。<br>我经常想起我们初见的那一天，楚留香明明知道我是盗圣白玉汤，这些年来学着他的手段，留字条，穿白衣，夜里高来高去。<br>他却一句话都没有多说。<br>偷贵妃镜的那天晚上发生了许多事，其实只要有一点点变数发生，我的人生就会大不相同。<br>我问过楚留香，你为什么要这样给我留面子？<br>楚留香只是笑，他说初出江湖的年轻人想要求个侠名，是顶有面子的事情，怎么就成了我给你留面子？<br>我从来没有遇到过这样的人。<br>盗门找上楚留香的时候，楚留香淡淡笑着，他说白玉汤是我的朋友，从来没有人可以伤害楚留香的朋友。<br>他这句话说得很温和，很稳定，语气不急也不缓，像是在说江湖中最简单不过的道理。<br>盗门的人怂了。<br>但他们面子不能丢，说白玉汤死罪可免，活罪难逃。<br>楚留香摸了摸鼻子，笑道：“白玉汤说的那些暗语和规矩，都不是捕快拿人的证据，倘若你们用这些暗语和规矩做些好事，我想捕快也不会多说什么。倘若你们一定要去中饱私囊，就算是我这么怕麻烦的人，一旦看见，都不会束手不理。”<br>盗门的人还在叽叽喳喳，我站在楚留香身后，那袭白衣像极了我故乡的青山白水。<br>我轻咳两声，站出身来。<br>楚留香看了我一眼，我板着脸，说这是我的事，不劳盗帅操心，我白玉汤坏了规矩，三刀六洞，我受下便是。<br>手起刀落，我一柄匕首在身上戳了六个窟窿。<br>盗门的人一下静住，片刻后又吵闹起来，说白爷真是豪气冲天，我等自愧不如。还有说盗圣不愧是盗圣，难怪能交到楚留香这样的朋友。<br>瓶瓶罐罐递到我眼前，大抵都是治伤的药。<br>我听见楚留香在我背后叹气，我笑了笑，知道我这次终于算是成名了。<br>·3<br>后来楚留香告诉我，说其实我知道你那三刀六洞，是怕我难做，是怕那些人说我的闲话。但楚留香倘若不被人说几句闲话，那还能是楚留香吗？<br>我说你别多想，我只是要成名而已。<br>楚留香摸着鼻子笑，说等你伤好了，我带你去找胡铁花喝酒。<br>胡铁花的名字我当然听过，那是一代豪侠，一生光明磊落，最厌恶假冒伪劣。我学楚留香的那段日子，他就嚷着要取我性命。<br>我猜楚留香一定知道这件事。<br>楚留香看着我的眼睛，笑道：“我跟老胡说过好多次，其实你也是个光风霁月的汉子，他不信，我只好带你亲自去跟他见一面。”<br>我沉着脸，慢慢点头，我不同意还能怎样，难道认怂？<br>不存在的。<br>那天我与胡铁花连拼了八十八坛酒，从早晨旭日东升，喝到星月西沉，胡铁花咬牙切齿，说没想到你个贼小子还挺能喝。<br>我醉的一塌糊涂，大笑着与他勾肩搭背，说其实我来这江湖走一遭，发现我最想再偷一次的，是我在山下酒馆当跑堂时，偷喝的那两坛酒。<br>连楚留香都笑了起来。<br>我又一掌拍到楚留香肩膀上，两颗大眼睛盯着他，我依稀记得，那一晚我们之间的距离只有零点零三公分，风薄如剑，吹在我和他的鼻翼之间。<br>我说其实还有一样东西是我最想再偷一次的，那就是贵妃镜，如果我能再偷一次贵妃镜，你跟不跟我一起偷？<br>胡铁花打了个酒嗝，我忘记楚留香回答了什么。<br>当我们在杨柳岸旁醒来的时候，胡铁花挤眉弄眼，说你还记不记得你昨晚说了什么？<br>我：？？？<br>胡铁花哈哈大笑，说你问楚留香要不要跟你一起偷……<br>“偷酒。”<br>楚留香从一颗杨柳树后走出来，笑得很无奈，说胡铁花你能不能别总像个孩子，白兄倘若真的忘了，不如我来告诉你。<br>我点点头，还是一头雾水。<br>楚留香说，昨晚你怀念起你初出茅庐的时候，在酒馆里跑堂，偷了两坛酒，你说那两坛酒是你最想再偷一次的东西。我忽然想到，其实退出江湖后，开一间客栈也不错，你们两个酒鬼可以来替我当跑堂，一个月三钱银子，好处是可以随时偷酒。<br>我笑了笑，说那客栈恐怕就开不下去了。<br>那天我还畅想过未来，我这半生在黑暗中摸爬滚打，几番艰辛，倘若让我开一间客栈，名字一定叫很难取。<br>楚留香说，不如就叫同福客栈，过客皆同福，江湖岂无路？<br>胡铁花在一旁拍手叫好，我重复念了两句，但觉天地一宽，仿佛前半生的风雨就此云淡。<br>·4<br>有时候人用尽力气去忘记，却偏偏会记得更清晰，当你逃避着你的过去，过去往往会再次找上你。<br>展红绫来找过我。<br>她欲语还休，她知道我受过三刀六洞，说自己本来不想麻烦我。<br>我推了盏茶给她喝，说你既然已经来了，想必是有了天大的麻烦，我这个人最怕麻烦，只不过朋友的麻烦，我却一向喜欢听一听。<br>展红绫说，我们是朋友？<br>我扬眉，笑道：“我这个人只有在听朋友的麻烦时，才能笑得出来，你说我们算不算朋友？”<br>展红绫的眼睛眨了几下，半晌说不出个答案。<br>后来展红绫告诉我，你现在不学楚留香偷东西，但一举一动，一言一行，都像极了楚留香。<br>我摸了摸鼻子，笑着不置可否。<br>展红绫的麻烦是来源于我，我送给她的那本《辑盗指南》失效了，盗门改了一部分暗语与种种规矩，《辑盗指南》半真半假，他们利用展红绫，反倒做下不少大案。<br>那本书里还有一些我的个人经验，此人这么了解那本书，除了我，只有他。<br>如今已经人称盗神的姬无命。<br>我又去了江湖，我以为这次的事情很简单，功成身退只在片刻之间。我还听说，楚留香已经在准备开客栈，我想我很快就能去做个跑堂。<br>没想到，姬无命又他妈跟我说了句对不起。<br>我找到姬无命的时候，他正在偷一个赶考书生的包裹，很多年以后我才知道，那个书生姓吕，三岁识千字，五岁背唐诗，七岁熟读四书五经，八岁精通诗词歌赋。<br>吕秀才后来对我说，其实看过那么多书，一样看不透人心江湖，有排山倒海巨浪滚滚，我就只能认栽。<br>我拦下姬无命，说你现在怎么连这种单子都干了？<br>姬无命说，老白啊老白，你竟然真的来了。<br>姬无命又说，这一次，我想你跑也来不及跑了。<br>我一时没能反应过来，是盗门的人不肯放过我，还是姬无命这小子故意要害我？<br>客栈外涌来一大票人，都是六扇门的兵马，我眉头一皱，问姬无命说，难道展红绫骗了我？<br>姬无命叹气，说展红绫她当然没有骗你，盗门的确做了案，但眼下门外的捕头却认为你是同谋，非要来抓了你。<br>我狐疑的看着姬无命，说那你是来做什么的？<br>姬无命伸手指了指自己，苦笑说，我能是干什么的，我当然是诱饵咯，大哥你能不能安分点，每次那么多人上门找我，我很怕的呀大哥。<br>“所以你就出卖我？”<br>姬无命耸了耸肩，笑着说，江湖嘛，倘若这次你逃得了，以后我们还是兄弟。<br>我转过身，背对着他，忽然想起一个问题。<br>“那本《辑盗指南》的内容，究竟是不是你泄露出去的？”<br>姬无命一摊手，说我哪敢啊大哥，我还嫌身上的麻烦不够吗？<br>我轻轻闭眼，除去姬无命，那本书的内容我只告诉过一个人，一个最讨厌麻烦的人。<br>·5<br>有时候无意间的举动，会成为一个人终生的魔障。<br>这次来追捕我的人叫凌腾云，那时我并不知道会在以后与他重逢，为了逃命，我随手在客栈劫了个姑娘，在屋顶上一步步退着，想在六扇门的重重包围下逃脱。<br>凌腾云向人质和我各丢出一镖，我猜他为了抓我，已经不惜一切代价。<br>但他似乎没有想到我会出手救人质，有一瞬间的失神，我趁他失神的片刻，推了一把人质，终于逃之夭夭。<br>我没有逃远，我还要去找人，去找楚留香当面问个清楚。<br>其实有许多事没有必要问，问得越多，烦恼就越多，但你还是忍不住问，忍不住想，仿佛只要问了，想了，就能证明自己曾经活过。<br>我在不远的旷野里，再一次见到了楚留香。<br>他依然穿着那身月白色的衣服，酒壶是青色的，月光洒下来，一滴滴落在酒壶中。<br>盗门的大佬都在他的周围，正坐地分赃。<br>我身后跟着大片的六扇门捕快，凌腾云抓不到我，抓到这些人也是好的。<br>隔着秋夜的风，我与楚留香远远的对视，我想问一句为什么，我又忽然发觉不必问了。<br>盗门的大佬听到动静，当即要逃，被楚留香来去纵横，一一拦了下来，我看着那抹白衣，想起楚留香曾经开玩笑的一句话。<br>“虽然我是个盗帅，但我真的希望手底下能少几个兵。”<br>如果说我只是想在江湖上留个侠名，楚留香这一辈子都会在江湖上飘，他有除不尽的贼，遇不完的朋友与红颜，还有喝不完的酒。<br>所以这是一个局，楚留香借我那本书，将这群老儿一网打尽。<br>我忽然觉得有些无聊，我逃了几百里路，鞋子都跑掉了，只为来问楚留香一个答案。<br>然而楚留香却连人都不杀一个，他认为能杀人抓人的只有律法，他只是在打架斗殴。或许他骗了我，但他请我喝一坛酒，建一座客栈，我就不能不原谅他。<br>这样一个人，我怎么可能不肯原谅他，我简直恨不得现在就原谅他。<br>那样我就会成为他所有朋友中的一个，盗圣白玉汤，平平无奇。<br>我迎着风，决定不给他请我喝酒的机会了。<br>我要让他记住我，在这座江湖里，他还有一个欺骗过的人，没有机会去取得他的原谅。<br>我选了个逆风的方向，光着脚一路狂奔，追风赶月别留情，这是师父告诉我的话。<br>可惜，我留了情，所以这座江湖里我注定只能是轻功第二，永远追不上楚留香。<br>从此江湖路远，不如不见。<br>·0<br>离开江湖后，我来到七侠镇，在同福客栈里做跑堂。<br>那时候我才知道，师父说我们学点穴的，身子追上手很难，原来身子追上手也不难，功夫的真正关口，不是你追风赶月有多快，而是你能否尽早的抽身回头。<br>客栈的老板娘是我当年挟持的人质，直到很多年后，我才知道这件事。<br>有时候缘深缘浅无常，后来再去回想那一夜，真的发生了许多事，冥冥中有许多重要的人，我都在那一夜做了了断。<br>那年长街落雨，我偷了坛酒，坐在檐下喝着，忽然看到远远走来个白衫折扇的公子。<br>我怔怔放下酒坛，看着那人摸着鼻子，笑了笑。<br>于是我也笑，拍拍身边，说坐下，一起喝两杯吧。<br>我曾经无数次设想过，我跟他再次重逢会是怎样的画面，会说些什么样的话，他会问我当年为什么要走，我会对他说其实我对你有些不一样的情愫。<br>但我们什么都没说，只是喝着酒，我淡淡感慨了两句。<br>楚留香，我心里有过你。<br>当时年少负气，你别在意。<br>楚留香低头笑，他说你还记不记得，你醉倒在杨柳岸那一次？你问我倘若当时喊握一起去偷贵妃镜，我跟不跟你走……<br>“我记得，你说你愿意跟我走。”<br>我向嘴里倒了口酒，转过头朝他笑，客栈二楼传来湘玉的声音，她说：蘸<del>糖</del>下雨收衣服嘞，你跑哪去啦？<br>于是白衫的公子点点头，也笑了，说只可惜不能再见你追风赶月的身法，江湖路远，你好自珍重。<br>我朝他挥挥手，目送楚留香翩然走进雨幕之中。<br>不知是否是我的错觉，我看着楚留香的背影，有种难言的熟悉感，他的背影像极了在京城落寞惆怅的我。<br>万千雨丝像是大海，整条长街水一般散开，只有他像一块礁石，兀自伫立其中。<br>我喝了口酒，有点想哭，又听到身后湘玉走来的声音。<br>她一定又要拧我耳朵，好疼的。<br>我又有点想笑。<br>完。</p>]]></content>
    
    
    
    <tags>
      
      <tag>cave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manual</title>
    <link href="/2018/10/26/Manual/"/>
    <url>/2018/10/26/Manual/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 常用的东西 每次都要 google 好麻烦 记个笔记</p></blockquote>  <span id="more"></span><h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><p><code>export http_proxy=http://127.0.0.1:8118;export https_proxy=http://127.0.0.1:8118;</code></p><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><h2 id="查看出口-IP"><a href="#查看出口-IP" class="headerlink" title="查看出口 IP"></a>查看出口 IP</h2><p><code>curl ifconfig.me</code></p><h2 id="查看文件数量"><a href="#查看文件数量" class="headerlink" title="查看文件数量"></a>查看文件数量</h2><p><code>ll | grep &#39;^-&#39; | wc -l</code></p><h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><p><code>ssh-copy-id -i ~/.ssh/id_rsa.pub -p 20002 root@116.62.57.97</code></p><h2 id="ssh-使用代理登录"><a href="#ssh-使用代理登录" class="headerlink" title="ssh 使用代理登录"></a>ssh 使用代理登录</h2><p><code>ssh -o ProxyCommand=&quot;nc -X 5 -x 127.0.0.1:1086 %h %p&quot; root@207.246.99.183</code></p><h1 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">Ctrl+p: 上一个使用的历史命令。 （p：previous）<br>Ctrl+n： 下一个使用的历史命令。（n：next ）<br>Ctrl+t： 交换光标所在字符和其前的字符。<br>Ctrl+s: 使终端发呆，静止，可以使快速输出的终端屏幕停下来。<br>Ctrl+q：退出 Ctrl+s 引起的发呆<br>Ctrl+z：使正在运行在终端的任务，运行于后台。 （可用 fg 恢复）<br>Ctrl+a：光标回到命令行首。 （a：ahead）<br>Ctrl+e：光标回到命令行尾。 （e：end）<br>Ctrl+b：光标向行首移动一个字符。 （b：backwards）<br>Ctrl+f：光标向行尾移动一个字符。 （f：forwards）<br>Ctrl+w: 删除光标处到行首的字符。<br>Ctrl+k：删除光标处到行尾的字符<br>Ctrl+u：删除整个命令行文本字符<br>Ctrl+h：向行首删除一个字符<br>Ctrl+d：向行尾删除一个字符<br></code></pre></td></tr></table></figure><p>一键安装</p><p><code>wget https://raw.githubusercontent.com/kong5664546498/half_a_wheel/master/wheel/onekey-omzsh/onekey-omzsh.sh&amp;&amp; chmod +x onekey-omzsh.sh &amp;&amp; ./onekey-omzsh.sh</code></p><h1 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h1><h2 id="bbr"><a href="#bbr" class="headerlink" title="bbr"></a>bbr</h2><p><code>wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</code></p><h2 id="ssr"><a href="#ssr" class="headerlink" title="ssr"></a>ssr</h2><p><code>wget https://raw.githubusercontent.com/kong5664546498/half_a_wheel/master/wheel/ss/onekey-ss.sh &amp;&amp; chmod +x onekey-ss.sh &amp;&amp; ./onekey-ss.sh</code></p><p>连接</p><p><code>ssr://YndnLmFmcmV0by50b3AxOjQ0MzphdXRoX2FlczEyOF9tZDU6YWVzLTI1Ni1jZmI6dGxzMS4yX3RpY2tldF9hdXRoOmNYQjZiVEkzTkRVLz9vYmZzcGFyYW09U0VzeVUwTklNVE13TURnell6RTROVGt6TG5kdWN5NTNhVzVrYjNkekxtTnZiUSZwcm90b3BhcmFtPSZyZW1hcmtzPWJtVjNYMkozWncmZ3JvdXA9</code></p><h1 id="Pikachu"><a href="#Pikachu" class="headerlink" title="Pikachu"></a>Pikachu</h1><p><code>wget https://raw.githubusercontent.com/kong5664546498/half_a_wheel/master/wheel/Pikachu</code></p><h1 id="ssh-1"><a href="#ssh-1" class="headerlink" title="ssh"></a>ssh</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-copy-id -i ~/.ssh/id_rsa.pub root@ip<br>ssh -i ~/.ssh/id_rsa root@47.93.41.80<br>ssh-keygen -t rsa -C &quot;kongandmarx@163.com&quot;<br></code></pre></td></tr></table></figure><h1 id="JB-模板"><a href="#JB-模板" class="headerlink" title="JB 模板"></a>JB 模板</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------</span><br><span class="hljs-string">Author:Afreto</span><br><span class="hljs-string">E-mail:kongandmarx@163.com</span><br><span class="hljs-string">time:$&#123;DATE&#125; $&#123;TIME&#125; </span><br><span class="hljs-string">-------------------------------------------------</span><br><span class="hljs-string">Description:</span><br><span class="hljs-string">Usage:</span><br><span class="hljs-string">-------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">@Time   : $&#123;DATE&#125; $&#123;TIME&#125; </span><br><span class="hljs-comment">@Author : Afreto</span><br><span class="hljs-comment">@File   : $&#123;NAME&#125;</span><br><span class="hljs-comment">@E-mail : kongandmarx@163.com</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">package</span> $&#123;GO_PACKAGE_NAME&#125;<br><br></code></pre></td></tr></table></figure><h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><h2 id="电源管理中没有休眠选项"><a href="#电源管理中没有休眠选项" class="headerlink" title="电源管理中没有休眠选项"></a>电源管理中没有休眠选项</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powercfg <span class="hljs-literal">-h</span> off<br>powercfg hibernate size <span class="hljs-number">40</span><br>Powercfg <span class="hljs-literal">-h</span> on<br></code></pre></td></tr></table></figure><p><a href="https://answers.microsoft.com/zh-hans/windows/forum/windows_10-power/new-surface/2bc0382c-0ad9-457e-8adc-8d24df60c94d">windows community solution</a></p><h2 id="powershell-代理设置"><a href="#powershell-代理设置" class="headerlink" title="powershell 代理设置"></a>powershell 代理设置</h2><p><code>$Env:http_proxy=&quot;http://127.0.0.1:1087&quot;;$Env:https_proxy=&quot;http://127.0.0.1:1087&quot;</code></p><h2 id="scoop"><a href="#scoop" class="headerlink" title="scoop"></a>scoop</h2><p><code>iwr -useb get.scoop.sh | iex</code></p><p>Note: if you get an error you might need to change the execution policy (i.e. enable Powershell) with</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Set</span>-ExecutionPolicy <span class="hljs-comment">RemoteSigned -scope CurrentUser</span><br></code></pre></td></tr></table></figure><p>关闭 aria2</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop config aria2<span class="hljs-literal">-enabled</span> false  <br></code></pre></td></tr></table></figure><p>日常更新软件命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo scoop update * <span class="hljs-literal">-g</span> ; scoop update * ; sudo scoop cleanup * <span class="hljs-literal">-g</span> ; scoop cleanup *<br></code></pre></td></tr></table></figure><p>查看 Scoop 还能直接识别哪些 bucket</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket known<br></code></pre></td></tr></table></figure><p>设置代理</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop config proxy <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8118</span><br></code></pre></td></tr></table></figure><p>添加常用的 bucket</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket add extras;<br>scoop bucket add Java;<br>scoop bucket add versions;<br>scoop bucket add Ash258 <span class="hljs-string">&#x27;https://github.com/Ash258/Scoop-Ash258.git&#x27;</span><br>scoop bucket add dorado https://github.com/h404bi/dorado<br>scoop bucket add iszy https://github.com/ZvonimirSun/scoop<span class="hljs-literal">-iszy</span><br>scoop bucket add dodorz https://github.com/dodorz/scoop<span class="hljs-literal">-bucket</span><br>scoop bucket add rasa https://github.com/rasa/scoops<br>scoop bucket add scoopet https://github.com/integzz/scoopet<br>scoop bucket add raresoft https://github.com/L<span class="hljs-literal">-Trump</span>/scoop<span class="hljs-literal">-raresoft</span><br></code></pre></td></tr></table></figure><h1 id="WSA"><a href="#WSA" class="headerlink" title="WSA"></a>WSA</h1><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><p>浏览器打开 <code>wsa://com.android.settings</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遍历 zookeeper 中的内容</title>
    <link href="/2018/10/25/%E9%81%8D%E5%8E%86-zookeeper-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9/"/>
    <url>/2018/10/25/%E9%81%8D%E5%8E%86-zookeeper-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<p>直接上代码吧~</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kazoo.client <span class="hljs-keyword">import</span> KazooClient, KazooState<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">con_zk</span>(<span class="hljs-params">ip: <span class="hljs-built_in">str</span>, port: <span class="hljs-built_in">int</span></span>):<br>    zk = KazooClient(hosts=<span class="hljs-string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip, port))<br>    zk.start()<br>    <span class="hljs-comment"># data, stat = zk.get(&#x27;/&#x27;)</span><br>    info = zk.get(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;info --&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(info))<br>    <span class="hljs-comment"># print(&#x27;data --&gt; &#123;&#125; | stat --&gt; &#123;&#125;&#x27;.format(data, stat))</span><br>    children = zk.get_children(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;children --&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(children))<br><br>    zk.stop()<br>    zk.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">zk_walk</span>(<span class="hljs-params">_zk, node, func</span>):<br>    data, stat = _zk.get(node)<br>    children = _zk.get_children(node)<br>    func(node, data, stat, children)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(children) &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">for</span> sub <span class="hljs-keyword">in</span> children:<br>            <span class="hljs-keyword">if</span> node != <span class="hljs-string">&#x27;/&#x27;</span>:<br>                sub_node = node + <span class="hljs-string">&#x27;/&#x27;</span> + sub<br>            <span class="hljs-keyword">else</span>:<br>                sub_node = <span class="hljs-string">&#x27;/&#x27;</span> + sub<br>            zk_walk(_zk, sub_node, func)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printZNode</span>(<span class="hljs-params">node, data, stat, children</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;node  : &quot;</span> + node)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data  : &quot;</span> + <span class="hljs-built_in">str</span>(data))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;stat  : &quot;</span> + <span class="hljs-built_in">str</span>(stat))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;child : &quot;</span> + <span class="hljs-built_in">str</span>(children))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">50</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python3 | virtualenv 部署和迁移</title>
    <link href="/2018/10/25/python3-virtualenv-%E9%83%A8%E7%BD%B2%E5%92%8C%E8%BF%81%E7%A7%BB/"/>
    <url>/2018/10/25/python3-virtualenv-%E9%83%A8%E7%BD%B2%E5%92%8C%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="python3-编译安装"><a href="#python3-编译安装" class="headerlink" title="python3 编译安装"></a>python3 编译安装</h2><ul><li>下载 <a href="https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz">官链</a></li><li>上传到服务器 解压 安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /usr/local/python3  <br><span class="hljs-built_in">cd</span> /usr/local/python3<br>tar -zxvf  Python-3.6.6.tgz<br><span class="hljs-built_in">cd</span> /usr/local/python3/&lt;解压后的路径&gt;<br>./configure prefix=/usr/local/python3<br>make &amp;&amp; make install<br><span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/pip3  /usr/bin/pip3<br><span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/python3.6 /usr/bin/python3<br></code></pre></td></tr></table></figure><ul><li>查看python3 是否安装成功</li></ul><h2 id="安装-virtualenv"><a href="#安装-virtualenv" class="headerlink" title="安装 virtualenv"></a>安装 virtualenv</h2><ul><li><p>在线安装 <code>pip install virtualenv</code></p></li><li><p>离线安装</p><ul><li><p>下载 <a href="https://pan.baidu.com/s/1DmAD8LG_Cu0aZHtkQe-adw">官链</a>  <a href="https://codeload.github.com/pypa/virtualenv/zip/master">某度云</a></p></li><li><p>解压 安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar xvfz virtualenv-X.X.tar.gz<br><span class="hljs-built_in">cd</span> virtualenv-X.X<br>python setup.py install<br><span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="离线迁移-python-包"><a href="#离线迁移-python-包" class="headerlink" title="离线迁移 python 包"></a>离线迁移 python 包</h2><ul><li>创建package目录 并进入到该目录</li><li>生成记录文件 <code>pip freeze &gt; requirements.txt</code></li><li>将文件记录的包下载到当前目录<br><code>pip download -r requirements.txt -d .</code><br>清除该目录下 requirements.txt 文件<br>该目录下即为相应软件<br>在目标环境中执行<br><code>pip install package/*</code></li></ul><h2 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h2><p><code>curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</code><br><code>python get-pip.py</code></p><h2 id="安装-pipenv"><a href="#安装-pipenv" class="headerlink" title="安装 pipenv"></a>安装 pipenv</h2><p><code>pip install --user pipenv</code></p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="pip-安装报错"><a href="#pip-安装报错" class="headerlink" title="pip 安装报错"></a>pip 安装报错</h3><p>使用 <code>pip install &lt;package&gt;</code> 安装时, 报 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">httptools<span class="hljs-regexp">/parser/</span>parser.c:<span class="hljs-number">4</span>:<span class="hljs-number">20</span>: fatal error: Python.h: No such file or directory<br> <span class="hljs-comment">#include &quot;Python.h&quot;</span><br>                    ^<br>compilation terminated.<br>error: command <span class="hljs-string">&#x27;gcc&#x27;</span> failed with <span class="hljs-keyword">exit</span> status <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>解决办法<br>安装 gcc 和 依赖</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> python-devel<br>yum <span class="hljs-keyword">install</span> python3-devel<br>yum <span class="hljs-keyword">install</span> python36-devel<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java环境部署记录</title>
    <link href="/2018/10/25/java%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/"/>
    <url>/2018/10/25/java%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="RPM-方式部署"><a href="#RPM-方式部署" class="headerlink" title="RPM 方式部署"></a>RPM 方式部署</h2><ul><li><p>下载 <a href="https://pan.baidu.com/s/1J6_c1mNdTzxl0gBBISyM2w">java_rpm</a></p></li><li><p>查看该系统是否安装过Java 环境，如果安装过将其卸载安装最新的版本，更换Java 的版本也可以这样去操作<br><code>rpm -qa | grep jdk  </code></p></li><li><p>如果已安装有其它版本 则 卸载 列出多少个版本插件就要卸载几个插件 完成后再次检查是否有遗漏<br><code>rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.2.el7_2.x86_64</code></p></li><li><p>将下载后的文件上传到目标环境相应路径下  在该文件下进行安装<br><code>rpm -ivh jdk-8u131-linux-x64.rpm</code></p></li><li><p>检验安装<br><code>java -version</code></p></li><li><p>查看安装目录  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> java   <br><span class="hljs-built_in">ls</span> -lrt /usr/bin/java<br><span class="hljs-built_in">ls</span> -lrt /etc/alternatives/java  <br></code></pre></td></tr></table></figure></li><li><p>配置环境变量</p><ul><li><p><code>vim etc/profile  </code>  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">JAVA_HOME=<span class="hljs-regexp">/usr/</span>java/jdk1.<span class="hljs-number">8.0</span>_151<br>JRE_HOME=<span class="hljs-regexp">/usr/</span>java<span class="hljs-regexp">/jdk1.8.0_151/</span>jre<br>CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/lib:$JRE_HOME/</span>lib:<span class="hljs-variable">$CLASSPATH</span><br>PATH=<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/bin:$JRE_HOME/</span>bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>加载环境变量<br><code> source /etc/profile</code></p></li><li><p>验证环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash\">echo $JAVA_HOME <br>echo $CLASSPATH <br>echo $PATH <br></code></pre></td></tr></table></figure></li></ul><h2 id="tar-gz-安装"><a href="#tar-gz-安装" class="headerlink" title="tar.gz 安装"></a>tar.gz 安装</h2><ul><li><p>下载 <a href="http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz">官链</a> <a href="https://pan.baidu.com/s/1WZ9hevAvbbQ89NLLxy1oNw">百度云</a></p></li><li><p>配置环境变量</p><ul><li><p><code>vim .zshrc</code><br><em>zsh 真好用  没有使用 zsh 的 修改 .bashrc</em></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">JAVA_HOME=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span>jdk1.<span class="hljs-number">8.0</span>_181<br>JRE_HOME=<span class="hljs-variable">$JAVA_HOME</span>/jre<br>JAVA_BIN=<span class="hljs-variable">$JAVA_HOME</span>/bin<br>CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/lib/</span>dt.jar:<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/lib/</span>tools.jar:<span class="hljs-variable">$JRE_HOME</span>/lib<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/bin:$JRE_HOME/</span>bin<br>export JAVA_HOME JRE_HOME PATH CLASSPATH<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="apt-安装"><a href="#apt-安装" class="headerlink" title="apt 安装"></a>apt 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install openjdk-8-jdk<br></code></pre></td></tr></table></figure><h2 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install java-1.8.0-openjdk-devel.x86_64<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>django配置允许跨域</title>
    <link href="/2018/10/25/django%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F/"/>
    <url>/2018/10/25/django%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="django-跨域问题"><a href="#django-跨域问题" class="headerlink" title="django 跨域问题"></a>django 跨域问题</h2><span id="more"></span><h3 id="安装-django-cors-headers"><a href="#安装-django-cors-headers" class="headerlink" title="安装 django-cors-headers"></a>安装 django-cors-headers</h3><ul><li><code> pip install django-cors-headers</code></li></ul><h3 id="修改-setting-py"><a href="#修改-setting-py" class="headerlink" title="修改 setting.py"></a>修改 setting.py</h3><ul><li><pre><code class="python">INSTALLED_APPS = [ ... &#39;corsheaders&#39;， ... ]MIDDLEWARE_CLASSES = ( ... &#39;corsheaders.middleware.CorsMiddleware&#39;, &#39;django.middleware.common.CommonMiddleware&#39;, # 注意顺序 ... )CORS_ALLOW_CREDENTIALS = TrueCORS_ORIGIN_ALLOW_ALL = TrueCORS_ORIGIN_WHITELIST = ( &#39;*&#39; )CORS_ALLOW_METHODS = ( &#39;DELETE&#39;, &#39;GET&#39;, &#39;OPTIONS&#39;, &#39;PATCH&#39;, &#39;POST&#39;, &#39;PUT&#39;, &#39;VIEW&#39;, )CORS_ALLOW_HEADERS = ( &#39;XMLHttpRequest&#39;, &#39;X_FILENAME&#39;, &#39;accept-encoding&#39;, &#39;authorization&#39;, &#39;content-type&#39;, &#39;dnt&#39;, &#39;origin&#39;, &#39;user-agent&#39;, &#39;x-csrftoken&#39;, &#39;x-requested-with&#39;, &#39;Pragma&#39;, )</code></pre></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装配置mysql</title>
    <link href="/2018/10/24/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEmysql/"/>
    <url>/2018/10/24/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEmysql/</url>
    
    <content type="html"><![CDATA[<h2 id="mysql-安装记录"><a href="#mysql-安装记录" class="headerlink" title="mysql 安装记录"></a>mysql 安装记录</h2><h3 id="windows-下-zip格式安装"><a href="#windows-下-zip格式安装" class="headerlink" title="windows 下 zip格式安装"></a>windows 下 zip格式安装</h3><blockquote><p><em>windows 安装个 mysql 还是挺麻烦的 官方的安装器 用起来好麻烦  还经常出错 后来环境都习惯放在 WSL 里面   记录一下这个 zip 包的安装</em></p></blockquote><span id="more"></span><blockquote><ul><li>下载 <a href="https://dev.mysql.com/downloads/mysql/5.6.html#downloads">官链</a>  <a href="https://pan.baidu.com/s/1gR_T14njEZzYRno5vUL98Q">某度云</a></li></ul></blockquote><ul><li><p>配置</p><ul><li><p>my.ini 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">mysql</span>]<br><span class="hljs-comment"># 设置mysql客户端默认字符集default-character-set=utf8</span><br>[<span class="hljs-string">mysqld</span>]<br><span class="hljs-comment">#设置3306端口</span><br><span class="hljs-string">port</span> <span class="hljs-string">=</span> <span class="hljs-number">3306</span><br><span class="hljs-comment"># 设置mysql的安装目录</span><br><span class="hljs-string">basedir=C:\Program</span> <span class="hljs-string">Files\mysql-5.6.39-winx64</span><br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br><span class="hljs-string">datadir=C:\Program</span> <span class="hljs-string">Files\mysql-5.6.39-winx64\data</span><br><span class="hljs-comment"># 允许最大连接数</span><br><span class="hljs-string">max_connections=200#</span> <span class="hljs-string">服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="hljs-string">character-set-server=utf8</span><br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎default-storage-engine=INNODB</span><br><span class="hljs-string">skip-grant-tables</span><br></code></pre></td></tr></table></figure></li><li><p>配置环境变量</p><ul><li>在系统变量PATH后面添加: 你的mysql bin文件夹的路径（如C:\Program Files\mysql-5.6.39-winx64\bin）</li></ul></li><li><p>安装 MySQL 服务</p><ul><li>以管理员身份打开cmd窗口后，将目录切换到你解压文件的bin目录，输入<br><code>mysqld install</code></li></ul></li><li><p>启动 MySQL 服务</p><ul><li>以管理员身份在cmd中输入</li><li><code>net start mysql</code></li><li>服务启动成功之后，就可以登录了，输入 <code>mysql -u root -p</code>（第一次登录没有密码，直接按回车过）</li></ul></li></ul></li></ul><h3 id="ubuntu18-04-安装"><a href="#ubuntu18-04-安装" class="headerlink" title="ubuntu18.04 安装"></a>ubuntu18.04 安装</h3><blockquote><p>微软这波巨硬~   WSL 真的是太好用了  既有 linux 环境可以用 又不用折腾</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install mysql-server -y  <br>service mysql start<br></code></pre></td></tr></table></figure><h3 id="centos7-安装"><a href="#centos7-安装" class="headerlink" title="centos7 安装"></a>centos7 安装</h3><ul><li><p>下载 <a href="http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm">mysql.noarch.rpm</a></p><blockquote><p>或者 <code>wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</code></p></blockquote></li><li><p>安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -ivh mysql-community-release-el7-5.noarch.rpm<br>yum install mysql-community-server<br>service mysqld restart<br></code></pre></td></tr></table></figure><ul><li>添加防火墙端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=3306/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h3 id="MySQL-常用命令三连"><a href="#MySQL-常用命令三连" class="headerlink" title="MySQL 常用命令三连"></a>MySQL 常用命令三连</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create user bird identified by &#x27;birdpwd&#x27;;<br>grant all privileges on birdDb.* to bird@&#x27;%&#x27; identified by &#x27;birdpwd&#x27;;<br>flush  privileges;<br></code></pre></td></tr></table></figure><h3 id="配置中文"><a href="#配置中文" class="headerlink" title="配置中文"></a>配置中文</h3><p><code>mysql&gt; status;</code><br><img src="https://i.loli.net/2018/10/27/5bd3c9e76a345.png" alt="status"><br>查看表的字符集<br><code> show create table &lt;table_name&gt;;</code><br><img src="https://i.loli.net/2018/10/27/5bd3c9e73bff8.png" alt="table"><br>修改表字符集<br><code>ALTER TABLE &lt;table_name&gt; character set utf8;</code><br>修改字段字符集<br><code>mysql&gt; ALTER TABLE &lt;table_name&gt; modify name varchar(20) character set utf8;</code><br>设置数据库编码</p><blockquote><p>show<br><code>show variables like &#39;character_set_%&#39;;</code><br><img src="https://i.loli.net/2018/10/27/5bd3c9e73ced6.png" alt="mysql"><br>set<br><code>set character_set_database=utf8;</code></p></blockquote><h3 id="设置区分大小写"><a href="#设置区分大小写" class="headerlink" title="设置区分大小写"></a>设置区分大小写</h3><p>创建表时，直接设置表的 collate 属性为 utf8_general_cs 或者 utf8_bin；如果已经创建表，则直接修改字段的 Collation 属性为 utf8_general_cs 或者 utf8_bin<br>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE testt(<br>id INT PRIMARY KEY,<br>name VARCHAR(32) NOT NULL<br>) ENGINE = INNODB COLLATE =utf8_bin;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
